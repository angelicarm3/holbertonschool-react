/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={272:(e,t,n)=>{"use strict";var r=n(723),i=[],o=[],a=r.makeRequestCallFromTimer((function(){if(o.length)throw o.shift()}));function u(e){var t;(t=i.length?i.pop():new l).task=e,r(t)}function l(){this.task=null}e.exports=u,l.prototype.call=function(){try{this.task.call()}catch(e){u.onerror?u.onerror(e):(o.push(e),a())}finally{this.task=null,i[i.length]=this}}},723:(e,t,n)=>{"use strict";function r(e){o.length||i(),o[o.length]=e}e.exports=r;var i,o=[],a=0;function u(){for(;a<o.length;){var e=a;if(a+=1,o[e].call(),a>1024){for(var t=0,n=o.length-a;t<n;t++)o[t]=o[t+a];o.length-=a,a=0}}o.length=0,a=0}var l,c,s,f=void 0!==n.g?n.g:self,p=f.MutationObserver||f.WebKitMutationObserver;function d(e){return function(){var t=setTimeout(r,0),n=setInterval(r,50);function r(){clearTimeout(t),clearInterval(n),e()}}}"function"==typeof p?(l=1,c=new p(u),s=document.createTextNode(""),c.observe(s,{characterData:!0}),i=function(){l=-l,s.data=l}):i=d(u),r.requestFlush=i,r.makeRequestCallFromTimer=d},33:(e,t,n)=>{"use strict";var r=n(294),i=n(935),o=n(121),a=function(){return Math.random().toString(36).substring(7).split("").join(".")},u={INIT:"@@redux/INIT"+a(),REPLACE:"@@redux/REPLACE"+a(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+a()}};function l(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function c(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function s(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(n,!0).forEach((function(t){f(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function h(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}var y=n(697),m=n.n(y),v=r.createContext(null),g=function(e){e()},b=function(){return g},_={notify:function(){}},w=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=_,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=function(){var e=b(),t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,i=n={callback:e,next:null,prev:n};return i.prev?i.prev.next=i:t=i,function(){r&&null!==t&&(r=!1,i.next?i.next.prev=i.prev:n=i.prev,i.prev?i.prev.next=i.next:t=i.next)}}}}())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=_)},e}(),S="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect;const x=function(e){var t=e.store,n=e.context,i=e.children,o=(0,r.useMemo)((function(){var e=new w(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),a=(0,r.useMemo)((function(){return t.getState()}),[t]);S((function(){var e=o.subscription;return e.trySubscribe(),a!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[o,a]);var u=n||v;return r.createElement(u.Provider,{value:o},i)};function k(){return k=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},k.apply(this,arguments)}function E(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}var T=n(679),O=n.n(T),C=n(864),P=[],z=[null,null];function I(e,t){var n=e[1];return[t.payload,n+1]}function N(e,t,n){S((function(){return e.apply(void 0,t)}),n)}function j(e,t,n,r,i,o,a){e.current=r,t.current=i,n.current=!1,o.current&&(o.current=null,a())}function M(e,t,n,r,i,o,a,u,l,c){if(e){var s=!1,f=null,p=function(){if(!s){var e,n,p=t.getState();try{e=r(p,i.current)}catch(e){n=e,f=e}n||(f=null),e===o.current?a.current||l():(o.current=e,u.current=e,a.current=!0,c({type:"STORE_UPDATED",payload:{error:n}}))}};return n.onStateChange=p,n.trySubscribe(),p(),function(){if(s=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var R=function(){return[null,0]};function D(e,t){void 0===t&&(t={});var n=t,i=n.getDisplayName,o=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,a=n.methodName,u=void 0===a?"connectAdvanced":a,l=n.renderCountProp,c=void 0===l?void 0:l,s=n.shouldHandleStateChanges,f=void 0===s||s,p=n.storeKey,d=void 0===p?"store":p,h=(n.withRef,n.forwardRef),y=void 0!==h&&h,m=n.context,g=void 0===m?v:m,b=E(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),_=g;return function(t){var n=t.displayName||t.name||"Component",i=o(n),a=k({},b,{getDisplayName:o,methodName:u,renderCountProp:c,shouldHandleStateChanges:f,storeKey:d,displayName:i,wrappedComponentName:n,WrappedComponent:t}),l=b.pure,s=l?r.useMemo:function(e){return e()};function p(n){var i=(0,r.useMemo)((function(){var e=n.reactReduxForwardedRef,t=E(n,["reactReduxForwardedRef"]);return[n.context,e,t]}),[n]),o=i[0],u=i[1],l=i[2],c=(0,r.useMemo)((function(){return o&&o.Consumer&&(0,C.isContextConsumer)(r.createElement(o.Consumer,null))?o:_}),[o,_]),p=(0,r.useContext)(c),d=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(p)&&Boolean(p.store);var h=d?n.store:p.store,y=(0,r.useMemo)((function(){return function(t){return e(t.dispatch,a)}(h)}),[h]),m=(0,r.useMemo)((function(){if(!f)return z;var e=new w(h,d?null:p.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[h,d,p]),v=m[0],g=m[1],b=(0,r.useMemo)((function(){return d?p:k({},p,{subscription:v})}),[d,p,v]),S=(0,r.useReducer)(I,P,R),x=S[0][0],T=S[1];if(x&&x.error)throw x.error;var O=(0,r.useRef)(),D=(0,r.useRef)(l),A=(0,r.useRef)(),L=(0,r.useRef)(!1),F=s((function(){return A.current&&l===D.current?A.current:y(h.getState(),l)}),[h,x,l]);N(j,[D,O,L,l,F,A,g]),N(M,[f,h,v,y,D,O,L,A,g,T],[h,v,y]);var B=(0,r.useMemo)((function(){return r.createElement(t,k({},F,{ref:u}))}),[u,t,F]);return(0,r.useMemo)((function(){return f?r.createElement(c.Provider,{value:b},B):B}),[c,B,b])}var h=l?r.memo(p):p;if(h.WrappedComponent=t,h.displayName=i,y){var m=r.forwardRef((function(e,t){return r.createElement(h,k({},e,{reactReduxForwardedRef:t}))}));return m.displayName=i,m.WrappedComponent=t,O()(m,t)}return O()(h,t)}}function A(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function L(e,t){if(A(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var i=0;i<n.length;i++)if(!Object.prototype.hasOwnProperty.call(t,n[i])||!A(e[n[i]],t[n[i]]))return!1;return!0}function F(e){return function(t,n){var r=e(t,n);function i(){return r}return i.dependsOnOwnProps=!1,i}}function B(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function U(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=B(e);var i=r(t,n);return"function"==typeof i&&(r.mapToProps=i,r.dependsOnOwnProps=B(i),i=r(t,n)),i},r}}const W=[function(e){return"function"==typeof e?U(e):void 0},function(e){return e?void 0:F((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?F((function(t){return function(e,t){if("function"==typeof e)return s(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var i=e[r];"function"==typeof i&&(n[r]=s(i,t))}return n}(e,t)})):void 0}],q=[function(e){return"function"==typeof e?U(e):void 0},function(e){return e?void 0:F((function(){return{}}))}];function H(e,t,n){return k({},n,e,t)}const V=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,i=n.pure,o=n.areMergedPropsEqual,a=!1;return function(t,n,u){var l=e(t,n,u);return a?i&&o(l,r)||(r=l):(a=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return H}}];function $(e,t,n,r){return function(i,o){return n(e(i,o),t(r,o),o)}}function K(e,t,n,r,i){var o,a,u,l,c,s=i.areStatesEqual,f=i.areOwnPropsEqual,p=i.areStatePropsEqual,d=!1;return function(i,h){return d?function(i,d){var h,y,m=!f(d,a),v=!s(i,o);return o=i,a=d,m&&v?(u=e(o,a),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):m?(e.dependsOnOwnProps&&(u=e(o,a)),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):v?(h=e(o,a),y=!p(h,u),u=h,y&&(c=n(u,l,a)),c):c}(i,h):(u=e(o=i,a=h),l=t(r,a),c=n(u,l,a),d=!0,c)}}function Q(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,i=t.initMergeProps,o=E(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,o),u=r(e,o),l=i(e,o);return(o.pure?K:$)(a,u,l,e,o)}function G(e,t,n){for(var r=t.length-1;r>=0;r--){var i=t[r](e);if(i)return i}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function Y(e,t){return e===t}function X(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?D:n,i=t.mapStateToPropsFactories,o=void 0===i?q:i,a=t.mapDispatchToPropsFactories,u=void 0===a?W:a,l=t.mergePropsFactories,c=void 0===l?V:l,s=t.selectorFactory,f=void 0===s?Q:s;return function(e,t,n,i){void 0===i&&(i={});var a=i,l=a.pure,s=void 0===l||l,p=a.areStatesEqual,d=void 0===p?Y:p,h=a.areOwnPropsEqual,y=void 0===h?L:h,m=a.areStatePropsEqual,v=void 0===m?L:m,g=a.areMergedPropsEqual,b=void 0===g?L:g,_=E(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),w=G(e,o,"mapStateToProps"),S=G(t,u,"mapDispatchToProps"),x=G(n,c,"mergeProps");return r(f,k({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:w,initMapDispatchToProps:S,initMergeProps:x,pure:s,areStatesEqual:d,areOwnPropsEqual:y,areStatePropsEqual:v,areMergedPropsEqual:b},_))}}const J=X();var Z;function ee(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(i){return"function"==typeof i?i(n,r,e):t(i)}}}}Z=i.unstable_batchedUpdates,g=Z;var te=ee();te.withExtraArgument=ee;const ne=te;var re="MARK_AS_READ",ie="SET_TYPE_FILTER",oe="FETCH_NOTIFICATIONS_SUCCESS",ae="SET_LOADING_STATE",ue=(n(300),function(e){return{type:re,index:e}}),le=function(e){return{type:ae,loading:e}};function ce(e,t){return e===t}function se(e,t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var r=t.length,i=0;i<r;i++)if(!e(t[i],n[i]))return!1;return!0}function fe(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"==typeof e}))){var n=t.map((function(e){return typeof e})).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+n+"]")}return t}var pe=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return function(){for(var t=arguments.length,r=Array(t),i=0;i<t;i++)r[i]=arguments[i];var o=0,a=r.pop(),u=fe(r),l=e.apply(void 0,[function(){return o++,a.apply(null,arguments)}].concat(n)),c=e((function(){for(var e=[],t=u.length,n=0;n<t;n++)e.push(u[n].apply(null,arguments));return l.apply(null,e)}));return c.resultFunc=a,c.dependencies=u,c.recomputations=function(){return o},c.resetRecomputations=function(){return o=0},c}}((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ce,n=null,r=null;return function(){return se(t,n,arguments)||(r=e.apply(null,arguments)),n=arguments,r}}))((function(e){return e.notifications}),(function(e){var t=e.get("messages"),n=e.get("filter");return t?"URGENT"===n?t.valueSeq().filter((function(e){return!1===e.get("isRead")&&"urgent"===e.get("type")})):t.valueSeq().filter((function(e){return!1===e.get("isRead")})):t})),de=n(887),he=n.n(de),ye=n(272),me=n.n(ye);function ve(e){return ve="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ve(e)}function ge(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function be(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){ge(e,t,n[t])}))}return e}function _e(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var we=/([A-Z])/g,Se=function(e){return"-".concat(e.toLowerCase())},xe={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridColumn:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ke=["Webkit","ms","Moz","O"];Object.keys(xe).forEach((function(e){ke.forEach((function(t){xe[function(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}(t,e)]=xe[e]}))}));var Ee=function(e,t){return"number"==typeof t?xe[e]?""+t:t+"px":""+t},Te=function(e,t){return Ce(Ee(e,t))},Oe=function(e,t){return he()(e).toString(36)},Ce=function(e){return"!"===e[e.length-10]&&" !important"===e.slice(-11)?e:"".concat(e," !important")},Pe="undefined"!=typeof Map,ze=function(){function e(){this.elements={},this.keyOrder=[]}var t=e.prototype;return t.forEach=function(e){for(var t=0;t<this.keyOrder.length;t++)e(this.elements[this.keyOrder[t]],this.keyOrder[t])},t.set=function(t,n,r){if(this.elements.hasOwnProperty(t)){if(r){var i=this.keyOrder.indexOf(t);this.keyOrder.splice(i,1),this.keyOrder.push(t)}}else this.keyOrder.push(t);if(null!=n){if(Pe&&n instanceof Map||n instanceof e){var o=this.elements.hasOwnProperty(t)?this.elements[t]:new e;return n.forEach((function(e,t){o.set(t,e,r)})),void(this.elements[t]=o)}if(Array.isArray(n)||"object"!==ve(n))this.elements[t]=n;else{for(var a=this.elements.hasOwnProperty(t)?this.elements[t]:new e,u=Object.keys(n),l=0;l<u.length;l+=1)a.set(u[l],n[u[l]],r);this.elements[t]=a}}else this.elements[t]=n},t.get=function(e){return this.elements[e]},t.has=function(e){return this.elements.hasOwnProperty(e)},t.addStyleType=function(t){var n=this;if(Pe&&t instanceof Map||t instanceof e)t.forEach((function(e,t){n.set(t,e,!0)}));else for(var r=Object.keys(t),i=0;i<r.length;i++)this.set(r[i],t[r[i]],!0)},e}();function Ie(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function Ne(e,t){return e(t={exports:{}},t.exports),t.exports}var je=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.charAt(0).toUpperCase()+e.slice(1)}}));Ie(je);var Me=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){if(e.hasOwnProperty(t)){for(var i={},o=e[t],a=(0,r.default)(t),u=Object.keys(n),l=0;l<u.length;l++){var c=u[l];if(c===t)for(var s=0;s<o.length;s++)i[o[s]+a]=n[t];i[c]=n[c]}return i}return n};var n,r=(n=je)&&n.__esModule?n:{default:n}}));Ie(Me);var Re=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r,i){for(var o=0,a=e.length;o<a;++o){var u=e[o](t,n,r,i);if(u)return u}}}));Ie(Re);var De=Ne((function(e,t){function n(e,t){-1===e.indexOf(t)&&e.push(t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(Array.isArray(t))for(var r=0,i=t.length;r<i;++r)n(e,t[r]);else n(e,t)}}));Ie(De);var Ae=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e instanceof Object&&!Array.isArray(e)}}));Ie(Ae);var Le=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.prefixMap,a=e.plugins;return function e(u){for(var l in u){var c=u[l];if((0,o.default)(c))u[l]=e(c);else if(Array.isArray(c)){for(var s=[],f=0,p=c.length;f<p;++f){var d=(0,r.default)(a,l,c[f],u,t);(0,i.default)(s,d||c[f])}s.length>0&&(u[l]=s)}else{var h=(0,r.default)(a,l,c,u,t);h&&(u[l]=h),u=(0,n.default)(t,l,u)}}return u}};var n=a(Me),r=a(Re),i=a(De),o=a(Ae);function a(e){return e&&e.__esModule?e:{default:e}}})),Fe=Ie(Le),Be=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&"text"===t)return["-webkit-text","text"]}})),Ue=Ie(Be),We=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"string"==typeof e&&n.test(e)};var n=/-webkit-|-moz-|-ms-/;e.exports=t.default}));Ie(We);var qe=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,r.default)(t)&&t.indexOf("calc(")>-1)return i.map((function(e){return t.replace(/calc\(/g,e+"calc(")}))};var n,r=(n=We)&&n.__esModule?n:{default:n},i=["-webkit-","-moz-",""]})),He=Ie(qe),Ve=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,r.default)(t)&&t.indexOf("cross-fade(")>-1)return i.map((function(e){return t.replace(/cross-fade\(/g,e+"cross-fade(")}))};var n,r=(n=We)&&n.__esModule?n:{default:n},i=["-webkit-",""]})),$e=Ie(Ve),Ke=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("cursor"===e&&r.hasOwnProperty(t))return n.map((function(e){return e+t}))};var n=["-webkit-","-moz-",""],r={"zoom-in":!0,"zoom-out":!0,grab:!0,grabbing:!0}})),Qe=Ie(Ke),Ge=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,r.default)(t)&&t.indexOf("filter(")>-1)return i.map((function(e){return t.replace(/filter\(/g,e+"filter(")}))};var n,r=(n=We)&&n.__esModule?n:{default:n},i=["-webkit-",""]})),Ye=Ie(Ge),Xe=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("display"===e&&n.hasOwnProperty(t))return n[t]};var n={flex:["-webkit-box","-moz-box","-ms-flexbox","-webkit-flex","flex"],"inline-flex":["-webkit-inline-box","-moz-inline-box","-ms-inline-flexbox","-webkit-inline-flex","inline-flex"]}})),Je=Ie(Xe),Ze=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,a){if(Object.prototype.hasOwnProperty.call(r,e)&&(a[r[e]]=n[t]||t),"flex"===e){if(Object.prototype.hasOwnProperty.call(i,t))return void(a.msFlex=i[t]);if(o.test(t))return void(a.msFlex=t+" 1 0%");var u=t.split(/\s/);switch(u.length){case 1:return void(a.msFlex="1 1 "+t);case 2:return void(o.test(u[1])?a.msFlex=u[0]+" "+u[1]+" 0%":a.msFlex=u[0]+" 1 "+u[1]);default:a.msFlex=t}}};var n={"space-around":"distribute","space-between":"justify","flex-start":"start","flex-end":"end"},r={alignContent:"msFlexLinePack",alignSelf:"msFlexItemAlign",alignItems:"msFlexAlign",justifyContent:"msFlexPack",order:"msFlexOrder",flexGrow:"msFlexPositive",flexShrink:"msFlexNegative",flexBasis:"msFlexPreferredSize"},i={auto:"1 1 auto",inherit:"inherit",initial:"0 1 auto",none:"0 0 auto",unset:"unset"},o=/^\d+(\.\d+)?$/})),et=Ie(Ze),tt=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,i){"flexDirection"===e&&"string"==typeof t&&(t.indexOf("column")>-1?i.WebkitBoxOrient="vertical":i.WebkitBoxOrient="horizontal",t.indexOf("reverse")>-1?i.WebkitBoxDirection="reverse":i.WebkitBoxDirection="normal"),r.hasOwnProperty(e)&&(i[r[e]]=n[t]||t)};var n={"space-around":"justify","space-between":"justify","flex-start":"start","flex-end":"end","wrap-reverse":"multiple",wrap:"multiple"},r={alignItems:"WebkitBoxAlign",justifyContent:"WebkitBoxPack",flexWrap:"WebkitBoxLines",flexGrow:"WebkitBoxFlex"}})),nt=Ie(tt),rt=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,r.default)(t)&&o.test(t))return i.map((function(e){return t.replace(o,(function(t){return e+t}))}))};var n,r=(n=We)&&n.__esModule?n:{default:n},i=["-webkit-","-moz-",""],o=/linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/gi})),it=Ie(rt),ot=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&u.return&&u.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};function r(e){return"number"==typeof e&&!isNaN(e)}t.default=function(e,t,n){if("display"===e&&t in o)return o[t];e in a&&(0,a[e])(t,n)};var i=["center","end","start","stretch"],o={"inline-grid":["-ms-inline-grid","inline-grid"],grid:["-ms-grid","grid"]},a={alignSelf:function(e,t){i.indexOf(e)>-1&&(t.msGridRowAlign=e)},gridColumn:function(e,t){if(r(e))t.msGridColumn=e;else{var i=e.split("/").map((function(e){return+e})),o=n(i,2),u=o[0],l=o[1];a.gridColumnStart(u,t),a.gridColumnEnd(l,t)}},gridColumnEnd:function(e,t){var n=t.msGridColumn;r(e)&&r(n)&&(t.msGridColumnSpan=e-n)},gridColumnStart:function(e,t){r(e)&&(t.msGridColumn=e)},gridRow:function(e,t){if(r(e))t.msGridRow=e;else{var i=e.split("/").map((function(e){return+e})),o=n(i,2),u=o[0],l=o[1];a.gridRowStart(u,t),a.gridRowEnd(l,t)}},gridRowEnd:function(e,t){var n=t.msGridRow;r(e)&&r(n)&&(t.msGridRowSpan=e-n)},gridRowStart:function(e,t){r(e)&&(t.msGridRow=e)},gridTemplateColumns:function(e,t){t.msGridColumns=e},gridTemplateRows:function(e,t){t.msGridRows=e},justifySelf:function(e,t){i.indexOf(e)>-1&&(t.msGridColumnAlign=e)}}})),at=Ie(ot),ut=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,r.default)(t)&&t.indexOf("image-set(")>-1)return i.map((function(e){return t.replace(/image-set\(/g,e+"image-set(")}))};var n,r=(n=We)&&n.__esModule?n:{default:n},i=["-webkit-",""]})),lt=Ie(ut),ct=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){if(Object.prototype.hasOwnProperty.call(n,e))for(var i=n[e],o=0,a=i.length;o<a;++o)r[i[o]]=t};var n={marginBlockStart:["WebkitMarginBefore"],marginBlockEnd:["WebkitMarginAfter"],marginInlineStart:["WebkitMarginStart","MozMarginStart"],marginInlineEnd:["WebkitMarginEnd","MozMarginEnd"],paddingBlockStart:["WebkitPaddingBefore"],paddingBlockEnd:["WebkitPaddingAfter"],paddingInlineStart:["WebkitPaddingStart","MozPaddingStart"],paddingInlineEnd:["WebkitPaddingEnd","MozPaddingEnd"],borderBlockStart:["WebkitBorderBefore"],borderBlockStartColor:["WebkitBorderBeforeColor"],borderBlockStartStyle:["WebkitBorderBeforeStyle"],borderBlockStartWidth:["WebkitBorderBeforeWidth"],borderBlockEnd:["WebkitBorderAfter"],borderBlockEndColor:["WebkitBorderAfterColor"],borderBlockEndStyle:["WebkitBorderAfterStyle"],borderBlockEndWidth:["WebkitBorderAfterWidth"],borderInlineStart:["WebkitBorderStart","MozBorderStart"],borderInlineStartColor:["WebkitBorderStartColor","MozBorderStartColor"],borderInlineStartStyle:["WebkitBorderStartStyle","MozBorderStartStyle"],borderInlineStartWidth:["WebkitBorderStartWidth","MozBorderStartWidth"],borderInlineEnd:["WebkitBorderEnd","MozBorderEnd"],borderInlineEndColor:["WebkitBorderEndColor","MozBorderEndColor"],borderInlineEndStyle:["WebkitBorderEndStyle","MozBorderEndStyle"],borderInlineEndWidth:["WebkitBorderEndWidth","MozBorderEndWidth"]}})),st=Ie(ct),ft=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("position"===e&&"sticky"===t)return["-webkit-sticky","sticky"]}})),pt=Ie(ft),dt=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(r.hasOwnProperty(e)&&i.hasOwnProperty(t))return n.map((function(e){return e+t}))};var n=["-webkit-","-moz-",""],r={maxHeight:!0,maxWidth:!0,width:!0,height:!0,columnWidth:!0,minWidth:!0,minHeight:!0},i={"min-content":!0,"max-content":!0,"fill-available":!0,"fit-content":!0,"contain-floats":!0}})),ht=Ie(dt),yt=/[A-Z]/g,mt=/^ms-/,vt={};function gt(e){return"-"+e.toLowerCase()}var bt,_t=(bt=Object.freeze({default:function(e){if(vt.hasOwnProperty(e))return vt[e];var t=e.replace(yt,gt);return vt[e]=mt.test(t)?"-"+t:t}}))&&bt.default||bt,wt=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,r.default)(e)};var n,r=(n=_t)&&n.__esModule?n:{default:n};e.exports=t.default}));Ie(wt);var St=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,o,l){if("string"==typeof t&&a.hasOwnProperty(e)){var c=function(e,t){if((0,r.default)(e))return e;for(var i=e.split(/,(?![^()]*(?:\([^()]*\))?\))/g),o=0,a=i.length;o<a;++o){var l=i[o],c=[l];for(var s in t){var f=(0,n.default)(s);if(l.indexOf(f)>-1&&"order"!==f)for(var p=t[s],d=0,h=p.length;d<h;++d)c.unshift(l.replace(f,u[p[d]]+f))}i[o]=c.join(",")}return i.join(",")}(t,l),s=c.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter((function(e){return!/-moz-|-ms-/.test(e)})).join(",");if(e.indexOf("Webkit")>-1)return s;var f=c.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter((function(e){return!/-webkit-|-ms-/.test(e)})).join(",");return e.indexOf("Moz")>-1?f:(o["Webkit"+(0,i.default)(e)]=s,o["Moz"+(0,i.default)(e)]=f,c)}};var n=o(wt),r=o(We),i=o(je);function o(e){return e&&e.__esModule?e:{default:e}}var a={transition:!0,transitionProperty:!0,WebkitTransition:!0,WebkitTransitionProperty:!0,MozTransition:!0,MozTransitionProperty:!0},u={Webkit:"-webkit-",Moz:"-moz-",ms:"-ms-"}})),xt=["Webkit"],kt=["Moz"],Et=["ms"],Tt=["Webkit","Moz"],Ot=["Webkit","ms"],Ct=["Webkit","Moz","ms"],Pt=Fe({plugins:[Ue,He,$e,Qe,Ye,Je,et,nt,it,at,lt,st,pt,ht,Ie(St)],prefixMap:{transform:Ot,transformOrigin:Ot,transformOriginX:Ot,transformOriginY:Ot,backfaceVisibility:xt,perspective:xt,perspectiveOrigin:xt,transformStyle:xt,transformOriginZ:xt,animation:xt,animationDelay:xt,animationDirection:xt,animationFillMode:xt,animationDuration:xt,animationIterationCount:xt,animationName:xt,animationPlayState:xt,animationTimingFunction:xt,appearance:Tt,userSelect:Ct,fontKerning:xt,textEmphasisPosition:xt,textEmphasis:xt,textEmphasisStyle:xt,textEmphasisColor:xt,boxDecorationBreak:xt,clipPath:xt,maskImage:xt,maskMode:xt,maskRepeat:xt,maskPosition:xt,maskClip:xt,maskOrigin:xt,maskSize:xt,maskComposite:xt,mask:xt,maskBorderSource:xt,maskBorderMode:xt,maskBorderSlice:xt,maskBorderWidth:xt,maskBorderOutset:xt,maskBorderRepeat:xt,maskBorder:xt,maskType:xt,textDecorationStyle:Tt,textDecorationSkip:Tt,textDecorationLine:Tt,textDecorationColor:Tt,filter:xt,fontFeatureSettings:Tt,breakAfter:Ct,breakBefore:Ct,breakInside:Ct,columnCount:Tt,columnFill:Tt,columnGap:Tt,columnRule:Tt,columnRuleColor:Tt,columnRuleStyle:Tt,columnRuleWidth:Tt,columns:Tt,columnSpan:Tt,columnWidth:Tt,writingMode:Ot,flex:Ot,flexBasis:xt,flexDirection:Ot,flexGrow:xt,flexFlow:Ot,flexShrink:xt,flexWrap:Ot,alignContent:xt,alignItems:xt,alignSelf:xt,justifyContent:xt,order:xt,transitionDelay:xt,transitionDuration:xt,transitionProperty:xt,transitionTimingFunction:xt,backdropFilter:xt,scrollSnapType:Ot,scrollSnapPointsX:Ot,scrollSnapPointsY:Ot,scrollSnapDestination:Ot,scrollSnapCoordinate:Ot,shapeImageThreshold:xt,shapeImageMargin:xt,shapeImageOutside:xt,hyphens:Ct,flowInto:Ot,flowFrom:Ot,regionFragment:Ot,textOrientation:xt,boxSizing:kt,textAlignLast:kt,tabSize:kt,wrapFlow:Et,wrapThrough:Et,wrapMargin:Et,touchAction:Et,textSizeAdjust:Ot,borderImage:xt,borderImageOutset:xt,borderImageRepeat:xt,borderImageSlice:xt,borderImageSource:xt,borderImageWidth:xt}}),zt=[function(e,t,n){return":"!==e[0]?null:n(t+e)},function(e,t,n){if("@"!==e[0])return null;var r=n(t);return["".concat(e,"{").concat(r.join(""),"}")]}],It=function e(t,n,r,i,o){for(var a=new ze,u=0;u<n.length;u++)a.addStyleType(n[u]);var l=new ze,c=[];a.forEach((function(n,a){r.some((function(u){var l=u(a,t,(function(t){return e(t,[n],r,i,o)}));if(null!=l)return Array.isArray(l)?c.push.apply(c,_e(l)):(console.warn("WARNING: Selector handlers should return an array of rules.Returning a string containing multiple rules is deprecated.",u),c.push("@media all {".concat(l,"}"))),!0}))||l.set(a,n,!0)}));var s=Mt(t,l,i,o,r);return s&&c.unshift(s),c},Nt=function(e,t,n){return"".concat((r=e,i=r.replace(we,Se),"m"===i[0]&&"s"===i[1]&&"-"===i[2]?"-".concat(i):i),":").concat(n(e,t),";");var r,i},jt=function(e,t){return e[t]=!0,e},Mt=function(e,t,n,r,i){!function(e,t,n){if(t)for(var r=Object.keys(t),i=0;i<r.length;i++){var o=r[i];e.has(o)&&e.set(o,t[o](e.get(o),n),!1)}}(t,n,i);var o=Object.keys(t.elements).reduce(jt,Object.create(null)),a=Pt(t.elements),u=Object.keys(a);if(u.length!==t.keyOrder.length)for(var l=0;l<u.length;l++)if(!o[u[l]]){var c;if((c="W"===u[l][0]?u[l][6].toLowerCase()+u[l].slice(7):"o"===u[l][1]?u[l][3].toLowerCase()+u[l].slice(4):u[l][2].toLowerCase()+u[l].slice(3))&&o[c]){var s=t.keyOrder.indexOf(c);t.keyOrder.splice(s,0,u[l])}else t.keyOrder.unshift(u[l])}for(var f=!1===r?Ee:Te,p=[],d=0;d<t.keyOrder.length;d++){var h=t.keyOrder[d],y=a[h];if(Array.isArray(y))for(var m=0;m<y.length;m++)p.push(Nt(h,y[m],f));else p.push(Nt(h,y,f))}return p.length?"".concat(e,"{").concat(p.join(""),"}"):""},Rt=null,Dt={fontFamily:function e(t){if(Array.isArray(t)){var n={};return t.forEach((function(t){n[e(t)]=!0})),Object.keys(n).join(",")}return"object"===ve(t)?(Ut(t.src,"@font-face",[t],!1),'"'.concat(t.fontFamily,'"')):t},animationName:function e(t,n){if(Array.isArray(t))return t.map((function(t){return e(t,n)})).join(",");if("object"===ve(t)){var r="keyframe_".concat((o=t,Oe(JSON.stringify(o)))),i="@keyframes ".concat(r,"{");return t instanceof ze?t.forEach((function(e,t){i+=It(t,[e],n,Dt,!1).join("")})):Object.keys(t).forEach((function(e){i+=It(e,[t[e]],n,Dt,!1).join("")})),Bt(r,[i+="}"]),r}return t;var o}},At={},Lt=[],Ft=!1,Bt=function(e,t){var n;if(!At[e]){if(!Ft){if("undefined"==typeof document)throw new Error("Cannot automatically buffer without a document");Ft=!0,me()(Vt)}(n=Lt).push.apply(n,_e(t)),At[e]=!0}},Ut=function(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[];if(!At[e]){var o=It(t,n,i,Dt,r);Bt(e,o)}},Wt=function(){Lt=[],At={},Ft=!1,Rt=null},qt=function(e){delete At[e]},Ht=function(){Ft=!1;var e=Lt;return Lt=[],e},Vt=function(){var e=Ht();e.length>0&&function(e){if(null==Rt&&null==(Rt=document.querySelector("style[data-aphrodite]"))){var t=document.head||document.getElementsByTagName("head")[0];(Rt=document.createElement("style")).type="text/css",Rt.setAttribute("data-aphrodite",""),t.appendChild(Rt)}var n=Rt.styleSheet||Rt.sheet;if(n.insertRule){var r=n.cssRules.length;e.forEach((function(e){try{n.insertRule(e,r),r+=1}catch(e){}}))}else Rt.innerText=(Rt.innerText||"")+e.join("")}(e)},$t=function(e){e.forEach((function(e){At[e]=!0}))},Kt=function e(t,n,r,i){for(var o=0;o<t.length;o+=1)if(t[o])if(Array.isArray(t[o]))i+=e(t[o],n,r,i);else{if(!("_definition"in(a=t[o])&&"_name"in a&&"_len"in a))throw new Error("Invalid Style Definition: Styles should be defined using the StyleSheet.create method.");n.push(t[o]._name),r.push(t[o]._definition),i+=t[o]._len}var a;return i},Qt=function(e,t,n){var r,i=[],o=[],a=Kt(t,i,o,0);return 0===i.length?"":(r=1===i.length?"_".concat(i[0]):"_".concat(Oe(i.join())).concat((a%36).toString(36)),Ut(r,".".concat(r),o,e,n),r)},Gt=function(e,t){return"".concat(t,"_").concat(Oe(e))},Yt=Oe,Xt={create:function(e){for(var t={},n=Object.keys(e),r=0;r<n.length;r+=1){var i=n[r],o=e[i],a=JSON.stringify(o);t[i]={_len:a.length,_name:Yt(a,i),_definition:o}}return t},rehydrate:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];$t(e)}},Jt="undefined"!=typeof window?null:{renderStatic:function(e){return Wt(),function(){if(Ft)throw new Error("Cannot buffer while already buffering");Ft=!0}(),{html:e(),css:{content:Ht().join(""),renderedClassNames:Object.keys(At)}}}},Zt=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:zt;return{StyleSheet:be({},Xt,{extend:function(r){var i=r.map((function(e){return e.selectorHandler})).filter((function(e){return e}));return e(t,n.concat(i))}}),StyleSheetServer:Jt,StyleSheetTestUtils:null,minify:function(e){Yt=e?Oe:Gt},css:function(){for(var e=arguments.length,r=new Array(e),i=0;i<e;i++)r[i]=arguments[i];return Qt(t,r,n)},flushToStyleTag:Vt,injectAndGetClassName:Qt,defaultSelectorHandlers:zt,reset:Wt,resetInjectedStyle:qt}}(!0),en=Zt.StyleSheet,tn=(Zt.StyleSheetServer,Zt.StyleSheetTestUtils,Zt.css);function nn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Zt.minify,Zt.flushToStyleTag,Zt.injectAndGetClassName,Zt.defaultSelectorHandlers,Zt.reset,Zt.resetInjectedStyle;var rn=r.memo((function(e){var t=e.type,n=e.value,i=e.html,o=e.markAsRead,a=e.id,u=tn("urgent"===t?un.urgent:un.default);return n?"noNotifications"===t?r.createElement("li",{className:tn(un.noNotifications),"data-notification-type":t},n):r.createElement("li",{className:u,"data-notification-type":t,onClick:function(){return o(a)}},n):r.createElement("li",{className:u,"data-notification-type":t,dangerouslySetInnerHTML:i,onClick:function(){return o(a)}})}));rn.defaultProps={type:"default",value:"",html:{},markAsRead:function(){},id:NaN},rn.propTypes={type:m().string,value:m().string,html:m().shape({__html:m().string}),markAsRead:m().func,id:m().oneOfType([m().string,m().number])};var on="@media screen and (max-width: 900px)",an={listStyle:"none",borderBottom:"1px solid black",padding:"10px 8px",fontSize:"20px"},un=en.create({default:nn({color:"blue",":hover":{cursor:"pointer"}},on,an),urgent:nn({color:"red",":hover":{cursor:"pointer"}},on,an),noNotifications:nn({color:"black"},on,an)});const ln=rn,cn=n.p+"d358bb35dc011695b84ce67f9214c2bf.png";var sn;function fn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function pn(e){var t=e.displayDrawer,n=e.listNotifications,i=e.handleDisplayDrawer,o=e.handleHideDrawer,a=e.markNotificationAsRead,u=e.setNotificationFilter,l=tn(t?yn.menuItemPNoShow:yn.menuItemPShow);return r.createElement(r.Fragment,null,r.createElement("div",{className:tn(yn.menuItem),id:"menuItem",onClick:i},r.createElement("p",{className:l},"Your notifications")),t&&r.createElement("div",{className:tn(yn.notifications),id:"Notifications"},r.createElement("button",{style:{background:"transparent",border:"none",position:"absolute",right:20},"aria-label":"close",onClick:o,id:"closeNotifications"},r.createElement("img",{src:cn,alt:"close-icon",className:tn(yn.notificationsButtonImage)})),r.createElement("p",{className:tn(yn.notificationsP)},"Here is the list of notifications"),r.createElement("button",{type:"button",className:tn(yn.filterButton),id:"buttonFilterUrgent",onClick:function(){u("URGENT")}},"❗❗"),r.createElement("button",{type:"button",className:tn(yn.filterButton),id:"buttonFilterDefault",onClick:function(){u("DEFAULT")}},"💠"),r.createElement("ul",{className:tn(yn.notificationsUL)},(!n||0===n.count())&&r.createElement(ln,{type:"noNotifications",value:"No new notifications for now"}),n&&n.valueSeq().map((function(e){var t=e.get("html");return t&&(t=t.toJS()),r.createElement(ln,{key:e.get("guid"),id:e.get("guid"),type:e.get("type"),value:e.get("value"),html:t,markAsRead:a})})))))}pn.defaultProps={displayDrawer:!1,listNotifications:null,handleDisplayDrawer:function(){},handleHideDrawer:function(){},markNotificationAsRead:function(){},fetchNotifications:function(){},setNotificationFilter:function(){}},pn.propTypes={displayDrawer:m().bool,listNotifications:m().object,handleDisplayDrawer:m().func,handleHideDrawer:m().func,markNotificationAsRead:m().func,setNotificationFilter:m().func};var dn="@media screen and (max-width: 900px)",hn={"0%":{border:"3px dashed deepSkyBlue"},"100%":{border:"3px dashed ".concat("#e01d3f")}},yn=en.create({menuItem:{float:"right",backgroundColor:"#fff8f8",":hover":{cursor:"pointer",animationName:[{from:{opacity:.5},to:{opacity:1}},{"0%":{transform:"translateY(0)"},"50%":{transform:"translateY(-5px)"},"75%":{transform:"translateY(5px)"},"100%":{transform:"translateY(0)"}}],animationDuration:"1s, 0.5s",animationIterationCount:3}},menuItemPNoShow:{marginRight:"8px",display:"none"},menuItemPShow:{marginRight:"8px"},notifications:fn({padding:"10px",marginBottom:"20px",animationName:[hn],animationDuration:"0.8s",animationIterationCount:1,animationFillMode:"forwards",":hover":{border:"3px dashed deepSkyBlue"}},dn,{float:"none",border:"none",listStyle:"none",padding:0,fontSize:"20px",":hover":{border:"none"},position:"absolute",background:"white",height:"110vh",width:"100vw",zIndex:10}),notificationsButtonImage:{width:"10px"},notificationsP:{margin:0,marginTop:"15px"},notificationsUL:fn({},dn,{padding:0}),filterButton:(sn={height:"30px",width:"50px",backgroundColor:"AliceBlue",border:"none",display:"inline-block"},fn(sn,"border","1px solid CornflowerBlue"),fn(sn,"boxShadow","1px 1px CornflowerBlue"),fn(sn,"margin","5px 5px 0px 5px"),sn)});const mn=pn;function vn(e){return vn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},vn(e)}function gn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function bn(e,t){return bn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},bn(e,t)}function _n(e,t){return!t||"object"!==vn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function wn(e){return wn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},wn(e)}var Sn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&bn(e,t)}(u,e);var t,n,i,o,a=(i=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=wn(i);if(o){var n=wn(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return _n(this,e)});function u(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),a.call(this,e)}return t=u,(n=[{key:"componentDidMount",value:function(){this.props.fetchNotifications()}},{key:"render",value:function(){return r.createElement(mn,this.props)}}])&&gn(t.prototype,n),u}(r.Component);Sn.defaultProps={displayDrawer:!1,listNotifications:null,handleDisplayDrawer:function(){},handleHideDrawer:function(){},markNotificationAsRead:function(){},fetchNotifications:function(){},setNotificationFilter:function(){}},Sn.propTypes={displayDrawer:m().bool,listNotifications:m().object,handleDisplayDrawer:m().func,handleHideDrawer:m().func,markNotificationAsRead:m().func,setNotificationFilter:m().func};const xn=J((function(e){return{listNotifications:pe(e)}}),{fetchNotifications:function(){return function(e){return e(le(!0)),fetch("./notifications.json").then((function(e){return e.json()})).then((function(t){return e(function(e){return{type:oe,data:e}}(t))})).catch((function(e){})).finally((function(){return e(le(!1))}))}},markNotificationAsRead:ue,setNotificationFilter:function(e){return{type:ie,filter:e}}})(Sn);var kn="LOGIN",En="LOGOUT",Tn="DISPLAY_NOTIFICATION_DRAWER",On="HIDE_NOTIFICATION_DRAWER",Cn="LOGIN_SUCCESS",Pn="LOGIN_FAILURE",zn=function(){return{type:En}},In={email:"",password:"",isLoggedIn:!1};const Nn=r.createContext({user:In,logOut:function(){}}),jn=n.p+"24bab5d633e36ca8d17edc63164cf934.jpg";function Mn(e){return Mn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Mn(e)}function Rn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Dn(e,t){return Dn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},Dn(e,t)}function An(e,t){return!t||"object"!==Mn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ln(e){return Ln=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},Ln(e)}var Fn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Dn(e,t)}(u,e);var t,n,i,o,a=(i=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Ln(i);if(o){var n=Ln(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return An(this,e)});function u(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),a.call(this,e)}return t=u,n=[{key:"render",value:function(){var e=this.props,t=e.user,n=e.logout;return r.createElement("div",{className:tn(Bn.header)},r.createElement("img",{src:jn,className:tn(Bn.headerImg)}),r.createElement("h1",null,"School dashboard"),t&&r.createElement("p",{id:"logoutSection",className:tn(Bn.logoutSection)},"Welcome ",r.createElement("b",null,"".concat(t.email," ")),r.createElement("span",{onClick:n,className:tn(Bn.logoutSectionSpan)},"(logout)")))}}],n&&Rn(t.prototype,n),u}(r.Component),Bn=en.create({header:{display:"flex",alignItems:"center",color:"#e01d3f",fontSize:"20px"},headerImg:{width:"200px"},logoutSection:{color:"black",position:"absolute",right:0,paddingRight:"20px",alignSelf:"flex-end"},logoutSectionSpan:{fontStyle:"italic",cursor:"pointer"}});Fn.contextType=Nn,Fn.defaultProps={user:null,logout:function(){}},Fn.propTypes={user:m().object,logout:m().func};const Un=J((function(e){return{user:e.ui.get("user")}}),{logout:zn})(Fn);function Wn(e){return Wn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Wn(e)}function qn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Hn(e,t){return Hn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},Hn(e,t)}function Vn(e,t){return!t||"object"!==Wn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function $n(e){return $n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},$n(e)}var Kn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Hn(e,t)}(u,e);var t,n,i,o,a=(i=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=$n(i);if(o){var n=$n(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Vn(this,e)});function u(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),a.call(this,e)}return t=u,(n=[{key:"render",value:function(){var e=this.props,t=e.children,n=e.title;return r.createElement("div",{className:tn(Xn.bodySection)},r.createElement("h2",{className:tn(Xn.bodySectionH2)},n),t)}}])&&qn(t.prototype,n),u}(r.Component);Kn.defaultProps={title:""},Kn.propTypes={title:m().string};var Qn,Gn,Yn,Xn=en.create({bodySection:(Qn={display:"flex",flexWrap:"wrap",width:"100%"},Gn="@media screen and (max-width: 900px)",Yn={boxSizing:"border-box",paddingLeft:"50px",paddingRight:"50px",paddingBottom:"20px"},Gn in Qn?Object.defineProperty(Qn,Gn,{value:Yn,enumerable:!0,configurable:!0,writable:!0}):Qn[Gn]=Yn,Qn),bodySectionH2:{width:"100%"}});const Jn=Kn;function Zn(e){return Zn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zn(e)}function er(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function tr(e,t){return tr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},tr(e,t)}function nr(e,t){return!t||"object"!==Zn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function rr(e){return rr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},rr(e)}var ir=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&tr(e,t)}(u,e);var t,n,i,o,a=(i=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=rr(i);if(o){var n=rr(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return nr(this,e)});function u(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),a.call(this,e)}return t=u,(n=[{key:"render",value:function(){return r.createElement("div",{className:tn(or.bodySectionWithMargin)},r.createElement(Jn,this.props))}}])&&er(t.prototype,n),u}(r.Component);ir.defaultProps={title:""},ir.propTypes={title:m().string};var or=en.create({bodySectionWithMargin:function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({marginBottom:"40px",width:"100%"},"@media screen and (max-width: 900px)",{marginBottom:"10px"})});const ar=ir;function ur(e){return ur="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ur(e)}function lr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function cr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function sr(e,t){return sr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},sr(e,t)}function fr(e,t){return!t||"object"!==ur(t)&&"function"!=typeof t?pr(e):t}function pr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function dr(e){return dr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},dr(e)}var hr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&sr(e,t)}(u,e);var t,n,i,o,a=(i=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=dr(i);if(o){var n=dr(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return fr(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=a.call(this,e)).state={email:"",password:"",enableSubmit:!1},t.handleLoginSubmit=t.handleLoginSubmit.bind(pr(t)),t.handleChangeEmail=t.handleChangeEmail.bind(pr(t)),t.handleChangePassword=t.handleChangePassword.bind(pr(t)),t}return t=u,n=[{key:"handleLoginSubmit",value:function(e){e.preventDefault();var t=this.state,n=t.email,r=t.password;this.props.logIn(n,r)}},{key:"handleChangeEmail",value:function(e){var t=e.target.value,n=this.state.password;""!==t&&""!==n?this.setState({enableSubmit:!0}):this.setState({enableSubmit:!1}),this.setState({email:e.target.value})}},{key:"handleChangePassword",value:function(e){var t=e.target.value;""!==this.state.email&&""!==t?this.setState({enableSubmit:!0}):this.setState({enableSubmit:!1}),this.setState({password:e.target.value})}},{key:"render",value:function(){return r.createElement("div",{className:tn(mr.login)},r.createElement("p",null,"Login to access the full dashboard"),r.createElement("form",{action:"",onSubmit:this.handleLoginSubmit},r.createElement("label",{htmlFor:"email"},"Email:"),r.createElement("input",{type:"email",id:"email",name:"email",className:tn(mr.loginInput),value:this.state.email,onChange:this.handleChangeEmail}),r.createElement("label",{htmlFor:"password"},"Password:"),r.createElement("input",{type:"password",id:"password",name:"password",className:tn(mr.loginInput),value:this.state.password,onChange:this.handleChangePassword}),r.createElement("input",{type:"submit",disabled:!this.state.enableSubmit})))}}],n&&cr(t.prototype,n),u}(r.Component),yr="@media screen and (max-width: 900px)",mr=en.create({login:lr({margin:"50px",flexGrow:1},yr,{marginTop:"10px",marginLeft:0,marginRight:0,marginBottom:0}),loginInput:lr({marginLeft:"10px",marginRight:"20px"},yr,{display:"block",marginLeft:0,marginTop:"10px",marginBottom:"10px"})});const vr=hr;var gr="SELECT_COURSE",br="UNSELECT_COURSE",_r="FETCH_COURSE_SUCCESS",wr={backgroundColor:"#f5f5f5ab"},Sr={backgroundColor:"#deb5b545"};function xr(e){var t,n,i=e.id,o=e.isHeader,a=e.textFirstCell,u=e.textSecondCell,l=e.isChecked,c=e.onChangeRow,s=tn(o?Er.CourseListTh:Er.CourseListTd,l&&Er.rowChecked);return!0===o?t=null===u?r.createElement("th",{colSpan:"2",className:tn(Er.CourseListThSpan2)},a):r.createElement(r.Fragment,null,r.createElement("th",{className:s},a),r.createElement("th",{className:s},u)):!1===o&&(t=r.createElement(r.Fragment,null,r.createElement("td",{className:s},"No course available yet"!==a&&r.createElement("input",{type:"checkbox",onClick:function(){c(i,!l)}}),a),r.createElement("td",{className:s},u))),n=o?Sr:wr,r.createElement("tr",{style:n},t)}xr.defaultProps={id:null,isHeader:!1,textSecondCell:null,isChecked:!1,onChangeRow:function(){}},xr.propTypes={id:m().oneOfType([m().string,m().number]),isHeader:m().bool,textFirstCell:m().string.isRequired,textSecondCell:m().oneOfType([m().string,m().number]),isChecked:m().bool,onChangeRow:m().func};var kr="rgb(170, 170, 170);",Er=en.create({CourseListTh:{borderTop:"1px solid ".concat(kr),borderBottom:"1px solid ".concat(kr),textAlign:"left",fontSize:"18px"},CourseListThSpan2:{textAlign:"center"},CourseListTd:{textAlign:"left"},rowChecked:{backgroundColor:"#e6e4e4"}});const Tr=xr;function Or(e){return Or="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Or(e)}function Cr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Pr(e,t){return Pr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},Pr(e,t)}function zr(e,t){return!t||"object"!==Or(t)&&"function"!=typeof t?Ir(e):t}function Ir(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Nr(e){return Nr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},Nr(e)}var jr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Pr(e,t)}(u,e);var t,n,i,o,a=(i=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Nr(i);if(o){var n=Nr(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return zr(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=a.call(this,e)).onChangeRow=t.onChangeRow.bind(Ir(t)),t}return t=u,(n=[{key:"componentDidMount",value:function(){this.props.fetchCourses()}},{key:"onChangeRow",value:function(e,t){t?this.props.selectCourse(e):this.props.unSelectCourse(e)}},{key:"render",value:function(){var e=this,t=this.props.listCourses;return r.createElement("table",{id:"CourseList",className:tn(Mr.list)},r.createElement("thead",null,r.createElement(Tr,{textFirstCell:"Available courses",isHeader:!0}),r.createElement(Tr,{textFirstCell:"Course name",textSecondCell:"Credit",isHeader:!0})),r.createElement("tbody",null,(!t||0===t.length)&&r.createElement(Tr,{textFirstCell:"No course available yet",isHeader:!1}),t&&t.map((function(t){return r.createElement(Tr,{key:t.id,id:t.id,textFirstCell:t.name,textSecondCell:t.credit,isHeader:!1,isChecked:t.isSelected,onChangeRow:e.onChangeRow})}))))}}])&&Cr(t.prototype,n),u}(r.Component);jr.defaultProps={listCourses:null,fetchCourses:function(){},selectCourse:function(){},unSelectCourse:function(){}},jr.propTypes={listCourses:m().oneOfType([m().array,m().object]),fetchCourses:m().func,selectCourse:m().func,unSelectCourse:m().func};var Mr=en.create({list:{border:"1px solid ".concat("rgb(170, 170, 170);"),borderCollapse:"collapse",width:"95%",margin:"40px auto 0 auto"}});const Rr=J((function(e){var t=function(e){var t=e.courses;return t?t.valueSeq():t}(e);return{listCourses:t}}),{fetchCourses:function(){return function(e){return fetch("./courses.json").then((function(e){return e.json()})).then((function(t){return e(function(e){return{type:_r,data:e}}(t))})).catch((function(e){}))}},selectCourse:function(e){return{type:gr,index:e}},unSelectCourse:function(e){return{type:br,index:e}}})(jr);function Dr(e){var t=e.user;return r.createElement("div",{className:"footer"},r.createElement("p",null,"Copyright ",(new Date).getFullYear()," - ","Holberton School"),t&&r.createElement("a",{href:"#"},"Contact us"))}Dr.defaultProps={user:null},Dr.propTypes={user:m().object};const Ar=J((function(e){return{user:e.ui.get("user")}}),null)(Dr);function Lr(e){return Lr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Lr(e)}function Fr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Br(e,t){return Br=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},Br(e,t)}function Ur(e,t){return!t||"object"!==Lr(t)&&"function"!=typeof t?Wr(e):t}function Wr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function qr(e){return qr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},qr(e)}document.body.style.margin=0;var Hr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Br(e,t)}(u,e);var t,n,i,o,a=(i=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=qr(i);if(o){var n=qr(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Ur(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=a.call(this,e)).handleKeyCombination=t.handleKeyCombination.bind(Wr(t)),t.state={user:In},t}return t=u,n=[{key:"handleKeyCombination",value:function(e){"h"===e.key&&e.ctrlKey&&(alert("Logging you out"),this.props.logout())}},{key:"componentDidMount",value:function(){document.addEventListener("keydown",this.handleKeyCombination)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("keydown",this.handleKeyCombination)}},{key:"render",value:function(){this.state.user;var e=this.props,t=e.isLoggedIn,n=e.displayDrawer,i=e.displayNotificationDrawer,o=e.hideNotificationDrawer,a=e.login;return e.logout,r.createElement(r.Fragment,null,r.createElement(xn,{displayDrawer:n,handleDisplayDrawer:i,handleHideDrawer:o}),r.createElement("div",{className:tn($r.container)},r.createElement("div",{className:tn($r.app)},r.createElement(Un,null)),r.createElement("div",{className:tn($r.appBody)},t?r.createElement(ar,{title:"Course list"},r.createElement(Rr,null)):r.createElement(ar,{title:"Log in to continue"},r.createElement(vr,{logIn:a}))),r.createElement(Jn,{title:"News from the School"},r.createElement("p",null,"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.")),r.createElement("div",{className:tn($r.footer)},r.createElement(Ar,null))))}}],n&&Fr(t.prototype,n),u}(r.Component);Hr.defaultProps={isLoggedIn:!1,displayDrawer:!1,displayNotificationDrawer:function(){},hideNotificationDrawer:function(){},login:function(){}},Hr.propTypes={isLoggedIn:m().bool,displayDrawer:m().bool,displayNotificationDrawer:m().func,hideNotificationDrawer:m().func,login:m().func};var Vr="#e01d3f",$r=en.create({container:{width:"calc(100% - 16px)",marginLeft:"8px",marginRight:"8px"},app:{borderBottom:"3px solid ".concat(Vr)},appBody:{display:"flex",justifyContent:"center"},footer:function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({borderTop:"3px solid ".concat(Vr),width:"100%",display:"flex",justifyContent:"center",textAlign:"center",position:"static",paddingBottom:"10px",bottom:0,fontStyle:"italic"},"@media screen and (max-width: 900px)",{position:"static"})});const Kr=J((function(e){return{isLoggedIn:e.ui.get("isUserLoggedIn"),displayDrawer:e.ui.get("isNotificationDrawerVisible")}}),{displayNotificationDrawer:function(){return{type:Tn}},hideNotificationDrawer:function(){return{type:On}},login:function(e,t){return function(n){return n(function(e,t){return{type:kn,user:{email:e,password:t}}}(e,t)),fetch("http://localhost:8564/login-success.json").then((function(e){return e.json()})).then((function(e){return n({type:Cn})})).catch((function(e){return n({type:Pn})}))}},logout:zn})(Hr);var Qr=32,Gr=31,Yr={};function Xr(e){e&&(e.value=!0)}function Jr(){}function Zr(e){return void 0===e.size&&(e.size=e.__iterate(ti)),e.size}function ei(e,t){if("number"!=typeof t){var n=t>>>0;if(""+n!==t||4294967295===n)return NaN;t=n}return t<0?Zr(e)+t:t}function ti(){return!0}function ni(e,t,n){return(0===e&&!ai(e)||void 0!==n&&e<=-n)&&(void 0===t||void 0!==n&&t>=n)}function ri(e,t){return oi(e,t,0)}function ii(e,t){return oi(e,t,t)}function oi(e,t,n){return void 0===e?n:ai(e)?t===1/0?t:0|Math.max(0,t+e):void 0===t||t===e?e:0|Math.min(t,e)}function ai(e){return e<0||0===e&&1/e==-1/0}var ui="@@__IMMUTABLE_ITERABLE__@@";function li(e){return Boolean(e&&e[ui])}var ci="@@__IMMUTABLE_KEYED__@@";function si(e){return Boolean(e&&e[ci])}var fi="@@__IMMUTABLE_INDEXED__@@";function pi(e){return Boolean(e&&e[fi])}function di(e){return si(e)||pi(e)}var hi=function(e){return li(e)?e:Di(e)},yi=function(e){function t(e){return si(e)?e:Ai(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(hi),mi=function(e){function t(e){return pi(e)?e:Li(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(hi),vi=function(e){function t(e){return li(e)&&!di(e)?e:Fi(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(hi);hi.Keyed=yi,hi.Indexed=mi,hi.Set=vi;var gi="@@__IMMUTABLE_SEQ__@@";function bi(e){return Boolean(e&&e[gi])}var _i="@@__IMMUTABLE_RECORD__@@";function wi(e){return Boolean(e&&e[_i])}function Si(e){return li(e)||wi(e)}var xi="@@__IMMUTABLE_ORDERED__@@";function ki(e){return Boolean(e&&e[xi])}var Ei="function"==typeof Symbol&&Symbol.iterator,Ti=Ei||"@@iterator",Oi=function(e){this.next=e};function Ci(e,t,n,r){var i=0===e?t:1===e?n:[t,n];return r?r.value=i:r={value:i,done:!1},r}function Pi(){return{value:void 0,done:!0}}function zi(e){return!!ji(e)}function Ii(e){return e&&"function"==typeof e.next}function Ni(e){var t=ji(e);return t&&t.call(e)}function ji(e){var t=e&&(Ei&&e[Ei]||e["@@iterator"]);if("function"==typeof t)return t}Oi.prototype.toString=function(){return"[Iterator]"},Oi.KEYS=0,Oi.VALUES=1,Oi.ENTRIES=2,Oi.prototype.inspect=Oi.prototype.toSource=function(){return this.toString()},Oi.prototype[Ti]=function(){return this};var Mi=Object.prototype.hasOwnProperty;function Ri(e){return!(!Array.isArray(e)&&"string"!=typeof e)||e&&"object"==typeof e&&Number.isInteger(e.length)&&e.length>=0&&(0===e.length?1===Object.keys(e).length:e.hasOwnProperty(e.length-1))}var Di=function(e){function t(e){return null==e?Hi():Si(e)?e.toSeq():function(e){var t=Ki(e);if(t)return t;if("object"==typeof e)return new Ui(e);throw new TypeError("Expected Array or collection object of values, or keyed object: "+e)}(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.toSeq=function(){return this},t.prototype.toString=function(){return this.__toString("Seq {","}")},t.prototype.cacheResult=function(){return!this._cache&&this.__iterateUncached&&(this._cache=this.entrySeq().toArray(),this.size=this._cache.length),this},t.prototype.__iterate=function(e,t){var n=this._cache;if(n){for(var r=n.length,i=0;i!==r;){var o=n[t?r-++i:i++];if(!1===e(o[1],o[0],this))break}return i}return this.__iterateUncached(e,t)},t.prototype.__iterator=function(e,t){var n=this._cache;if(n){var r=n.length,i=0;return new Oi((function(){if(i===r)return{value:void 0,done:!0};var o=n[t?r-++i:i++];return Ci(e,o[0],o[1])}))}return this.__iteratorUncached(e,t)},t}(hi),Ai=function(e){function t(e){return null==e?Hi().toKeyedSeq():li(e)?si(e)?e.toSeq():e.fromEntrySeq():wi(e)?e.toSeq():Vi(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.toKeyedSeq=function(){return this},t}(Di),Li=function(e){function t(e){return null==e?Hi():li(e)?si(e)?e.entrySeq():e.toIndexedSeq():wi(e)?e.toSeq().entrySeq():$i(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return t(arguments)},t.prototype.toIndexedSeq=function(){return this},t.prototype.toString=function(){return this.__toString("Seq [","]")},t}(Di),Fi=function(e){function t(e){return(li(e)&&!di(e)?e:Li(e)).toSetSeq()}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return t(arguments)},t.prototype.toSetSeq=function(){return this},t}(Di);Di.isSeq=bi,Di.Keyed=Ai,Di.Set=Fi,Di.Indexed=Li,Di.prototype[gi]=!0;var Bi=function(e){function t(e){this._array=e,this.size=e.length}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.get=function(e,t){return this.has(e)?this._array[ei(this,e)]:t},t.prototype.__iterate=function(e,t){for(var n=this._array,r=n.length,i=0;i!==r;){var o=t?r-++i:i++;if(!1===e(n[o],o,this))break}return i},t.prototype.__iterator=function(e,t){var n=this._array,r=n.length,i=0;return new Oi((function(){if(i===r)return{value:void 0,done:!0};var o=t?r-++i:i++;return Ci(e,o,n[o])}))},t}(Li),Ui=function(e){function t(e){var t=Object.keys(e);this._object=e,this._keys=t,this.size=t.length}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.get=function(e,t){return void 0===t||this.has(e)?this._object[e]:t},t.prototype.has=function(e){return Mi.call(this._object,e)},t.prototype.__iterate=function(e,t){for(var n=this._object,r=this._keys,i=r.length,o=0;o!==i;){var a=r[t?i-++o:o++];if(!1===e(n[a],a,this))break}return o},t.prototype.__iterator=function(e,t){var n=this._object,r=this._keys,i=r.length,o=0;return new Oi((function(){if(o===i)return{value:void 0,done:!0};var a=r[t?i-++o:o++];return Ci(e,a,n[a])}))},t}(Ai);Ui.prototype[xi]=!0;var Wi,qi=function(e){function t(e){this._collection=e,this.size=e.length||e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.__iterateUncached=function(e,t){if(t)return this.cacheResult().__iterate(e,t);var n=Ni(this._collection),r=0;if(Ii(n))for(var i;!(i=n.next()).done&&!1!==e(i.value,r++,this););return r},t.prototype.__iteratorUncached=function(e,t){if(t)return this.cacheResult().__iterator(e,t);var n=Ni(this._collection);if(!Ii(n))return new Oi(Pi);var r=0;return new Oi((function(){var t=n.next();return t.done?t:Ci(e,r++,t.value)}))},t}(Li);function Hi(){return Wi||(Wi=new Bi([]))}function Vi(e){var t=Array.isArray(e)?new Bi(e):zi(e)?new qi(e):void 0;if(t)return t.fromEntrySeq();if("object"==typeof e)return new Ui(e);throw new TypeError("Expected Array or collection object of [k, v] entries, or keyed object: "+e)}function $i(e){var t=Ki(e);if(t)return t;throw new TypeError("Expected Array or collection object of values: "+e)}function Ki(e){return Ri(e)?new Bi(e):zi(e)?new qi(e):void 0}var Qi="@@__IMMUTABLE_MAP__@@";function Gi(e){return Boolean(e&&e[Qi])}function Yi(e){return Gi(e)&&ki(e)}function Xi(e){return Boolean(e&&"function"==typeof e.equals&&"function"==typeof e.hashCode)}function Ji(e,t){if(e===t||e!=e&&t!=t)return!0;if(!e||!t)return!1;if("function"==typeof e.valueOf&&"function"==typeof t.valueOf){if((e=e.valueOf())===(t=t.valueOf())||e!=e&&t!=t)return!0;if(!e||!t)return!1}return!!(Xi(e)&&Xi(t)&&e.equals(t))}var Zi="function"==typeof Math.imul&&-2===Math.imul(4294967295,2)?Math.imul:function(e,t){var n=65535&(e|=0),r=65535&(t|=0);return n*r+((e>>>16)*r+n*(t>>>16)<<16>>>0)|0};function eo(e){return e>>>1&1073741824|3221225471&e}var to=Object.prototype.valueOf;function no(e){switch(typeof e){case"boolean":return e?1108378657:1108378656;case"number":return function(e){if(e!=e||e===1/0)return 0;var t=0|e;for(t!==e&&(t^=4294967295*e);e>4294967295;)t^=e/=4294967295;return eo(t)}(e);case"string":return e.length>so?(void 0===(n=ho[t=e])&&(n=ro(t),po===fo&&(po=0,ho={}),po++,ho[t]=n),n):ro(e);case"object":case"function":return null===e?1108378658:"function"==typeof e.hashCode?eo(e.hashCode(e)):(e.valueOf!==to&&"function"==typeof e.valueOf&&(e=e.valueOf(e)),function(e){var t;if(uo&&void 0!==(t=io.get(e)))return t;if(void 0!==(t=e[co]))return t;if(!ao){if(void 0!==(t=e.propertyIsEnumerable&&e.propertyIsEnumerable[co]))return t;if(void 0!==(t=function(e){if(e&&e.nodeType>0)switch(e.nodeType){case 1:return e.uniqueID;case 9:return e.documentElement&&e.documentElement.uniqueID}}(e)))return t}if(t=++lo,1073741824&lo&&(lo=0),uo)io.set(e,t);else{if(void 0!==oo&&!1===oo(e))throw new Error("Non-extensible objects are not allowed as keys.");if(ao)Object.defineProperty(e,co,{enumerable:!1,configurable:!1,writable:!1,value:t});else if(void 0!==e.propertyIsEnumerable&&e.propertyIsEnumerable===e.constructor.prototype.propertyIsEnumerable)e.propertyIsEnumerable=function(){return this.constructor.prototype.propertyIsEnumerable.apply(this,arguments)},e.propertyIsEnumerable[co]=t;else{if(void 0===e.nodeType)throw new Error("Unable to set a non-enumerable property on object.");e[co]=t}}return t}(e));case"undefined":return 1108378659;default:if("function"==typeof e.toString)return ro(e.toString());throw new Error("Value type "+typeof e+" cannot be hashed.")}var t,n}function ro(e){for(var t=0,n=0;n<e.length;n++)t=31*t+e.charCodeAt(n)|0;return eo(t)}var io,oo=Object.isExtensible,ao=function(){try{return Object.defineProperty({},"@",{}),!0}catch(e){return!1}}(),uo="function"==typeof WeakMap;uo&&(io=new WeakMap);var lo=0,co="__immutablehash__";"function"==typeof Symbol&&(co=Symbol(co));var so=16,fo=255,po=0,ho={},yo=function(e){function t(e,t){this._iter=e,this._useKeys=t,this.size=e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.get=function(e,t){return this._iter.get(e,t)},t.prototype.has=function(e){return this._iter.has(e)},t.prototype.valueSeq=function(){return this._iter.valueSeq()},t.prototype.reverse=function(){var e=this,t=wo(this,!0);return this._useKeys||(t.valueSeq=function(){return e._iter.toSeq().reverse()}),t},t.prototype.map=function(e,t){var n=this,r=_o(this,e,t);return this._useKeys||(r.valueSeq=function(){return n._iter.toSeq().map(e,t)}),r},t.prototype.__iterate=function(e,t){var n=this;return this._iter.__iterate((function(t,r){return e(t,r,n)}),t)},t.prototype.__iterator=function(e,t){return this._iter.__iterator(e,t)},t}(Ai);yo.prototype[xi]=!0;var mo=function(e){function t(e){this._iter=e,this.size=e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.includes=function(e){return this._iter.includes(e)},t.prototype.__iterate=function(e,t){var n=this,r=0;return t&&Zr(this),this._iter.__iterate((function(i){return e(i,t?n.size-++r:r++,n)}),t)},t.prototype.__iterator=function(e,t){var n=this,r=this._iter.__iterator(1,t),i=0;return t&&Zr(this),new Oi((function(){var o=r.next();return o.done?o:Ci(e,t?n.size-++i:i++,o.value,o)}))},t}(Li),vo=function(e){function t(e){this._iter=e,this.size=e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.has=function(e){return this._iter.includes(e)},t.prototype.__iterate=function(e,t){var n=this;return this._iter.__iterate((function(t){return e(t,t,n)}),t)},t.prototype.__iterator=function(e,t){var n=this._iter.__iterator(1,t);return new Oi((function(){var t=n.next();return t.done?t:Ci(e,t.value,t.value,t)}))},t}(Fi),go=function(e){function t(e){this._iter=e,this.size=e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.entrySeq=function(){return this._iter.toSeq()},t.prototype.__iterate=function(e,t){var n=this;return this._iter.__iterate((function(t){if(t){No(t);var r=li(t);return e(r?t.get(1):t[1],r?t.get(0):t[0],n)}}),t)},t.prototype.__iterator=function(e,t){var n=this._iter.__iterator(1,t);return new Oi((function(){for(;;){var t=n.next();if(t.done)return t;var r=t.value;if(r){No(r);var i=li(r);return Ci(e,i?r.get(0):r[0],i?r.get(1):r[1],t)}}}))},t}(Ai);function bo(e){var t=Mo(e);return t._iter=e,t.size=e.size,t.flip=function(){return e},t.reverse=function(){var t=e.reverse.apply(this);return t.flip=function(){return e.reverse()},t},t.has=function(t){return e.includes(t)},t.includes=function(t){return e.has(t)},t.cacheResult=Ro,t.__iterateUncached=function(t,n){var r=this;return e.__iterate((function(e,n){return!1!==t(n,e,r)}),n)},t.__iteratorUncached=function(t,n){if(2===t){var r=e.__iterator(t,n);return new Oi((function(){var e=r.next();if(!e.done){var t=e.value[0];e.value[0]=e.value[1],e.value[1]=t}return e}))}return e.__iterator(1===t?0:1,n)},t}function _o(e,t,n){var r=Mo(e);return r.size=e.size,r.has=function(t){return e.has(t)},r.get=function(r,i){var o=e.get(r,Yr);return o===Yr?i:t.call(n,o,r,e)},r.__iterateUncached=function(r,i){var o=this;return e.__iterate((function(e,i,a){return!1!==r(t.call(n,e,i,a),i,o)}),i)},r.__iteratorUncached=function(r,i){var o=e.__iterator(2,i);return new Oi((function(){var i=o.next();if(i.done)return i;var a=i.value,u=a[0];return Ci(r,u,t.call(n,a[1],u,e),i)}))},r}function wo(e,t){var n=this,r=Mo(e);return r._iter=e,r.size=e.size,r.reverse=function(){return e},e.flip&&(r.flip=function(){var t=bo(e);return t.reverse=function(){return e.flip()},t}),r.get=function(n,r){return e.get(t?n:-1-n,r)},r.has=function(n){return e.has(t?n:-1-n)},r.includes=function(t){return e.includes(t)},r.cacheResult=Ro,r.__iterate=function(n,r){var i=this,o=0;return r&&Zr(e),e.__iterate((function(e,a){return n(e,t?a:r?i.size-++o:o++,i)}),!r)},r.__iterator=function(r,i){var o=0;i&&Zr(e);var a=e.__iterator(2,!i);return new Oi((function(){var e=a.next();if(e.done)return e;var u=e.value;return Ci(r,t?u[0]:i?n.size-++o:o++,u[1],e)}))},r}function So(e,t,n,r){var i=Mo(e);return r&&(i.has=function(r){var i=e.get(r,Yr);return i!==Yr&&!!t.call(n,i,r,e)},i.get=function(r,i){var o=e.get(r,Yr);return o!==Yr&&t.call(n,o,r,e)?o:i}),i.__iterateUncached=function(i,o){var a=this,u=0;return e.__iterate((function(e,o,l){if(t.call(n,e,o,l))return u++,i(e,r?o:u-1,a)}),o),u},i.__iteratorUncached=function(i,o){var a=e.__iterator(2,o),u=0;return new Oi((function(){for(;;){var o=a.next();if(o.done)return o;var l=o.value,c=l[0],s=l[1];if(t.call(n,s,c,e))return Ci(i,r?c:u++,s,o)}}))},i}function xo(e,t,n,r){var i=e.size;if(ni(t,n,i))return e;var o=ri(t,i),a=ii(n,i);if(o!=o||a!=a)return xo(e.toSeq().cacheResult(),t,n,r);var u,l=a-o;l==l&&(u=l<0?0:l);var c=Mo(e);return c.size=0===u?u:e.size&&u||void 0,!r&&bi(e)&&u>=0&&(c.get=function(t,n){return(t=ei(this,t))>=0&&t<u?e.get(t+o,n):n}),c.__iterateUncached=function(t,n){var i=this;if(0===u)return 0;if(n)return this.cacheResult().__iterate(t,n);var a=0,l=!0,c=0;return e.__iterate((function(e,n){if(!l||!(l=a++<o))return c++,!1!==t(e,r?n:c-1,i)&&c!==u})),c},c.__iteratorUncached=function(t,n){if(0!==u&&n)return this.cacheResult().__iterator(t,n);if(0===u)return new Oi(Pi);var i=e.__iterator(t,n),a=0,l=0;return new Oi((function(){for(;a++<o;)i.next();if(++l>u)return{value:void 0,done:!0};var e=i.next();return r||1===t||e.done?e:Ci(t,l-1,0===t?void 0:e.value[1],e)}))},c}function ko(e,t,n,r){var i=Mo(e);return i.__iterateUncached=function(i,o){var a=this;if(o)return this.cacheResult().__iterate(i,o);var u=!0,l=0;return e.__iterate((function(e,o,c){if(!u||!(u=t.call(n,e,o,c)))return l++,i(e,r?o:l-1,a)})),l},i.__iteratorUncached=function(i,o){var a=this;if(o)return this.cacheResult().__iterator(i,o);var u=e.__iterator(2,o),l=!0,c=0;return new Oi((function(){var e,o,s;do{if((e=u.next()).done)return r||1===i?e:Ci(i,c++,0===i?void 0:e.value[1],e);var f=e.value;o=f[0],s=f[1],l&&(l=t.call(n,s,o,a))}while(l);return 2===i?e:Ci(i,o,s,e)}))},i}function Eo(e,t){var n=si(e),r=[e].concat(t).map((function(e){return li(e)?n&&(e=yi(e)):e=n?Vi(e):$i(Array.isArray(e)?e:[e]),e})).filter((function(e){return 0!==e.size}));if(0===r.length)return e;if(1===r.length){var i=r[0];if(i===e||n&&si(i)||pi(e)&&pi(i))return i}var o=new Bi(r);return n?o=o.toKeyedSeq():pi(e)||(o=o.toSetSeq()),(o=o.flatten(!0)).size=r.reduce((function(e,t){if(void 0!==e){var n=t.size;if(void 0!==n)return e+n}}),0),o}function To(e,t,n){var r=Mo(e);return r.__iterateUncached=function(i,o){if(o)return this.cacheResult().__iterate(i,o);var a=0,u=!1;return function e(l,c){l.__iterate((function(o,l){return(!t||c<t)&&li(o)?e(o,c+1):(a++,!1===i(o,n?l:a-1,r)&&(u=!0)),!u}),o)}(e,0),a},r.__iteratorUncached=function(r,i){if(i)return this.cacheResult().__iterator(r,i);var o=e.__iterator(r,i),a=[],u=0;return new Oi((function(){for(;o;){var e=o.next();if(!1===e.done){var l=e.value;if(2===r&&(l=l[1]),t&&!(a.length<t)||!li(l))return n?e:Ci(r,u++,l,e);a.push(o),o=l.__iterator(r,i)}else o=a.pop()}return{value:void 0,done:!0}}))},r}function Oo(e,t,n){t||(t=Do);var r=si(e),i=0,o=e.toSeq().map((function(t,r){return[r,t,i++,n?n(t,r,e):t]})).valueSeq().toArray();return o.sort((function(e,n){return t(e[3],n[3])||e[2]-n[2]})).forEach(r?function(e,t){o[t].length=2}:function(e,t){o[t]=e[1]}),r?Ai(o):pi(e)?Li(o):Fi(o)}function Co(e,t,n){if(t||(t=Do),n){var r=e.toSeq().map((function(t,r){return[t,n(t,r,e)]})).reduce((function(e,n){return Po(t,e[1],n[1])?n:e}));return r&&r[0]}return e.reduce((function(e,n){return Po(t,e,n)?n:e}))}function Po(e,t,n){var r=e(n,t);return 0===r&&n!==t&&(null==n||n!=n)||r>0}function zo(e,t,n,r){var i=Mo(e),o=new Bi(n).map((function(e){return e.size}));return i.size=r?o.max():o.min(),i.__iterate=function(e,t){for(var n,r=this.__iterator(1,t),i=0;!(n=r.next()).done&&!1!==e(n.value,i++,this););return i},i.__iteratorUncached=function(e,i){var o=n.map((function(e){return e=hi(e),Ni(i?e.reverse():e)})),a=0,u=!1;return new Oi((function(){var n;return u||(n=o.map((function(e){return e.next()})),u=r?n.every((function(e){return e.done})):n.some((function(e){return e.done}))),u?{value:void 0,done:!0}:Ci(e,a++,t.apply(null,n.map((function(e){return e.value}))))}))},i}function Io(e,t){return e===t?e:bi(e)?t:e.constructor(t)}function No(e){if(e!==Object(e))throw new TypeError("Expected [K, V] tuple: "+e)}function jo(e){return si(e)?yi:pi(e)?mi:vi}function Mo(e){return Object.create((si(e)?Ai:pi(e)?Li:Fi).prototype)}function Ro(){return this._iter.cacheResult?(this._iter.cacheResult(),this.size=this._iter.size,this):Di.prototype.cacheResult.call(this)}function Do(e,t){return void 0===e&&void 0===t?0:void 0===e?1:void 0===t?-1:e>t?1:e<t?-1:0}function Ao(e,t){t=t||0;for(var n=Math.max(0,e.length-t),r=new Array(n),i=0;i<n;i++)r[i]=e[i+t];return r}function Lo(e,t){if(!e)throw new Error(t)}function Fo(e){Lo(e!==1/0,"Cannot perform this action with an infinite size.")}function Bo(e){if(Ri(e)&&"string"!=typeof e)return e;if(ki(e))return e.toArray();throw new TypeError("Invalid keyPath: expected Ordered Collection or Array: "+e)}function Uo(e){return e&&("function"!=typeof e.constructor||"Object"===e.constructor.name)}function Wo(e){return"object"==typeof e&&(Si(e)||Array.isArray(e)||Uo(e))}function qo(e){try{return"string"==typeof e?JSON.stringify(e):String(e)}catch(t){return JSON.stringify(e)}}function Ho(e,t,n){return Si(e)?e.get(t,n):function(e,t){return Si(e)?e.has(t):Wo(e)&&Mi.call(e,t)}(e,t)?"function"==typeof e.get?e.get(t):e[t]:n}function Vo(e){if(Array.isArray(e))return Ao(e);var t={};for(var n in e)Mi.call(e,n)&&(t[n]=e[n]);return t}function $o(e,t,n,r){r||(r=n,n=void 0);var i=Ko(Si(e),e,Bo(t),0,n,r);return i===Yr?n:i}function Ko(e,t,n,r,i,o){var a=t===Yr;if(r===n.length){var u=a?i:t,l=o(u);return l===u?t:l}if(!a&&!Wo(t))throw new TypeError("Cannot update within non-data-structure value in path ["+n.slice(0,r).map(qo)+"]: "+t);var c=n[r],s=a?Yr:Ho(t,c,Yr),f=Ko(s===Yr?e:Si(s),s,n,r+1,i,o);return f===s?t:f===Yr?function(e,t){if(!Wo(e))throw new TypeError("Cannot update non-data-structure value: "+e);if(Si(e)){if(!e.remove)throw new TypeError("Cannot update immutable value without .remove() method: "+e);return e.remove(t)}if(!Mi.call(e,t))return e;var n=Vo(e);return Array.isArray(n)?n.splice(t,1):delete n[t],n}(t,c):function(e,t,n){if(!Wo(e))throw new TypeError("Cannot update non-data-structure value: "+e);if(Si(e)){if(!e.set)throw new TypeError("Cannot update immutable value without .set() method: "+e);return e.set(t,n)}if(Mi.call(e,t)&&n===e[t])return e;var r=Vo(e);return r[t]=n,r}(a?e?ka():{}:t,c,f)}function Qo(e,t){return function(e,t,n){return $o(e,t,Yr,(function(){return n}))}(this,e,t)}function Go(e){return function(e,t){return $o(e,t,(function(){return Yr}))}(this,e)}function Yo(e,t,n,r){return $o(e,[t],n,r)}function Xo(e,t,n){return 1===arguments.length?e(this):Yo(this,e,t,n)}function Jo(e,t,n){return $o(this,e,t,n)}function Zo(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return ta(this,e)}function ea(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];if("function"!=typeof e)throw new TypeError("Invalid merger function: "+e);return ta(this,t,e)}function ta(e,t,n){for(var r=[],i=0;i<t.length;i++){var o=yi(t[i]);0!==o.size&&r.push(o)}return 0===r.length?e:0!==e.toSeq().size||e.__ownerID||1!==r.length?e.withMutations((function(e){for(var t=n?function(t,r){Yo(e,r,Yr,(function(e){return e===Yr?t:n(e,t,r)}))}:function(t,n){e.set(n,t)},i=0;i<r.length;i++)r[i].forEach(t)})):e.constructor(r[0])}function na(e,t,n){return ra(e,t,function(e){return function t(n,r,i){return Wo(n)&&Wo(r)?ra(n,[r],t):e?e(n,r,i):r}}(n))}function ra(e,t,n){if(!Wo(e))throw new TypeError("Cannot merge into non-data-structure value: "+e);if(Si(e))return"function"==typeof n&&e.mergeWith?e.mergeWith.apply(e,[n].concat(t)):e.merge?e.merge.apply(e,t):e.concat.apply(e,t);for(var r=Array.isArray(e),i=e,o=r?mi:yi,a=r?function(t){i===e&&(i=Vo(i)),i.push(t)}:function(t,r){var o=Mi.call(i,r),a=o&&n?n(i[r],t,r):t;o&&a===i[r]||(i===e&&(i=Vo(i)),i[r]=a)},u=0;u<t.length;u++)o(t[u]).forEach(a);return i}function ia(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return na(this,e)}function oa(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];return na(this,t,e)}function aa(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];return $o(this,e,ka(),(function(e){return ra(e,t)}))}function ua(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];return $o(this,e,ka(),(function(e){return na(e,t)}))}function la(e){var t=this.asMutable();return e(t),t.wasAltered()?t.__ensureOwner(this.__ownerID):this}function ca(){return this.__ownerID?this:this.__ensureOwner(new Jr)}function sa(){return this.__ensureOwner()}function fa(){return this.__altered}mo.prototype.cacheResult=yo.prototype.cacheResult=vo.prototype.cacheResult=go.prototype.cacheResult=Ro;var pa=function(e){function t(t){return null==t?ka():Gi(t)&&!ki(t)?t:ka().withMutations((function(n){var r=e(t);Fo(r.size),r.forEach((function(e,t){return n.set(t,e)}))}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return ka().withMutations((function(t){for(var n=0;n<e.length;n+=2){if(n+1>=e.length)throw new Error("Missing value for key: "+e[n]);t.set(e[n],e[n+1])}}))},t.prototype.toString=function(){return this.__toString("Map {","}")},t.prototype.get=function(e,t){return this._root?this._root.get(0,void 0,e,t):t},t.prototype.set=function(e,t){return Ea(this,e,t)},t.prototype.remove=function(e){return Ea(this,e,Yr)},t.prototype.deleteAll=function(e){var t=hi(e);return 0===t.size?this:this.withMutations((function(e){t.forEach((function(t){return e.remove(t)}))}))},t.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._root=null,this.__hash=void 0,this.__altered=!0,this):ka()},t.prototype.sort=function(e){return Ya(Oo(this,e))},t.prototype.sortBy=function(e,t){return Ya(Oo(this,t,e))},t.prototype.map=function(e,t){return this.withMutations((function(n){n.forEach((function(r,i){n.set(i,e.call(t,r,i,n))}))}))},t.prototype.__iterator=function(e,t){return new _a(this,e,t)},t.prototype.__iterate=function(e,t){var n=this,r=0;return this._root&&this._root.iterate((function(t){return r++,e(t[1],t[0],n)}),t),r},t.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?xa(this.size,this._root,e,this.__hash):0===this.size?ka():(this.__ownerID=e,this.__altered=!1,this)},t}(yi);pa.isMap=Gi;var da=pa.prototype;da[Qi]=!0,da.delete=da.remove,da.removeAll=da.deleteAll,da.setIn=Qo,da.removeIn=da.deleteIn=Go,da.update=Xo,da.updateIn=Jo,da.merge=da.concat=Zo,da.mergeWith=ea,da.mergeDeep=ia,da.mergeDeepWith=oa,da.mergeIn=aa,da.mergeDeepIn=ua,da.withMutations=la,da.wasAltered=fa,da.asImmutable=sa,da["@@transducer/init"]=da.asMutable=ca,da["@@transducer/step"]=function(e,t){return e.set(t[0],t[1])},da["@@transducer/result"]=function(e){return e.asImmutable()};var ha=function(e,t){this.ownerID=e,this.entries=t};ha.prototype.get=function(e,t,n,r){for(var i=this.entries,o=0,a=i.length;o<a;o++)if(Ji(n,i[o][0]))return i[o][1];return r},ha.prototype.update=function(e,t,n,r,i,o,a){for(var u=i===Yr,l=this.entries,c=0,s=l.length;c<s&&!Ji(r,l[c][0]);c++);var f=c<s;if(f?l[c][1]===i:u)return this;if(Xr(a),(u||!f)&&Xr(o),!u||1!==l.length){if(!f&&!u&&l.length>=Ia)return function(e,t,n,r){e||(e=new Jr);for(var i=new ga(e,no(n),[n,r]),o=0;o<t.length;o++){var a=t[o];i=i.update(e,0,void 0,a[0],a[1])}return i}(e,l,r,i);var p=e&&e===this.ownerID,d=p?l:Ao(l);return f?u?c===s-1?d.pop():d[c]=d.pop():d[c]=[r,i]:d.push([r,i]),p?(this.entries=d,this):new ha(e,d)}};var ya=function(e,t,n){this.ownerID=e,this.bitmap=t,this.nodes=n};ya.prototype.get=function(e,t,n,r){void 0===t&&(t=no(n));var i=1<<((0===e?t:t>>>e)&Gr),o=this.bitmap;return 0==(o&i)?r:this.nodes[Pa(o&i-1)].get(e+5,t,n,r)},ya.prototype.update=function(e,t,n,r,i,o,a){void 0===n&&(n=no(r));var u=(0===t?n:n>>>t)&Gr,l=1<<u,c=this.bitmap,s=0!=(c&l);if(!s&&i===Yr)return this;var f=Pa(c&l-1),p=this.nodes,d=s?p[f]:void 0,h=Ta(d,e,t+5,n,r,i,o,a);if(h===d)return this;if(!s&&h&&p.length>=Na)return function(e,t,n,r,i){for(var o=0,a=new Array(Qr),u=0;0!==n;u++,n>>>=1)a[u]=1&n?t[o++]:void 0;return a[r]=i,new ma(e,o+1,a)}(e,p,c,u,h);if(s&&!h&&2===p.length&&Oa(p[1^f]))return p[1^f];if(s&&h&&1===p.length&&Oa(h))return h;var y=e&&e===this.ownerID,m=s?h?c:c^l:c|l,v=s?h?za(p,f,h,y):function(e,t,n){var r=e.length-1;if(n&&t===r)return e.pop(),e;for(var i=new Array(r),o=0,a=0;a<r;a++)a===t&&(o=1),i[a]=e[a+o];return i}(p,f,y):function(e,t,n,r){var i=e.length+1;if(r&&t+1===i)return e[t]=n,e;for(var o=new Array(i),a=0,u=0;u<i;u++)u===t?(o[u]=n,a=-1):o[u]=e[u+a];return o}(p,f,h,y);return y?(this.bitmap=m,this.nodes=v,this):new ya(e,m,v)};var ma=function(e,t,n){this.ownerID=e,this.count=t,this.nodes=n};ma.prototype.get=function(e,t,n,r){void 0===t&&(t=no(n));var i=(0===e?t:t>>>e)&Gr,o=this.nodes[i];return o?o.get(e+5,t,n,r):r},ma.prototype.update=function(e,t,n,r,i,o,a){void 0===n&&(n=no(r));var u=(0===t?n:n>>>t)&Gr,l=i===Yr,c=this.nodes,s=c[u];if(l&&!s)return this;var f=Ta(s,e,t+5,n,r,i,o,a);if(f===s)return this;var p=this.count;if(s){if(!f&&--p<ja)return function(e,t,n,r){for(var i=0,o=0,a=new Array(n),u=0,l=1,c=t.length;u<c;u++,l<<=1){var s=t[u];void 0!==s&&u!==r&&(i|=l,a[o++]=s)}return new ya(e,i,a)}(e,c,p,u)}else p++;var d=e&&e===this.ownerID,h=za(c,u,f,d);return d?(this.count=p,this.nodes=h,this):new ma(e,p,h)};var va=function(e,t,n){this.ownerID=e,this.keyHash=t,this.entries=n};va.prototype.get=function(e,t,n,r){for(var i=this.entries,o=0,a=i.length;o<a;o++)if(Ji(n,i[o][0]))return i[o][1];return r},va.prototype.update=function(e,t,n,r,i,o,a){void 0===n&&(n=no(r));var u=i===Yr;if(n!==this.keyHash)return u?this:(Xr(a),Xr(o),Ca(this,e,t,n,[r,i]));for(var l=this.entries,c=0,s=l.length;c<s&&!Ji(r,l[c][0]);c++);var f=c<s;if(f?l[c][1]===i:u)return this;if(Xr(a),(u||!f)&&Xr(o),u&&2===s)return new ga(e,this.keyHash,l[1^c]);var p=e&&e===this.ownerID,d=p?l:Ao(l);return f?u?c===s-1?d.pop():d[c]=d.pop():d[c]=[r,i]:d.push([r,i]),p?(this.entries=d,this):new va(e,this.keyHash,d)};var ga=function(e,t,n){this.ownerID=e,this.keyHash=t,this.entry=n};ga.prototype.get=function(e,t,n,r){return Ji(n,this.entry[0])?this.entry[1]:r},ga.prototype.update=function(e,t,n,r,i,o,a){var u=i===Yr,l=Ji(r,this.entry[0]);return(l?i===this.entry[1]:u)?this:(Xr(a),u?void Xr(o):l?e&&e===this.ownerID?(this.entry[1]=i,this):new ga(e,this.keyHash,[r,i]):(Xr(o),Ca(this,e,t,no(r),[r,i])))},ha.prototype.iterate=va.prototype.iterate=function(e,t){for(var n=this.entries,r=0,i=n.length-1;r<=i;r++)if(!1===e(n[t?i-r:r]))return!1},ya.prototype.iterate=ma.prototype.iterate=function(e,t){for(var n=this.nodes,r=0,i=n.length-1;r<=i;r++){var o=n[t?i-r:r];if(o&&!1===o.iterate(e,t))return!1}},ga.prototype.iterate=function(e,t){return e(this.entry)};var ba,_a=function(e){function t(e,t,n){this._type=t,this._reverse=n,this._stack=e._root&&Sa(e._root)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.next=function(){for(var e=this._type,t=this._stack;t;){var n=t.node,r=t.index++,i=void 0;if(n.entry){if(0===r)return wa(e,n.entry)}else if(n.entries){if(r<=(i=n.entries.length-1))return wa(e,n.entries[this._reverse?i-r:r])}else if(r<=(i=n.nodes.length-1)){var o=n.nodes[this._reverse?i-r:r];if(o){if(o.entry)return wa(e,o.entry);t=this._stack=Sa(o,t)}continue}t=this._stack=this._stack.__prev}return{value:void 0,done:!0}},t}(Oi);function wa(e,t){return Ci(e,t[0],t[1])}function Sa(e,t){return{node:e,index:0,__prev:t}}function xa(e,t,n,r){var i=Object.create(da);return i.size=e,i._root=t,i.__ownerID=n,i.__hash=r,i.__altered=!1,i}function ka(){return ba||(ba=xa(0))}function Ea(e,t,n){var r,i;if(e._root){var o={value:!1},a={value:!1};if(r=Ta(e._root,e.__ownerID,0,void 0,t,n,o,a),!a.value)return e;i=e.size+(o.value?n===Yr?-1:1:0)}else{if(n===Yr)return e;i=1,r=new ha(e.__ownerID,[[t,n]])}return e.__ownerID?(e.size=i,e._root=r,e.__hash=void 0,e.__altered=!0,e):r?xa(i,r):ka()}function Ta(e,t,n,r,i,o,a,u){return e?e.update(t,n,r,i,o,a,u):o===Yr?e:(Xr(u),Xr(a),new ga(t,r,[i,o]))}function Oa(e){return e.constructor===ga||e.constructor===va}function Ca(e,t,n,r,i){if(e.keyHash===r)return new va(t,r,[e.entry,i]);var o,a=(0===n?e.keyHash:e.keyHash>>>n)&Gr,u=(0===n?r:r>>>n)&Gr,l=a===u?[Ca(e,t,n+5,r,i)]:(o=new ga(t,r,i),a<u?[e,o]:[o,e]);return new ya(t,1<<a|1<<u,l)}function Pa(e){return e=(e=(858993459&(e-=e>>1&1431655765))+(e>>2&858993459))+(e>>4)&252645135,127&(e+=e>>8)+(e>>16)}function za(e,t,n,r){var i=r?e:Ao(e);return i[t]=n,i}var Ia=8,Na=16,ja=8,Ma="@@__IMMUTABLE_LIST__@@";function Ra(e){return Boolean(e&&e[Ma])}var Da=function(e){function t(t){var n=qa();if(null==t)return n;if(Ra(t))return t;var r=e(t),i=r.size;return 0===i?n:(Fo(i),i>0&&i<Qr?Wa(0,i,5,null,new La(r.toArray())):n.withMutations((function(e){e.setSize(i),r.forEach((function(t,n){return e.set(n,t)}))})))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.prototype.toString=function(){return this.__toString("List [","]")},t.prototype.get=function(e,t){if((e=ei(this,e))>=0&&e<this.size){var n=$a(this,e+=this._origin);return n&&n.array[e&Gr]}return t},t.prototype.set=function(e,t){return function(e,t,n){if((t=ei(e,t))!=t)return e;if(t>=e.size||t<0)return e.withMutations((function(e){t<0?Ka(e,t).set(0,n):Ka(e,0,t+1).set(t,n)}));t+=e._origin;var r=e._tail,i=e._root,o={value:!1};return t>=Qa(e._capacity)?r=Ha(r,e.__ownerID,0,t,n,o):i=Ha(i,e.__ownerID,e._level,t,n,o),o.value?e.__ownerID?(e._root=i,e._tail=r,e.__hash=void 0,e.__altered=!0,e):Wa(e._origin,e._capacity,e._level,i,r):e}(this,e,t)},t.prototype.remove=function(e){return this.has(e)?0===e?this.shift():e===this.size-1?this.pop():this.splice(e,1):this},t.prototype.insert=function(e,t){return this.splice(e,0,t)},t.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=this._origin=this._capacity=0,this._level=5,this._root=this._tail=null,this.__hash=void 0,this.__altered=!0,this):qa()},t.prototype.push=function(){var e=arguments,t=this.size;return this.withMutations((function(n){Ka(n,0,t+e.length);for(var r=0;r<e.length;r++)n.set(t+r,e[r])}))},t.prototype.pop=function(){return Ka(this,0,-1)},t.prototype.unshift=function(){var e=arguments;return this.withMutations((function(t){Ka(t,-e.length);for(var n=0;n<e.length;n++)t.set(n,e[n])}))},t.prototype.shift=function(){return Ka(this,1)},t.prototype.concat=function(){for(var t=arguments,n=[],r=0;r<arguments.length;r++){var i=t[r],o=e("string"!=typeof i&&zi(i)?i:[i]);0!==o.size&&n.push(o)}return 0===n.length?this:0!==this.size||this.__ownerID||1!==n.length?this.withMutations((function(e){n.forEach((function(t){return t.forEach((function(t){return e.push(t)}))}))})):this.constructor(n[0])},t.prototype.setSize=function(e){return Ka(this,0,e)},t.prototype.map=function(e,t){var n=this;return this.withMutations((function(r){for(var i=0;i<n.size;i++)r.set(i,e.call(t,r.get(i),i,r))}))},t.prototype.slice=function(e,t){var n=this.size;return ni(e,t,n)?this:Ka(this,ri(e,n),ii(t,n))},t.prototype.__iterator=function(e,t){var n=t?this.size:0,r=Ua(this,t);return new Oi((function(){var i=r();return i===Ba?{value:void 0,done:!0}:Ci(e,t?--n:n++,i)}))},t.prototype.__iterate=function(e,t){for(var n,r=t?this.size:0,i=Ua(this,t);(n=i())!==Ba&&!1!==e(n,t?--r:r++,this););return r},t.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?Wa(this._origin,this._capacity,this._level,this._root,this._tail,e,this.__hash):0===this.size?qa():(this.__ownerID=e,this.__altered=!1,this)},t}(mi);Da.isList=Ra;var Aa=Da.prototype;Aa[Ma]=!0,Aa.delete=Aa.remove,Aa.merge=Aa.concat,Aa.setIn=Qo,Aa.deleteIn=Aa.removeIn=Go,Aa.update=Xo,Aa.updateIn=Jo,Aa.mergeIn=aa,Aa.mergeDeepIn=ua,Aa.withMutations=la,Aa.wasAltered=fa,Aa.asImmutable=sa,Aa["@@transducer/init"]=Aa.asMutable=ca,Aa["@@transducer/step"]=function(e,t){return e.push(t)},Aa["@@transducer/result"]=function(e){return e.asImmutable()};var La=function(e,t){this.array=e,this.ownerID=t};La.prototype.removeBefore=function(e,t,n){if(n===t?1<<t:0===this.array.length)return this;var r=n>>>t&Gr;if(r>=this.array.length)return new La([],e);var i,o=0===r;if(t>0){var a=this.array[r];if((i=a&&a.removeBefore(e,t-5,n))===a&&o)return this}if(o&&!i)return this;var u=Va(this,e);if(!o)for(var l=0;l<r;l++)u.array[l]=void 0;return i&&(u.array[r]=i),u},La.prototype.removeAfter=function(e,t,n){if(n===(t?1<<t:0)||0===this.array.length)return this;var r,i=n-1>>>t&Gr;if(i>=this.array.length)return this;if(t>0){var o=this.array[i];if((r=o&&o.removeAfter(e,t-5,n))===o&&i===this.array.length-1)return this}var a=Va(this,e);return a.array.splice(i+1),r&&(a.array[i]=r),a};var Fa,Ba={};function Ua(e,t){var n=e._origin,r=e._capacity,i=Qa(r),o=e._tail;return function e(a,u,l){return 0===u?function(e,a){var u=a===i?o&&o.array:e&&e.array,l=a>n?0:n-a,c=r-a;return c>Qr&&(c=Qr),function(){if(l===c)return Ba;var e=t?--c:l++;return u&&u[e]}}(a,l):function(i,o,a){var u,l=i&&i.array,c=a>n?0:n-a>>o,s=1+(r-a>>o);return s>Qr&&(s=Qr),function(){for(;;){if(u){var n=u();if(n!==Ba)return n;u=null}if(c===s)return Ba;var r=t?--s:c++;u=e(l&&l[r],o-5,a+(r<<o))}}}(a,u,l)}(e._root,e._level,0)}function Wa(e,t,n,r,i,o,a){var u=Object.create(Aa);return u.size=t-e,u._origin=e,u._capacity=t,u._level=n,u._root=r,u._tail=i,u.__ownerID=o,u.__hash=a,u.__altered=!1,u}function qa(){return Fa||(Fa=Wa(0,0,5))}function Ha(e,t,n,r,i,o){var a,u=r>>>n&Gr,l=e&&u<e.array.length;if(!l&&void 0===i)return e;if(n>0){var c=e&&e.array[u],s=Ha(c,t,n-5,r,i,o);return s===c?e:((a=Va(e,t)).array[u]=s,a)}return l&&e.array[u]===i?e:(o&&Xr(o),a=Va(e,t),void 0===i&&u===a.array.length-1?a.array.pop():a.array[u]=i,a)}function Va(e,t){return t&&e&&t===e.ownerID?e:new La(e?e.array.slice():[],t)}function $a(e,t){if(t>=Qa(e._capacity))return e._tail;if(t<1<<e._level+5){for(var n=e._root,r=e._level;n&&r>0;)n=n.array[t>>>r&Gr],r-=5;return n}}function Ka(e,t,n){void 0!==t&&(t|=0),void 0!==n&&(n|=0);var r=e.__ownerID||new Jr,i=e._origin,o=e._capacity,a=i+t,u=void 0===n?o:n<0?o+n:i+n;if(a===i&&u===o)return e;if(a>=u)return e.clear();for(var l=e._level,c=e._root,s=0;a+s<0;)c=new La(c&&c.array.length?[void 0,c]:[],r),s+=1<<(l+=5);s&&(a+=s,i+=s,u+=s,o+=s);for(var f=Qa(o),p=Qa(u);p>=1<<l+5;)c=new La(c&&c.array.length?[c]:[],r),l+=5;var d=e._tail,h=p<f?$a(e,u-1):p>f?new La([],r):d;if(d&&p>f&&a<o&&d.array.length){for(var y=c=Va(c,r),m=l;m>5;m-=5){var v=f>>>m&Gr;y=y.array[v]=Va(y.array[v],r)}y.array[f>>>5&Gr]=d}if(u<o&&(h=h&&h.removeAfter(r,0,u)),a>=p)a-=p,u-=p,l=5,c=null,h=h&&h.removeBefore(r,0,a);else if(a>i||p<f){for(s=0;c;){var g=a>>>l&Gr;if(g!==p>>>l&Gr)break;g&&(s+=(1<<l)*g),l-=5,c=c.array[g]}c&&a>i&&(c=c.removeBefore(r,l,a-s)),c&&p<f&&(c=c.removeAfter(r,l,p-s)),s&&(a-=s,u-=s)}return e.__ownerID?(e.size=u-a,e._origin=a,e._capacity=u,e._level=l,e._root=c,e._tail=h,e.__hash=void 0,e.__altered=!0,e):Wa(a,u,l,c,h)}function Qa(e){return e<Qr?0:e-1>>>5<<5}var Ga,Ya=function(e){function t(e){return null==e?Ja():Yi(e)?e:Ja().withMutations((function(t){var n=yi(e);Fo(n.size),n.forEach((function(e,n){return t.set(n,e)}))}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.prototype.toString=function(){return this.__toString("OrderedMap {","}")},t.prototype.get=function(e,t){var n=this._map.get(e);return void 0!==n?this._list.get(n)[1]:t},t.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._map.clear(),this._list.clear(),this):Ja()},t.prototype.set=function(e,t){return Za(this,e,t)},t.prototype.remove=function(e){return Za(this,e,Yr)},t.prototype.wasAltered=function(){return this._map.wasAltered()||this._list.wasAltered()},t.prototype.__iterate=function(e,t){var n=this;return this._list.__iterate((function(t){return t&&e(t[1],t[0],n)}),t)},t.prototype.__iterator=function(e,t){return this._list.fromEntrySeq().__iterator(e,t)},t.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._map.__ensureOwner(e),n=this._list.__ensureOwner(e);return e?Xa(t,n,e,this.__hash):0===this.size?Ja():(this.__ownerID=e,this._map=t,this._list=n,this)},t}(pa);function Xa(e,t,n,r){var i=Object.create(Ya.prototype);return i.size=e?e.size:0,i._map=e,i._list=t,i.__ownerID=n,i.__hash=r,i}function Ja(){return Ga||(Ga=Xa(ka(),qa()))}function Za(e,t,n){var r,i,o=e._map,a=e._list,u=o.get(t),l=void 0!==u;if(n===Yr){if(!l)return e;a.size>=Qr&&a.size>=2*o.size?(r=(i=a.filter((function(e,t){return void 0!==e&&u!==t}))).toKeyedSeq().map((function(e){return e[0]})).flip().toMap(),e.__ownerID&&(r.__ownerID=i.__ownerID=e.__ownerID)):(r=o.remove(t),i=u===a.size-1?a.pop():a.set(u,void 0))}else if(l){if(n===a.get(u)[1])return e;r=o,i=a.set(u,[t,n])}else r=o.set(t,a.size),i=a.set(a.size,[t,n]);return e.__ownerID?(e.size=r.size,e._map=r,e._list=i,e.__hash=void 0,e):Xa(r,i)}Ya.isOrderedMap=Yi,Ya.prototype[xi]=!0,Ya.prototype.delete=Ya.prototype.remove;var eu="@@__IMMUTABLE_STACK__@@";function tu(e){return Boolean(e&&e[eu])}var nu=function(e){function t(e){return null==e?au():tu(e)?e:au().pushAll(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.prototype.toString=function(){return this.__toString("Stack [","]")},t.prototype.get=function(e,t){var n=this._head;for(e=ei(this,e);n&&e--;)n=n.next;return n?n.value:t},t.prototype.peek=function(){return this._head&&this._head.value},t.prototype.push=function(){var e=arguments;if(0===arguments.length)return this;for(var t=this.size+arguments.length,n=this._head,r=arguments.length-1;r>=0;r--)n={value:e[r],next:n};return this.__ownerID?(this.size=t,this._head=n,this.__hash=void 0,this.__altered=!0,this):ou(t,n)},t.prototype.pushAll=function(t){if(0===(t=e(t)).size)return this;if(0===this.size&&tu(t))return t;Fo(t.size);var n=this.size,r=this._head;return t.__iterate((function(e){n++,r={value:e,next:r}}),!0),this.__ownerID?(this.size=n,this._head=r,this.__hash=void 0,this.__altered=!0,this):ou(n,r)},t.prototype.pop=function(){return this.slice(1)},t.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._head=void 0,this.__hash=void 0,this.__altered=!0,this):au()},t.prototype.slice=function(t,n){if(ni(t,n,this.size))return this;var r=ri(t,this.size);if(ii(n,this.size)!==this.size)return e.prototype.slice.call(this,t,n);for(var i=this.size-r,o=this._head;r--;)o=o.next;return this.__ownerID?(this.size=i,this._head=o,this.__hash=void 0,this.__altered=!0,this):ou(i,o)},t.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?ou(this.size,this._head,e,this.__hash):0===this.size?au():(this.__ownerID=e,this.__altered=!1,this)},t.prototype.__iterate=function(e,t){var n=this;if(t)return new Bi(this.toArray()).__iterate((function(t,r){return e(t,r,n)}),t);for(var r=0,i=this._head;i&&!1!==e(i.value,r++,this);)i=i.next;return r},t.prototype.__iterator=function(e,t){if(t)return new Bi(this.toArray()).__iterator(e,t);var n=0,r=this._head;return new Oi((function(){if(r){var t=r.value;return r=r.next,Ci(e,n++,t)}return{value:void 0,done:!0}}))},t}(mi);nu.isStack=tu;var ru,iu=nu.prototype;function ou(e,t,n,r){var i=Object.create(iu);return i.size=e,i._head=t,i.__ownerID=n,i.__hash=r,i.__altered=!1,i}function au(){return ru||(ru=ou(0))}iu[eu]=!0,iu.shift=iu.pop,iu.unshift=iu.push,iu.unshiftAll=iu.pushAll,iu.withMutations=la,iu.wasAltered=fa,iu.asImmutable=sa,iu["@@transducer/init"]=iu.asMutable=ca,iu["@@transducer/step"]=function(e,t){return e.unshift(t)},iu["@@transducer/result"]=function(e){return e.asImmutable()};var uu="@@__IMMUTABLE_SET__@@";function lu(e){return Boolean(e&&e[uu])}function cu(e){return lu(e)&&ki(e)}function su(e,t){if(e===t)return!0;if(!li(t)||void 0!==e.size&&void 0!==t.size&&e.size!==t.size||void 0!==e.__hash&&void 0!==t.__hash&&e.__hash!==t.__hash||si(e)!==si(t)||pi(e)!==pi(t)||ki(e)!==ki(t))return!1;if(0===e.size&&0===t.size)return!0;var n=!di(e);if(ki(e)){var r=e.entries();return t.every((function(e,t){var i=r.next().value;return i&&Ji(i[1],e)&&(n||Ji(i[0],t))}))&&r.next().done}var i=!1;if(void 0===e.size)if(void 0===t.size)"function"==typeof e.cacheResult&&e.cacheResult();else{i=!0;var o=e;e=t,t=o}var a=!0,u=t.__iterate((function(t,r){if(n?!e.has(t):i?!Ji(t,e.get(r,Yr)):!Ji(e.get(r,Yr),t))return a=!1,!1}));return a&&e.size===u}function fu(e,t){var n=function(n){e.prototype[n]=t[n]};return Object.keys(t).forEach(n),Object.getOwnPropertySymbols&&Object.getOwnPropertySymbols(t).forEach(n),e}function pu(e){if(!e||"object"!=typeof e)return e;if(!li(e)){if(!Wo(e))return e;e=Di(e)}if(si(e)){var t={};return e.__iterate((function(e,n){t[n]=pu(e)})),t}var n=[];return e.__iterate((function(e){n.push(pu(e))})),n}var du=function(e){function t(t){return null==t?gu():lu(t)&&!ki(t)?t:gu().withMutations((function(n){var r=e(t);Fo(r.size),r.forEach((function(e){return n.add(e)}))}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.fromKeys=function(e){return this(yi(e).keySeq())},t.intersect=function(e){return(e=hi(e).toArray()).length?yu.intersect.apply(t(e.pop()),e):gu()},t.union=function(e){return(e=hi(e).toArray()).length?yu.union.apply(t(e.pop()),e):gu()},t.prototype.toString=function(){return this.__toString("Set {","}")},t.prototype.has=function(e){return this._map.has(e)},t.prototype.add=function(e){return mu(this,this._map.set(e,e))},t.prototype.remove=function(e){return mu(this,this._map.remove(e))},t.prototype.clear=function(){return mu(this,this._map.clear())},t.prototype.map=function(e,t){var n=this,r=[],i=[];return this.forEach((function(o){var a=e.call(t,o,o,n);a!==o&&(r.push(o),i.push(a))})),this.withMutations((function(e){r.forEach((function(t){return e.remove(t)})),i.forEach((function(t){return e.add(t)}))}))},t.prototype.union=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];return 0===(t=t.filter((function(e){return 0!==e.size}))).length?this:0!==this.size||this.__ownerID||1!==t.length?this.withMutations((function(n){for(var r=0;r<t.length;r++)e(t[r]).forEach((function(e){return n.add(e)}))})):this.constructor(t[0])},t.prototype.intersect=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];if(0===t.length)return this;t=t.map((function(t){return e(t)}));var r=[];return this.forEach((function(e){t.every((function(t){return t.includes(e)}))||r.push(e)})),this.withMutations((function(e){r.forEach((function(t){e.remove(t)}))}))},t.prototype.subtract=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];if(0===t.length)return this;t=t.map((function(t){return e(t)}));var r=[];return this.forEach((function(e){t.some((function(t){return t.includes(e)}))&&r.push(e)})),this.withMutations((function(e){r.forEach((function(t){e.remove(t)}))}))},t.prototype.sort=function(e){return Ru(Oo(this,e))},t.prototype.sortBy=function(e,t){return Ru(Oo(this,t,e))},t.prototype.wasAltered=function(){return this._map.wasAltered()},t.prototype.__iterate=function(e,t){var n=this;return this._map.__iterate((function(t){return e(t,t,n)}),t)},t.prototype.__iterator=function(e,t){return this._map.__iterator(e,t)},t.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._map.__ensureOwner(e);return e?this.__make(t,e):0===this.size?this.__empty():(this.__ownerID=e,this._map=t,this)},t}(vi);du.isSet=lu;var hu,yu=du.prototype;function mu(e,t){return e.__ownerID?(e.size=t.size,e._map=t,e):t===e._map?e:0===t.size?e.__empty():e.__make(t)}function vu(e,t){var n=Object.create(yu);return n.size=e?e.size:0,n._map=e,n.__ownerID=t,n}function gu(){return hu||(hu=vu(ka()))}yu[uu]=!0,yu.delete=yu.remove,yu.merge=yu.concat=yu.union,yu.withMutations=la,yu.asImmutable=sa,yu["@@transducer/init"]=yu.asMutable=ca,yu["@@transducer/step"]=function(e,t){return e.add(t)},yu["@@transducer/result"]=function(e){return e.asImmutable()},yu.__empty=gu,yu.__make=vu;var bu,_u=function(e){function t(e,n,r){if(!(this instanceof t))return new t(e,n,r);if(Lo(0!==r,"Cannot step a Range by 0"),e=e||0,void 0===n&&(n=1/0),r=void 0===r?1:Math.abs(r),n<e&&(r=-r),this._start=e,this._end=n,this._step=r,this.size=Math.max(0,Math.ceil((n-e)/r-1)+1),0===this.size){if(bu)return bu;bu=this}}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.toString=function(){return 0===this.size?"Range []":"Range [ "+this._start+"..."+this._end+(1!==this._step?" by "+this._step:"")+" ]"},t.prototype.get=function(e,t){return this.has(e)?this._start+ei(this,e)*this._step:t},t.prototype.includes=function(e){var t=(e-this._start)/this._step;return t>=0&&t<this.size&&t===Math.floor(t)},t.prototype.slice=function(e,n){return ni(e,n,this.size)?this:(e=ri(e,this.size),(n=ii(n,this.size))<=e?new t(0,0):new t(this.get(e,this._end),this.get(n,this._end),this._step))},t.prototype.indexOf=function(e){var t=e-this._start;if(t%this._step==0){var n=t/this._step;if(n>=0&&n<this.size)return n}return-1},t.prototype.lastIndexOf=function(e){return this.indexOf(e)},t.prototype.__iterate=function(e,t){for(var n=this.size,r=this._step,i=t?this._start+(n-1)*r:this._start,o=0;o!==n&&!1!==e(i,t?n-++o:o++,this);)i+=t?-r:r;return o},t.prototype.__iterator=function(e,t){var n=this.size,r=this._step,i=t?this._start+(n-1)*r:this._start,o=0;return new Oi((function(){if(o===n)return{value:void 0,done:!0};var a=i;return i+=t?-r:r,Ci(e,t?n-++o:o++,a)}))},t.prototype.equals=function(e){return e instanceof t?this._start===e._start&&this._end===e._end&&this._step===e._step:su(this,e)},t}(Li);function wu(e,t,n){for(var r=Bo(t),i=0;i!==r.length;)if((e=Ho(e,r[i++],Yr))===Yr)return n;return e}function Su(e,t){return wu(this,e,t)}function xu(){Fo(this.size);var e={};return this.__iterate((function(t,n){e[n]=t})),e}hi.isIterable=li,hi.isKeyed=si,hi.isIndexed=pi,hi.isAssociative=di,hi.isOrdered=ki,hi.Iterator=Oi,fu(hi,{toArray:function(){Fo(this.size);var e=new Array(this.size||0),t=si(this),n=0;return this.__iterate((function(r,i){e[n++]=t?[i,r]:r})),e},toIndexedSeq:function(){return new mo(this)},toJS:function(){return pu(this)},toKeyedSeq:function(){return new yo(this,!0)},toMap:function(){return pa(this.toKeyedSeq())},toObject:xu,toOrderedMap:function(){return Ya(this.toKeyedSeq())},toOrderedSet:function(){return Ru(si(this)?this.valueSeq():this)},toSet:function(){return du(si(this)?this.valueSeq():this)},toSetSeq:function(){return new vo(this)},toSeq:function(){return pi(this)?this.toIndexedSeq():si(this)?this.toKeyedSeq():this.toSetSeq()},toStack:function(){return nu(si(this)?this.valueSeq():this)},toList:function(){return Da(si(this)?this.valueSeq():this)},toString:function(){return"[Collection]"},__toString:function(e,t){return 0===this.size?e+t:e+" "+this.toSeq().map(this.__toStringMapper).join(", ")+" "+t},concat:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return Io(this,Eo(this,e))},includes:function(e){return this.some((function(t){return Ji(t,e)}))},entries:function(){return this.__iterator(2)},every:function(e,t){Fo(this.size);var n=!0;return this.__iterate((function(r,i,o){if(!e.call(t,r,i,o))return n=!1,!1})),n},filter:function(e,t){return Io(this,So(this,e,t,!0))},find:function(e,t,n){var r=this.findEntry(e,t);return r?r[1]:n},forEach:function(e,t){return Fo(this.size),this.__iterate(t?e.bind(t):e)},join:function(e){Fo(this.size),e=void 0!==e?""+e:",";var t="",n=!0;return this.__iterate((function(r){n?n=!1:t+=e,t+=null!=r?r.toString():""})),t},keys:function(){return this.__iterator(0)},map:function(e,t){return Io(this,_o(this,e,t))},reduce:function(e,t,n){return Ou(this,e,t,n,arguments.length<2,!1)},reduceRight:function(e,t,n){return Ou(this,e,t,n,arguments.length<2,!0)},reverse:function(){return Io(this,wo(this,!0))},slice:function(e,t){return Io(this,xo(this,e,t,!0))},some:function(e,t){return!this.every(zu(e),t)},sort:function(e){return Io(this,Oo(this,e))},values:function(){return this.__iterator(1)},butLast:function(){return this.slice(0,-1)},isEmpty:function(){return void 0!==this.size?0===this.size:!this.some((function(){return!0}))},count:function(e,t){return Zr(e?this.toSeq().filter(e,t):this)},countBy:function(e,t){return function(e,t,n){var r=pa().asMutable();return e.__iterate((function(i,o){r.update(t.call(n,i,o,e),0,(function(e){return e+1}))})),r.asImmutable()}(this,e,t)},equals:function(e){return su(this,e)},entrySeq:function(){var e=this;if(e._cache)return new Bi(e._cache);var t=e.toSeq().map(Pu).toIndexedSeq();return t.fromEntrySeq=function(){return e.toSeq()},t},filterNot:function(e,t){return this.filter(zu(e),t)},findEntry:function(e,t,n){var r=n;return this.__iterate((function(n,i,o){if(e.call(t,n,i,o))return r=[i,n],!1})),r},findKey:function(e,t){var n=this.findEntry(e,t);return n&&n[0]},findLast:function(e,t,n){return this.toKeyedSeq().reverse().find(e,t,n)},findLastEntry:function(e,t,n){return this.toKeyedSeq().reverse().findEntry(e,t,n)},findLastKey:function(e,t){return this.toKeyedSeq().reverse().findKey(e,t)},first:function(e){return this.find(ti,null,e)},flatMap:function(e,t){return Io(this,function(e,t,n){var r=jo(e);return e.toSeq().map((function(i,o){return r(t.call(n,i,o,e))})).flatten(!0)}(this,e,t))},flatten:function(e){return Io(this,To(this,e,!0))},fromEntrySeq:function(){return new go(this)},get:function(e,t){return this.find((function(t,n){return Ji(n,e)}),void 0,t)},getIn:Su,groupBy:function(e,t){return function(e,t,n){var r=si(e),i=(ki(e)?Ya():pa()).asMutable();e.__iterate((function(o,a){i.update(t.call(n,o,a,e),(function(e){return(e=e||[]).push(r?[a,o]:o),e}))}));var o=jo(e);return i.map((function(t){return Io(e,o(t))})).asImmutable()}(this,e,t)},has:function(e){return this.get(e,Yr)!==Yr},hasIn:function(e){return wu(this,e,Yr)!==Yr},isSubset:function(e){return e="function"==typeof e.includes?e:hi(e),this.every((function(t){return e.includes(t)}))},isSuperset:function(e){return(e="function"==typeof e.isSubset?e:hi(e)).isSubset(this)},keyOf:function(e){return this.findKey((function(t){return Ji(t,e)}))},keySeq:function(){return this.toSeq().map(Cu).toIndexedSeq()},last:function(e){return this.toSeq().reverse().first(e)},lastKeyOf:function(e){return this.toKeyedSeq().reverse().keyOf(e)},max:function(e){return Co(this,e)},maxBy:function(e,t){return Co(this,t,e)},min:function(e){return Co(this,e?Iu(e):ju)},minBy:function(e,t){return Co(this,t?Iu(t):ju,e)},rest:function(){return this.slice(1)},skip:function(e){return 0===e?this:this.slice(Math.max(0,e))},skipLast:function(e){return 0===e?this:this.slice(0,-Math.max(0,e))},skipWhile:function(e,t){return Io(this,ko(this,e,t,!0))},skipUntil:function(e,t){return this.skipWhile(zu(e),t)},sortBy:function(e,t){return Io(this,Oo(this,t,e))},take:function(e){return this.slice(0,Math.max(0,e))},takeLast:function(e){return this.slice(-Math.max(0,e))},takeWhile:function(e,t){return Io(this,function(e,t,n){var r=Mo(e);return r.__iterateUncached=function(r,i){var o=this;if(i)return this.cacheResult().__iterate(r,i);var a=0;return e.__iterate((function(e,i,u){return t.call(n,e,i,u)&&++a&&r(e,i,o)})),a},r.__iteratorUncached=function(r,i){var o=this;if(i)return this.cacheResult().__iterator(r,i);var a=e.__iterator(2,i),u=!0;return new Oi((function(){if(!u)return{value:void 0,done:!0};var e=a.next();if(e.done)return e;var i=e.value,l=i[0],c=i[1];return t.call(n,c,l,o)?2===r?e:Ci(r,l,c,e):(u=!1,{value:void 0,done:!0})}))},r}(this,e,t))},takeUntil:function(e,t){return this.takeWhile(zu(e),t)},update:function(e){return e(this)},valueSeq:function(){return this.toIndexedSeq()},hashCode:function(){return this.__hash||(this.__hash=function(e){if(e.size===1/0)return 0;var t=ki(e),n=si(e),r=t?1:0;return function(e,t){return t=Zi(t,3432918353),t=Zi(t<<15|t>>>-15,461845907),t=Zi(t<<13|t>>>-13,5),t=Zi((t=(t+3864292196|0)^e)^t>>>16,2246822507),eo((t=Zi(t^t>>>13,3266489909))^t>>>16)}(e.__iterate(n?t?function(e,t){r=31*r+Mu(no(e),no(t))|0}:function(e,t){r=r+Mu(no(e),no(t))|0}:t?function(e){r=31*r+no(e)|0}:function(e){r=r+no(e)|0}),r)}(this))}});var ku=hi.prototype;ku[ui]=!0,ku[Ti]=ku.values,ku.toJSON=ku.toArray,ku.__toStringMapper=qo,ku.inspect=ku.toSource=function(){return this.toString()},ku.chain=ku.flatMap,ku.contains=ku.includes,fu(yi,{flip:function(){return Io(this,bo(this))},mapEntries:function(e,t){var n=this,r=0;return Io(this,this.toSeq().map((function(i,o){return e.call(t,[o,i],r++,n)})).fromEntrySeq())},mapKeys:function(e,t){var n=this;return Io(this,this.toSeq().flip().map((function(r,i){return e.call(t,r,i,n)})).flip())}});var Eu=yi.prototype;Eu[ci]=!0,Eu[Ti]=ku.entries,Eu.toJSON=xu,Eu.__toStringMapper=function(e,t){return qo(t)+": "+qo(e)},fu(mi,{toKeyedSeq:function(){return new yo(this,!1)},filter:function(e,t){return Io(this,So(this,e,t,!1))},findIndex:function(e,t){var n=this.findEntry(e,t);return n?n[0]:-1},indexOf:function(e){var t=this.keyOf(e);return void 0===t?-1:t},lastIndexOf:function(e){var t=this.lastKeyOf(e);return void 0===t?-1:t},reverse:function(){return Io(this,wo(this,!1))},slice:function(e,t){return Io(this,xo(this,e,t,!1))},splice:function(e,t){var n=arguments.length;if(t=Math.max(t||0,0),0===n||2===n&&!t)return this;e=ri(e,e<0?this.count():this.size);var r=this.slice(0,e);return Io(this,1===n?r:r.concat(Ao(arguments,2),this.slice(e+t)))},findLastIndex:function(e,t){var n=this.findLastEntry(e,t);return n?n[0]:-1},first:function(e){return this.get(0,e)},flatten:function(e){return Io(this,To(this,e,!1))},get:function(e,t){return(e=ei(this,e))<0||this.size===1/0||void 0!==this.size&&e>this.size?t:this.find((function(t,n){return n===e}),void 0,t)},has:function(e){return(e=ei(this,e))>=0&&(void 0!==this.size?this.size===1/0||e<this.size:-1!==this.indexOf(e))},interpose:function(e){return Io(this,function(e,t){var n=Mo(e);return n.size=e.size&&2*e.size-1,n.__iterateUncached=function(n,r){var i=this,o=0;return e.__iterate((function(e){return(!o||!1!==n(t,o++,i))&&!1!==n(e,o++,i)}),r),o},n.__iteratorUncached=function(n,r){var i,o=e.__iterator(1,r),a=0;return new Oi((function(){return(!i||a%2)&&(i=o.next()).done?i:a%2?Ci(n,a++,t):Ci(n,a++,i.value,i)}))},n}(this,e))},interleave:function(){var e=[this].concat(Ao(arguments)),t=zo(this.toSeq(),Li.of,e),n=t.flatten(!0);return t.size&&(n.size=t.size*e.length),Io(this,n)},keySeq:function(){return _u(0,this.size)},last:function(e){return this.get(-1,e)},skipWhile:function(e,t){return Io(this,ko(this,e,t,!1))},zip:function(){var e=[this].concat(Ao(arguments));return Io(this,zo(this,Nu,e))},zipAll:function(){var e=[this].concat(Ao(arguments));return Io(this,zo(this,Nu,e,!0))},zipWith:function(e){var t=Ao(arguments);return t[0]=this,Io(this,zo(this,e,t))}});var Tu=mi.prototype;function Ou(e,t,n,r,i,o){return Fo(e.size),e.__iterate((function(e,o,a){i?(i=!1,n=e):n=t.call(r,n,e,o,a)}),o),n}function Cu(e,t){return t}function Pu(e,t){return[t,e]}function zu(e){return function(){return!e.apply(this,arguments)}}function Iu(e){return function(){return-e.apply(this,arguments)}}function Nu(){return Ao(arguments)}function ju(e,t){return e<t?1:e>t?-1:0}function Mu(e,t){return e^t+2654435769+(e<<6)+(e>>2)|0}Tu[fi]=!0,Tu[xi]=!0,fu(vi,{get:function(e,t){return this.has(e)?e:t},includes:function(e){return this.has(e)},keySeq:function(){return this.valueSeq()}}),vi.prototype.has=ku.includes,vi.prototype.contains=vi.prototype.includes,fu(Ai,yi.prototype),fu(Li,mi.prototype),fu(Fi,vi.prototype);var Ru=function(e){function t(e){return null==e?Fu():cu(e)?e:Fu().withMutations((function(t){var n=vi(e);Fo(n.size),n.forEach((function(e){return t.add(e)}))}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.fromKeys=function(e){return this(yi(e).keySeq())},t.prototype.toString=function(){return this.__toString("OrderedSet {","}")},t}(du);Ru.isOrderedSet=cu;var Du,Au=Ru.prototype;function Lu(e,t){var n=Object.create(Au);return n.size=e?e.size:0,n._map=e,n.__ownerID=t,n}function Fu(){return Du||(Du=Lu(Ja()))}Au[xi]=!0,Au.zip=Tu.zip,Au.zipWith=Tu.zipWith,Au.__empty=Fu,Au.__make=Lu;var Bu=function(e,t){var n,r=function(o){var a=this;if(o instanceof r)return o;if(!(this instanceof r))return new r(o);if(!n){n=!0;var u=Object.keys(e),l=i._indices={};i._name=t,i._keys=u,i._defaultValues=e;for(var c=0;c<u.length;c++){var s=u[c];l[s]=c,i[s]?"object"==typeof console&&console.warn&&console.warn("Cannot define "+qu(this)+' with property "'+s+'" since that property name is part of the Record API.'):Vu(i,s)}}this.__ownerID=void 0,this._values=Da().withMutations((function(e){e.setSize(a._keys.length),yi(o).forEach((function(t,n){e.set(a._indices[n],t===a._defaultValues[n]?void 0:t)}))}))},i=r.prototype=Object.create(Uu);return i.constructor=r,t&&(r.displayName=t),r};Bu.prototype.toString=function(){for(var e,t=qu(this)+" { ",n=this._keys,r=0,i=n.length;r!==i;r++)t+=(r?", ":"")+(e=n[r])+": "+qo(this.get(e));return t+" }"},Bu.prototype.equals=function(e){return this===e||e&&this._keys===e._keys&&Hu(this).equals(Hu(e))},Bu.prototype.hashCode=function(){return Hu(this).hashCode()},Bu.prototype.has=function(e){return this._indices.hasOwnProperty(e)},Bu.prototype.get=function(e,t){if(!this.has(e))return t;var n=this._indices[e],r=this._values.get(n);return void 0===r?this._defaultValues[e]:r},Bu.prototype.set=function(e,t){if(this.has(e)){var n=this._values.set(this._indices[e],t===this._defaultValues[e]?void 0:t);if(n!==this._values&&!this.__ownerID)return Wu(this,n)}return this},Bu.prototype.remove=function(e){return this.set(e)},Bu.prototype.clear=function(){var e=this._values.clear().setSize(this._keys.length);return this.__ownerID?this:Wu(this,e)},Bu.prototype.wasAltered=function(){return this._values.wasAltered()},Bu.prototype.toSeq=function(){return Hu(this)},Bu.prototype.toJS=function(){return pu(this)},Bu.prototype.entries=function(){return this.__iterator(2)},Bu.prototype.__iterator=function(e,t){return Hu(this).__iterator(e,t)},Bu.prototype.__iterate=function(e,t){return Hu(this).__iterate(e,t)},Bu.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._values.__ensureOwner(e);return e?Wu(this,t,e):(this.__ownerID=e,this._values=t,this)},Bu.isRecord=wi,Bu.getDescriptiveName=qu;var Uu=Bu.prototype;function Wu(e,t,n){var r=Object.create(Object.getPrototypeOf(e));return r._values=t,r.__ownerID=n,r}function qu(e){return e.constructor.displayName||e.constructor.name||"Record"}function Hu(e){return Vi(e._keys.map((function(t){return[t,e.get(t)]})))}function Vu(e,t){try{Object.defineProperty(e,t,{get:function(){return this.get(t)},set:function(e){Lo(this.__ownerID,"Cannot set on an immutable record."),this.set(t,e)}})}catch(e){}}function $u(e,t){return Ku([],t||Qu,e,"",t&&t.length>2?[]:void 0,{"":e})}function Ku(e,t,n,r,i,o){var a=Array.isArray(n)?Li:Uo(n)?Ai:null;if(a){if(~e.indexOf(n))throw new TypeError("Cannot convert circular structure to Immutable");e.push(n),i&&""!==r&&i.push(r);var u=t.call(o,r,a(n).map((function(r,o){return Ku(e,t,r,o,i,n)})),i&&i.slice());return e.pop(),i&&i.pop(),u}return n}function Qu(e,t){return si(t)?t.toMap():t.toList()}function Gu(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Yu(e,t,n){return t&&Gu(e.prototype,t),n&&Gu(e,n),e}function Xu(){return Xu=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Xu.apply(this,arguments)}function Ju(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function Zu(e){return!(!e||"function"!=typeof e.hasOwnProperty||!(e.hasOwnProperty("__ownerID")||e._map&&e._map.hasOwnProperty("__ownerID")))}function el(e,t,n){return Object.keys(e).reduce((function(t,r){var i=""+r;return t.has(i)?t.set(i,n(t.get(i),e[i])):t}),t)}Uu[_i]=!0,Uu.delete=Uu.remove,Uu.deleteIn=Uu.removeIn=Go,Uu.getIn=Su,Uu.hasIn=ku.hasIn,Uu.merge=Zo,Uu.mergeWith=ea,Uu.mergeIn=aa,Uu.mergeDeep=ia,Uu.mergeDeepWith=oa,Uu.mergeDeepIn=ua,Uu.setIn=Qo,Uu.update=Xo,Uu.updateIn=Jo,Uu.withMutations=la,Uu.asMutable=ca,Uu.asImmutable=sa,Uu[Ti]=Uu.entries,Uu.toJSON=Uu.toObject=ku.toObject,Uu.inspect=Uu.toSource=function(){return this.toString()};var tl=function(){function e(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),!e||"string"!=typeof e)throw new Error("Expected a string key for Entity, but found "+e+".");var r=n,i=r.idAttribute,o=void 0===i?"id":i,a=r.mergeStrategy,u=void 0===a?function(e,t){return Xu({},e,t)}:a,l=r.processStrategy,c=void 0===l?function(e){return Xu({},e)}:l,s=r.fallbackStrategy,f=void 0===s?function(e,t){}:s;this._key=e,this._getId="function"==typeof o?o:function(e){return function(t){return Zu(t)?t.get(e):t[e]}}(o),this._idAttribute=o,this._mergeStrategy=u,this._processStrategy=c,this._fallbackStrategy=f,this.define(t)}var t=e.prototype;return t.define=function(e){this.schema=Object.keys(e).reduce((function(t,n){var r,i=e[n];return Xu({},t,((r={})[n]=i,r))}),this.schema||{})},t.getId=function(e,t,n){return this._getId(e,t,n)},t.merge=function(e,t){return this._mergeStrategy(e,t)},t.fallback=function(e,t){return this._fallbackStrategy(e,t)},t.normalize=function(e,t,n,r,i,o){var a=this,u=this.getId(e,t,n),l=this.key;if(l in o||(o[l]={}),u in o[l]||(o[l][u]=[]),o[l][u].some((function(t){return t===e})))return u;o[l][u].push(e);var c=this._processStrategy(e,t,n);return Object.keys(this.schema).forEach((function(t){if(c.hasOwnProperty(t)&&"object"==typeof c[t]){var n=a.schema[t],u="function"==typeof n?n(e):n;c[t]=r(c[t],c,t,u,i,o)}})),i(this,c,e,t,n),u},t.denormalize=function(e,t){var n=this;return Zu(e)?el(this.schema,e,t):(Object.keys(this.schema).forEach((function(r){if(e.hasOwnProperty(r)){var i=n.schema[r];e[r]=t(e[r],i)}})),e)},Yu(e,[{key:"key",get:function(){return this._key}},{key:"idAttribute",get:function(){return this._idAttribute}}]),e}(),nl=function(){function e(e,t){t&&(this._schemaAttribute="string"==typeof t?function(e){return e[t]}:t),this.define(e)}var t=e.prototype;return t.define=function(e){this.schema=e},t.getSchemaAttribute=function(e,t,n){return!this.isSingleSchema&&this._schemaAttribute(e,t,n)},t.inferSchema=function(e,t,n){if(this.isSingleSchema)return this.schema;var r=this.getSchemaAttribute(e,t,n);return this.schema[r]},t.normalizeValue=function(e,t,n,r,i,o){var a=this.inferSchema(e,t,n);if(!a)return e;var u=r(e,t,n,a,i,o);return this.isSingleSchema||null==u?u:{id:u,schema:this.getSchemaAttribute(e,t,n)}},t.denormalizeValue=function(e,t){var n=Zu(e)?e.get("schema"):e.schema;return this.isSingleSchema||n?t((this.isSingleSchema?void 0:Zu(e)?e.get("id"):e.id)||e,this.isSingleSchema?this.schema:this.schema[n]):e},Yu(e,[{key:"isSingleSchema",get:function(){return!this._schemaAttribute}}]),e}(),rl=function(e){function t(t,n){if(!n)throw new Error('Expected option "schemaAttribute" not found on UnionSchema.');return e.call(this,t,n)||this}Ju(t,e);var n=t.prototype;return n.normalize=function(e,t,n,r,i,o){return this.normalizeValue(e,t,n,r,i,o)},n.denormalize=function(e,t){return this.denormalizeValue(e,t)},t}(nl),il=function(e){function t(){return e.apply(this,arguments)||this}Ju(t,e);var n=t.prototype;return n.normalize=function(e,t,n,r,i,o){var a=this;return Object.keys(e).reduce((function(t,n,u){var l,c=e[n];return null!=c?Xu({},t,((l={})[n]=a.normalizeValue(c,e,n,r,i,o),l)):t}),{})},n.denormalize=function(e,t){var n=this;return Object.keys(e).reduce((function(r,i){var o,a=e[i];return Xu({},r,((o={})[i]=n.denormalizeValue(a,t),o))}),{})},t}(nl),ol=function(e){return Array.isArray(e)?e:Object.keys(e).map((function(t){return e[t]}))},al=function(e,t,n,r,i,o,a){return e=function(e){if(Array.isArray(e)&&e.length>1)throw new Error("Expected schema definition to be a single schema, but found "+e.length+".");return e[0]}(e),ol(t).map((function(t,u){return i(t,n,r,e,o,a)}))},ul=function(e){function t(){return e.apply(this,arguments)||this}Ju(t,e);var n=t.prototype;return n.normalize=function(e,t,n,r,i,o){var a=this;return ol(e).map((function(e,u){return a.normalizeValue(e,t,n,r,i,o)})).filter((function(e){return null!=e}))},n.denormalize=function(e,t){var n=this;return e&&e.map?e.map((function(e){return n.denormalizeValue(e,t)})):e},t}(nl),ll=function(e,t,n,r,i,o,a){var u=Xu({},t);return Object.keys(e).forEach((function(n){var r=e[n],l="function"==typeof r?r(t):r,c=i(t[n],t,n,l,o,a);null==c?delete u[n]:u[n]=c})),u},cl=function(e,t,n){if(Zu(t))return el(e,t,n);var r=Xu({},t);return Object.keys(e).forEach((function(t){null!=r[t]&&(r[t]=n(r[t],e[t]))})),r},sl=function(){function e(e){this.define(e)}var t=e.prototype;return t.define=function(e){this.schema=Object.keys(e).reduce((function(t,n){var r,i=e[n];return Xu({},t,((r={})[n]=i,r))}),this.schema||{})},t.normalize=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return ll.apply(void 0,[this.schema].concat(t))},t.denormalize=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return cl.apply(void 0,[this.schema].concat(t))},e}(),fl=function e(t,n,r,i,o,a){return"object"==typeof t&&t?"object"!=typeof i||i.normalize&&"function"==typeof i.normalize?i.normalize(t,n,r,e,o,a):(Array.isArray(i)?al:ll)(i,t,n,r,e,o,a):t},pl={Array:ul,Entity:tl,Object:sl,Union:rl,Values:il},dl=function(e,t){if(!e||"object"!=typeof e)throw new Error('Unexpected input given to normalize. Expected type to be "object", found "'+(null===e?"null":typeof e)+'".');var n={},r=function(e){return function(t,n,r,i,o){var a=t.key,u=t.getId(r,i,o);a in e||(e[a]={});var l=e[a][u];e[a][u]=l?t.merge(l,n):n}}(n);return{entities:n,result:fl(e,e,null,t,r,{})}},hl=new pl.Entity("courses");const yl=function(e){return dl(e,[hl]).entities.courses};var ml=[];const vl=JSON.parse('[{"id":"5debd76480edafc8af244228","author":{"id":"5debd764a7c57c7839d722e9","name":{"first":"Poole","last":"Sanders"},"email":"poole.sanders@holberton.nz","picture":"http://placehold.it/32x32","age":25},"context":{"guid":"2d8e40be-1c78-4de0-afc9-fcc147afd4d2","isRead":true,"type":"urgent","value":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt."}},{"id":"5debd764507712e7a1307303","author":{"id":"5debd7648ba8641ce0a34ea4","name":{"first":"Norton","last":"Grimes"},"email":"norton.grimes@holberton.nz","picture":"http://placehold.it/32x32","age":37},"context":{"guid":"cec84b7a-7be4-4af0-b833-f1485433f66e","isRead":false,"type":"urgent","value":"ut labore et dolore magna aliqua. Dignissim convallis aenean et tortor at risus viverra adipiscing. Ac tortor dignissim convallis aenean et. "}},{"id":"5debd76444dd4dafea89d53b","author":{"id":"5debd764a7c57c7839d722e9","name":{"first":"Poole","last":"Sanders"},"email":"poole.sanders@holberton.nz","picture":"http://placehold.it/32x32","age":25},"context":{"guid":"280913fe-38dd-4abd-8ab6-acdb4105f922","isRead":false,"type":"urgent","value":"Non diam phasellus vestibulum lorem sed risus ultricies. Tellus mauris a diam maecenas sed"}},{"id":"5debd76485ee4dfd1284f97b","author":{"id":"5debd764f07f50822352e252","name":{"first":"Roach","last":"Cameron"},"email":"roach.cameron@holberton.nz","picture":"http://placehold.it/32x32","age":26},"context":{"guid":"89906f88-a02d-41ee-b214-daa0c54633e3","isRead":true,"type":"urgent","value":"Odio pellentesque diam volutpat commodo sed egestas egestas"}},{"id":"5debd7644e561e022d66e61a","author":{"id":"5debd764e66586653a8a33f3","name":{"first":"Christy","last":"Collier"},"email":"christy.collier@holberton.nz","picture":"http://placehold.it/32x32","age":27},"context":{"guid":"f8d66cca-63ec-4f19-a422-a3e1c8f05a36","isRead":false,"type":"urgent","value":"In hendrerit gravida rutrum quisque non tellus orci. Gravida dictum fusce ut placerat orci nulla pellentesque dignissim enim. Lorem mollis aliquam ut porttitor"}},{"id":"5debd7644aaed86c97bf9d5e","author":{"id":"5debd764f5017139ce541857","name":{"first":"Mason","last":"Douglas"},"email":"mason.douglas@holberton.nz","picture":"http://placehold.it/32x32","age":31},"context":{"guid":"de55f849-8fca-4ac7-afbb-41751f09d0c6","isRead":false,"type":"default","value":"Cursus metus aliquam eleifend mi in nulla posuere. "}},{"id":"5debd76413f0d5e5429c28a0","author":{"id":"5debd76456a6a030695e6a70","name":{"first":"Marshall","last":"Wynn"},"email":"marshall.wynn@holberton.nz","picture":"http://placehold.it/32x32","age":26},"context":{"guid":"8094c267-ab84-47e1-8801-58ddd23f3b2a","isRead":false,"type":"default","value":"Quam viverra orci sagittis eu volutpat odio facilisis mauris sit"}},{"id":"5debd7642e815cd350407777","author":{"id":"5debd764f8452ef92346c772","name":{"first":"Cherry","last":"Miles"},"email":"cherry.miles@holberton.nz","picture":"http://placehold.it/32x32","age":25},"context":{"guid":"3068c575-d619-40af-bf12-dece1ee18dd3","isRead":true,"type":"default","value":"Est ante in nibh mauris cursus mattis molestie a iaculis. Eget lorem dolor sed viverra ipsum nunc aliquet bibendum enim"}},{"id":"5debd764c1127bc5a490a4d0","author":{"id":"5debd76470dcced4a244fe7f","name":{"first":"Sykes","last":"Fulton"},"email":"sykes.fulton@holberton.nz","picture":"http://placehold.it/32x32","age":36},"context":{"guid":"efb6c485-00f7-4fdf-97cc-5e12d14d6c41","isRead":false,"type":"default","value":"Cursus risus at ultrices mi."}},{"id":"5debd7646ef31e0861ec1cab","author":{"id":"5debd7645c8d811b8c6a235d","name":{"first":"Valentine","last":"Juarez"},"email":"valentine.juarez@holberton.nz","picture":"http://placehold.it/32x32","age":25},"context":{"guid":"1d3918d0-67e6-44a4-9031-72d7750234de","isRead":true,"type":"default","value":"Velit laoreet id donec ultrices tincidunt arcu non. Aliquet eget sit amet tellus cras adipiscing"}},{"id":"5debd764a4f11eabef05a81d","author":{"id":"5debd764d0b0e7ed3e45ee6d","name":{"first":"Maryann","last":"Larson"},"email":"maryann.larson@holberton.nz","picture":"http://placehold.it/32x32","age":32},"context":{"guid":"98fe7af4-8300-461f-a376-c147b2987616","isRead":false,"type":"default","value":"Ac placerat vestibulum lectus mauris ultrices eros in cursus. Amet nisl suscipit adipiscing bibendum est ultricies integer. Lorem donec massa sapien faucibus et molestie ac"}},{"id":"5debd764af0fdd1fc815ad9b","author":{"id":"5debd764fb6db3a5c21ce617","name":{"first":"Naomi","last":"Hayes"},"email":"naomi.hayes@holberton.nz","picture":"http://placehold.it/32x32","age":30},"context":{"guid":"cd1a09cf-ad6e-4478-9662-18a292807e2e","isRead":false,"type":"urgent","value":"Nulla malesuada pellentesque elit eget gravida cum sociis"}},{"id":"5debd76468cb5b277fd125f4","author":{"id":"5debd764f7234e1d44828515","name":{"first":"Knowles","last":"Vazquez"},"email":"knowles.vazquez@holberton.nz","picture":"http://placehold.it/32x32","age":28},"context":{"guid":"0f446b01-37c3-4884-9dc6-316f23b7711b","isRead":false,"type":"urgent","value":"Elit eget gravida cum sociis natoque penatibus et. Congue mauris rhoncus aenean vel"}},{"id":"5debd764de9fa684468cdc0b","author":{"id":"5debd764ec7c8d21449be7d7","name":{"first":"Greta","last":"Benjamin"},"email":"greta.benjamin@holberton.nz","picture":"http://placehold.it/32x32","age":23},"context":{"guid":"4cc5bc3a-98fe-4392-b97d-6a41da1d944b","isRead":false,"type":"default","value":"Leo vel fringilla est ullamcorper. Volutpat consequat mauris nunc congue"}}]');var gl=new pl.Entity("users"),bl=new pl.Entity("messages",{},{idAttribute:"guid"}),_l=new pl.Entity("notifications",{author:gl,context:bl});dl(vl,[_l]);const wl=function(e){return dl(e,[_l]).entities};var Sl={notifications:{},filter:"DEFAULT",loading:!1};var xl={isNotificationDrawerVisible:!1,isUserLoggedIn:!1,user:null};var kl={courses:pa(ml),notifications:pa(Sl),ui:pa(xl)};const El={courses:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:pa(ml),t=arguments.length>1?arguments[1]:void 0;switch(t.type){case _r:var n=yl(t.data);return Object.keys(n).map((function(e){n[e].isSelected=!1})),e.merge(n);case gr:return e.setIn([String(t.index),"isSelected"],!0);case br:return e.setIn([String(t.index),"isSelected"],!1)}return e},notifications:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:pa(Sl),t=arguments.length>1?arguments[1]:void 0;switch(t.type){case oe:var n=wl(t.data);return Object.keys(n.notifications).map((function(e){n.notifications[e].isRead=!1})),e.mergeDeep($u(n));case re:return e.setIn(["messages",String(t.index),"isRead"],!0);case ie:return e.set("filter",t.filter);case ae:return e.set("loading",t.loading)}return e},ui:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:pa(xl),t=arguments.length>1?arguments[1]:void 0;switch(t.type){case Tn:return e.set("isNotificationDrawerVisible",!0);case On:return e.set("isNotificationDrawerVisible",!1);case Cn:return e.set("isUserLoggedIn",!0);case Pn:return e.set("isUserLoggedIn",!1);case kn:return e.set("user",t.user);case En:return e.set("isUserLoggedIn",!1).set("user",null)}return e}};var Tl=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||h,Ol=function e(t,n,r){var i;if("function"==typeof n&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof n&&void 0===r&&(r=n,n=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(e)(t,n)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var a=t,c=n,s=[],f=s,p=!1;function d(){f===s&&(f=s.slice())}function h(){if(p)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function y(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(p)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return d(),f.push(e),function(){if(t){if(p)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,d();var n=f.indexOf(e);f.splice(n,1),s=null}}}function m(e){if(!l(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(p)throw new Error("Reducers may not dispatch actions.");try{p=!0,c=a(c,e)}finally{p=!1}for(var t=s=f,n=0;n<t.length;n++)(0,t[n])();return e}function v(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");a=e,m({type:u.REPLACE})}function g(){var e,t=y;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[o.Z]=function(){return this},e}return m({type:u.INIT}),(i={dispatch:m,subscribe:y,getState:h,replaceReducer:v})[o.Z]=g,i}(function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var i=t[r];"function"==typeof e[i]&&(n[i]=e[i])}var o,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:u.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:u.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+u.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){o=e}return function(e,t){if(void 0===e&&(e={}),o)throw o;for(var r=!1,i={},u=0;u<a.length;u++){var l=a[u],s=n[l],f=e[l],p=s(f,t);if(void 0===p){var d=c(l,t);throw new Error(d)}i[l]=p,r=r||p!==f}return(r=r||a.length!==Object.keys(e).length)?i:e}}(El),kl,Tl(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},i={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},o=t.map((function(e){return e(i)}));return d({},n,{dispatch:r=h.apply(void 0,o)(n.dispatch)})}}}(ne)));i.render(r.createElement(r.StrictMode,null,r.createElement(x,{store:Ol},r.createElement(Kr,null))),document.getElementById("root"))},679:(e,t,n)=>{"use strict";var r=n(864),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||i}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=a;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var i=d(n);i&&i!==h&&e(t,i,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var u=l(t),y=l(n),m=0;m<a.length;++m){var v=a[m];if(!(o[v]||r&&r[v]||y&&y[v]||u&&u[v])){var g=p(n,v);try{c(t,v,g)}catch(e){}}}}return t}},300:(e,t)=>{"use strict";var n=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n)return n;throw new Error("unable to locate global object")}();e.exports=t=n.fetch,n.fetch&&(t.default=n.fetch.bind(n)),t.Headers=n.Headers,t.Request=n.Request,t.Response=n.Response},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,o){for(var a,u,l=i(e),c=1;c<arguments.length;c++){for(var s in a=Object(arguments[c]))n.call(a,s)&&(l[s]=a[s]);if(t){u=t(a);for(var f=0;f<u.length;f++)r.call(a,u[f])&&(l[u[f]]=a[u[f]])}}return l}},703:(e,t,n)=>{"use strict";var r=n(414);function i(){}function o(){}o.resetWarningCache=i,e.exports=function(){function e(e,t,n,i,o,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:i};return n.PropTypes=n,n}},697:(e,t,n)=>{e.exports=n(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},448:(e,t,n)=>{"use strict";var r=n(294),i=n(418),o=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));function u(e,t,n,r,i,o,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var l=!1,c=null,s=!1,f=null,p={onError:function(e){l=!0,c=e}};function d(e,t,n,r,i,o,a,s,f){l=!1,c=null,u.apply(p,arguments)}var h=null,y=null,m=null;function v(e,t,n){var r=e.type||"unknown-event";e.currentTarget=m(n),function(e,t,n,r,i,o,u,p,h){if(d.apply(this,arguments),l){if(!l)throw Error(a(198));var y=c;l=!1,c=null,s||(s=!0,f=y)}}(r,t,void 0,e),e.currentTarget=null}var g=null,b={};function _(){if(g)for(var e in b){var t=b[e],n=g.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!S[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in S[n]=t,n=t.eventTypes){var i=void 0,o=n[r],u=t,l=r;if(x.hasOwnProperty(l))throw Error(a(99,l));x[l]=o;var c=o.phasedRegistrationNames;if(c){for(i in c)c.hasOwnProperty(i)&&w(c[i],u,l);i=!0}else o.registrationName?(w(o.registrationName,u,l),i=!0):i=!1;if(!i)throw Error(a(98,r,e))}}}}function w(e,t,n){if(k[e])throw Error(a(100,e));k[e]=t,E[e]=t.eventTypes[n].dependencies}var S=[],x={},k={},E={};function T(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!b.hasOwnProperty(t)||b[t]!==r){if(b[t])throw Error(a(102,t));b[t]=r,n=!0}}n&&_()}var O=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),C=null,P=null,z=null;function I(e){if(e=y(e)){if("function"!=typeof C)throw Error(a(280));var t=e.stateNode;t&&(t=h(t),C(e.stateNode,e.type,t))}}function N(e){P?z?z.push(e):z=[e]:P=e}function j(){if(P){var e=P,t=z;if(z=P=null,I(e),t)for(e=0;e<t.length;e++)I(t[e])}}function M(e,t){return e(t)}function R(e,t,n,r,i){return e(t,n,r,i)}function D(){}var A=M,L=!1,F=!1;function B(){null===P&&null===z||(D(),j())}function U(e,t,n){if(F)return e(t,n);F=!0;try{return A(e,t,n)}finally{F=!1,B()}}var W=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,q=Object.prototype.hasOwnProperty,H={},V={};function $(e,t,n,r,i,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o}var K={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){K[e]=new $(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];K[t]=new $(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){K[e]=new $(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){K[e]=new $(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){K[e]=new $(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){K[e]=new $(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){K[e]=new $(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){K[e]=new $(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){K[e]=new $(e,5,!1,e.toLowerCase(),null,!1)}));var Q=/[\-:]([a-z])/g;function G(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(Q,G);K[t]=new $(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(Q,G);K[t]=new $(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(Q,G);K[t]=new $(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){K[e]=new $(e,1,!1,e.toLowerCase(),null,!1)})),K.xlinkHref=new $("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){K[e]=new $(e,1,!1,e.toLowerCase(),null,!0)}));var Y=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function X(e,t,n,r){var i=K.hasOwnProperty(t)?K[t]:null;(null!==i?0===i.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!q.call(V,e)||!q.call(H,e)&&(W.test(e)?V[e]=!0:(H[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}Y.hasOwnProperty("ReactCurrentDispatcher")||(Y.ReactCurrentDispatcher={current:null}),Y.hasOwnProperty("ReactCurrentBatchConfig")||(Y.ReactCurrentBatchConfig={suspense:null});var J=/^(.*)[\\\/]/,Z="function"==typeof Symbol&&Symbol.for,ee=Z?Symbol.for("react.element"):60103,te=Z?Symbol.for("react.portal"):60106,ne=Z?Symbol.for("react.fragment"):60107,re=Z?Symbol.for("react.strict_mode"):60108,ie=Z?Symbol.for("react.profiler"):60114,oe=Z?Symbol.for("react.provider"):60109,ae=Z?Symbol.for("react.context"):60110,ue=Z?Symbol.for("react.concurrent_mode"):60111,le=Z?Symbol.for("react.forward_ref"):60112,ce=Z?Symbol.for("react.suspense"):60113,se=Z?Symbol.for("react.suspense_list"):60120,fe=Z?Symbol.for("react.memo"):60115,pe=Z?Symbol.for("react.lazy"):60116,de=Z?Symbol.for("react.block"):60121,he="function"==typeof Symbol&&Symbol.iterator;function ye(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=he&&e[he]||e["@@iterator"])?e:null}function me(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case ie:return"Profiler";case re:return"StrictMode";case ce:return"Suspense";case se:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ae:return"Context.Consumer";case oe:return"Context.Provider";case le:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return me(e.type);case de:return me(e.render);case pe:if(e=1===e._status?e._result:null)return me(e)}return null}function ve(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,i=e._debugSource,o=me(e.type);n=null,r&&(n=me(r.type)),r=o,o="",i?o=" (at "+i.fileName.replace(J,"")+":"+i.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}function ge(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function _e(e){e._valueTracker||(e._valueTracker=function(e){var t=be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function we(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Se(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function xe(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ge(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function ke(e,t){null!=(t=t.checked)&&X(e,"checked",t,!1)}function Ee(e,t){ke(e,t);var n=ge(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&Oe(e,t.type,ge(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Te(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Oe(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Ce(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Pe(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ge(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function ze(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Ie(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ge(n)}}function Ne(e,t){var n=ge(t.value),r=ge(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function je(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function Me(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Re(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Me(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var De,Ae,Le=(Ae=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((De=De||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=De.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return Ae(e,t)}))}:Ae);function Fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Be(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Ue={animationend:Be("Animation","AnimationEnd"),animationiteration:Be("Animation","AnimationIteration"),animationstart:Be("Animation","AnimationStart"),transitionend:Be("Transition","TransitionEnd")},We={},qe={};function He(e){if(We[e])return We[e];if(!Ue[e])return e;var t,n=Ue[e];for(t in n)if(n.hasOwnProperty(t)&&t in qe)return We[e]=n[t];return e}O&&(qe=document.createElement("div").style,"AnimationEvent"in window||(delete Ue.animationend.animation,delete Ue.animationiteration.animation,delete Ue.animationstart.animation),"TransitionEvent"in window||delete Ue.transitionend.transition);var Ve=He("animationend"),$e=He("animationiteration"),Ke=He("animationstart"),Qe=He("transitionend"),Ge="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ye=new("function"==typeof WeakMap?WeakMap:Map);function Xe(e){var t=Ye.get(e);return void 0===t&&(t=new Map,Ye.set(e,t)),t}function Je(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ze(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function et(e){if(Je(e)!==e)throw Error(a(188))}function tt(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Je(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return et(i),e;if(o===r)return et(i),t;o=o.sibling}throw Error(a(188))}if(n.return!==r.return)n=i,r=o;else{for(var u=!1,l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}if(!u){for(l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function nt(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function rt(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var it=null;function ot(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)v(e,t[r],n[r]);else t&&v(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function at(e){if(null!==e&&(it=nt(it,e)),e=it,it=null,e){if(rt(e,ot),it)throw Error(a(95));if(s)throw e=f,s=!1,f=null,e}}function ut(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function lt(e){if(!O)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var ct=[];function st(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>ct.length&&ct.push(e)}function ft(e,t,n,r){if(ct.length){var i=ct.pop();return i.topLevelType=e,i.eventSystemFlags=r,i.nativeEvent=t,i.targetInst=n,i}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Pn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var i=ut(e.nativeEvent);r=e.topLevelType;var o=e.nativeEvent,a=e.eventSystemFlags;0===n&&(a|=64);for(var u=null,l=0;l<S.length;l++){var c=S[l];c&&(c=c.extractEvents(r,t,o,i,a))&&(u=nt(u,c))}at(u)}}function dt(e,t,n){if(!n.has(e)){switch(e){case"scroll":Kt(t,"scroll",!0);break;case"focus":case"blur":Kt(t,"focus",!0),Kt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":lt(e)&&Kt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ge.indexOf(e)&&$t(e,t)}n.set(e,null)}}var ht,yt,mt,vt=!1,gt=[],bt=null,_t=null,wt=null,St=new Map,xt=new Map,kt=[],Et="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Tt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Ot(e,t,n,r,i){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:i,container:r}}function Ct(e,t){switch(e){case"focus":case"blur":bt=null;break;case"dragenter":case"dragleave":_t=null;break;case"mouseover":case"mouseout":wt=null;break;case"pointerover":case"pointerout":St.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":xt.delete(t.pointerId)}}function Pt(e,t,n,r,i,o){return null===e||e.nativeEvent!==o?(e=Ot(t,n,r,i,o),null!==t&&null!==(t=zn(t))&&yt(t),e):(e.eventSystemFlags|=r,e)}function zt(e){var t=Pn(e.target);if(null!==t){var n=Je(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ze(n)))return e.blockedOn=t,void o.unstable_runWithPriority(e.priority,(function(){mt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function It(e){if(null!==e.blockedOn)return!1;var t=Xt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=zn(t);return null!==n&&yt(n),e.blockedOn=t,!1}return!0}function Nt(e,t,n){It(e)&&n.delete(t)}function jt(){for(vt=!1;0<gt.length;){var e=gt[0];if(null!==e.blockedOn){null!==(e=zn(e.blockedOn))&&ht(e);break}var t=Xt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:gt.shift()}null!==bt&&It(bt)&&(bt=null),null!==_t&&It(_t)&&(_t=null),null!==wt&&It(wt)&&(wt=null),St.forEach(Nt),xt.forEach(Nt)}function Mt(e,t){e.blockedOn===t&&(e.blockedOn=null,vt||(vt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,jt)))}function Rt(e){function t(t){return Mt(t,e)}if(0<gt.length){Mt(gt[0],e);for(var n=1;n<gt.length;n++){var r=gt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==bt&&Mt(bt,e),null!==_t&&Mt(_t,e),null!==wt&&Mt(wt,e),St.forEach(t),xt.forEach(t),n=0;n<kt.length;n++)(r=kt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<kt.length&&null===(n=kt[0]).blockedOn;)zt(n),null===n.blockedOn&&kt.shift()}var Dt={},At=new Map,Lt=new Map,Ft=["abort","abort",Ve,"animationEnd",$e,"animationIteration",Ke,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Qe,"transitionEnd","waiting","waiting"];function Bt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],i=e[n+1],o="on"+(i[0].toUpperCase()+i.slice(1));o={phasedRegistrationNames:{bubbled:o,captured:o+"Capture"},dependencies:[r],eventPriority:t},Lt.set(r,t),At.set(r,o),Dt[i]=o}}Bt("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Bt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Bt(Ft,2);for(var Ut="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Wt=0;Wt<Ut.length;Wt++)Lt.set(Ut[Wt],0);var qt=o.unstable_UserBlockingPriority,Ht=o.unstable_runWithPriority,Vt=!0;function $t(e,t){Kt(t,e,!1)}function Kt(e,t,n){var r=Lt.get(t);switch(void 0===r?2:r){case 0:r=Qt.bind(null,t,1,e);break;case 1:r=Gt.bind(null,t,1,e);break;default:r=Yt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Qt(e,t,n,r){L||D();var i=Yt,o=L;L=!0;try{R(i,e,t,n,r)}finally{(L=o)||B()}}function Gt(e,t,n,r){Ht(qt,Yt.bind(null,e,t,n,r))}function Yt(e,t,n,r){if(Vt)if(0<gt.length&&-1<Et.indexOf(e))e=Ot(null,e,t,n,r),gt.push(e);else{var i=Xt(e,t,n,r);if(null===i)Ct(e,r);else if(-1<Et.indexOf(e))e=Ot(i,e,t,n,r),gt.push(e);else if(!function(e,t,n,r,i){switch(t){case"focus":return bt=Pt(bt,e,t,n,r,i),!0;case"dragenter":return _t=Pt(_t,e,t,n,r,i),!0;case"mouseover":return wt=Pt(wt,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return St.set(o,Pt(St.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,xt.set(o,Pt(xt.get(o)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r)){Ct(e,r),e=ft(e,r,null,t);try{U(pt,e)}finally{st(e)}}}}function Xt(e,t,n,r){if(null!==(n=Pn(n=ut(r)))){var i=Je(n);if(null===i)n=null;else{var o=i.tag;if(13===o){if(null!==(n=Ze(i)))return n;n=null}else if(3===o){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;n=null}else i!==n&&(n=null)}}e=ft(e,r,n,t);try{U(pt,e)}finally{st(e)}return null}var Jt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Zt=["Webkit","ms","Moz","O"];function en(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Jt.hasOwnProperty(e)&&Jt[e]?(""+t).trim():t+"px"}function tn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=en(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(Jt).forEach((function(e){Zt.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Jt[t]=Jt[e]}))}));var nn=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function rn(e,t){if(t){if(nn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function on(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var an="http://www.w3.org/1999/xhtml";function un(e,t){var n=Xe(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=E[t];for(var r=0;r<t.length;r++)dt(t[r],e,n)}function ln(){}function cn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function sn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fn(e,t){var n,r=sn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sn(r)}}function pn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?pn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dn(){for(var e=window,t=cn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=cn((e=t.contentWindow).document)}return t}function hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var yn="$?",mn="$!",vn=null,gn=null;function bn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function _n(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var wn="function"==typeof setTimeout?setTimeout:void 0,Sn="function"==typeof clearTimeout?clearTimeout:void 0;function xn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function kn(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||n===mn||n===yn){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var En=Math.random().toString(36).slice(2),Tn="__reactInternalInstance$"+En,On="__reactEventHandlers$"+En,Cn="__reactContainere$"+En;function Pn(e){var t=e[Tn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Cn]||n[Tn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=kn(e);null!==e;){if(n=e[Tn])return n;e=kn(e)}return t}n=(e=n).parentNode}return null}function zn(e){return!(e=e[Tn]||e[Cn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function In(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function Nn(e){return e[On]||null}function jn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Mn(e,t){var n=e.stateNode;if(!n)return null;var r=h(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}function Rn(e,t,n){(t=Mn(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=nt(n._dispatchListeners,t),n._dispatchInstances=nt(n._dispatchInstances,e))}function Dn(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=jn(t);for(t=n.length;0<t--;)Rn(n[t],"captured",e);for(t=0;t<n.length;t++)Rn(n[t],"bubbled",e)}}function An(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=Mn(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=nt(n._dispatchListeners,t),n._dispatchInstances=nt(n._dispatchInstances,e))}function Ln(e){e&&e.dispatchConfig.registrationName&&An(e._targetInst,null,e)}function Fn(e){rt(e,Dn)}var Bn=null,Un=null,Wn=null;function qn(){if(Wn)return Wn;var e,t,n=Un,r=n.length,i="value"in Bn?Bn.value:Bn.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return Wn=i.slice(e,1<t?1-t:void 0)}function Hn(){return!0}function Vn(){return!1}function $n(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Hn:Vn,this.isPropagationStopped=Vn,this}function Kn(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function Qn(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Gn(e){e.eventPool=[],e.getPooled=Kn,e.release=Qn}i($n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Hn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Hn)},persist:function(){this.isPersistent=Hn},isPersistent:Vn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Vn,this._dispatchInstances=this._dispatchListeners=null}}),$n.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},$n.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,Gn(n),n},Gn($n);var Yn=$n.extend({data:null}),Xn=$n.extend({data:null}),Jn=[9,13,27,32],Zn=O&&"CompositionEvent"in window,er=null;O&&"documentMode"in document&&(er=document.documentMode);var tr=O&&"TextEvent"in window&&!er,nr=O&&(!Zn||er&&8<er&&11>=er),rr=String.fromCharCode(32),ir={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},or=!1;function ar(e,t){switch(e){case"keyup":return-1!==Jn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ur(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var lr=!1,cr={eventTypes:ir,extractEvents:function(e,t,n,r){var i;if(Zn)e:{switch(e){case"compositionstart":var o=ir.compositionStart;break e;case"compositionend":o=ir.compositionEnd;break e;case"compositionupdate":o=ir.compositionUpdate;break e}o=void 0}else lr?ar(e,n)&&(o=ir.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=ir.compositionStart);return o?(nr&&"ko"!==n.locale&&(lr||o!==ir.compositionStart?o===ir.compositionEnd&&lr&&(i=qn()):(Un="value"in(Bn=r)?Bn.value:Bn.textContent,lr=!0)),o=Yn.getPooled(o,t,n,r),(i||null!==(i=ur(n)))&&(o.data=i),Fn(o),i=o):i=null,(e=tr?function(e,t){switch(e){case"compositionend":return ur(t);case"keypress":return 32!==t.which?null:(or=!0,rr);case"textInput":return(e=t.data)===rr&&or?null:e;default:return null}}(e,n):function(e,t){if(lr)return"compositionend"===e||!Zn&&ar(e,t)?(e=qn(),Wn=Un=Bn=null,lr=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return nr&&"ko"!==t.locale?null:t.data}}(e,n))?((t=Xn.getPooled(ir.beforeInput,t,n,r)).data=e,Fn(t)):t=null,null===i?t:null===t?i:[i,t]}},sr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function fr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!sr[e.type]:"textarea"===t}var pr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function dr(e,t,n){return(e=$n.getPooled(pr.change,e,t,n)).type="change",N(n),Fn(e),e}var hr=null,yr=null;function mr(e){at(e)}function vr(e){if(we(In(e)))return e}function gr(e,t){if("change"===e)return t}var br=!1;function _r(){hr&&(hr.detachEvent("onpropertychange",wr),yr=hr=null)}function wr(e){if("value"===e.propertyName&&vr(yr))if(e=dr(yr,e,ut(e)),L)at(e);else{L=!0;try{M(mr,e)}finally{L=!1,B()}}}function Sr(e,t,n){"focus"===e?(_r(),yr=n,(hr=t).attachEvent("onpropertychange",wr)):"blur"===e&&_r()}function xr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return vr(yr)}function kr(e,t){if("click"===e)return vr(t)}function Er(e,t){if("input"===e||"change"===e)return vr(t)}O&&(br=lt("input")&&(!document.documentMode||9<document.documentMode));var Tr={eventTypes:pr,_isInputEventSupported:br,extractEvents:function(e,t,n,r){var i=t?In(t):window,o=i.nodeName&&i.nodeName.toLowerCase();if("select"===o||"input"===o&&"file"===i.type)var a=gr;else if(fr(i))if(br)a=Er;else{a=xr;var u=Sr}else(o=i.nodeName)&&"input"===o.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(a=kr);if(a&&(a=a(e,t)))return dr(a,n,r);u&&u(e,i,t),"blur"===e&&(e=i._wrapperState)&&e.controlled&&"number"===i.type&&Oe(i,"number",i.value)}},Or=$n.extend({view:null,detail:null}),Cr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cr[e])&&!!t[e]}function zr(){return Pr}var Ir=0,Nr=0,jr=!1,Mr=!1,Rr=Or.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:zr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Ir;return Ir=e.screenX,jr?"mousemove"===e.type?e.screenX-t:0:(jr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Nr;return Nr=e.screenY,Mr?"mousemove"===e.type?e.screenY-t:0:(Mr=!0,0)}}),Dr=Rr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Ar={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Lr={eventTypes:Ar,extractEvents:function(e,t,n,r,i){var o="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(o&&0==(32&i)&&(n.relatedTarget||n.fromElement)||!a&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?Pn(t):null)&&(t!==Je(t)||5!==t.tag&&6!==t.tag)&&(t=null)):a=null,a===t)return null;if("mouseout"===e||"mouseover"===e)var u=Rr,l=Ar.mouseLeave,c=Ar.mouseEnter,s="mouse";else"pointerout"!==e&&"pointerover"!==e||(u=Dr,l=Ar.pointerLeave,c=Ar.pointerEnter,s="pointer");if(e=null==a?o:In(a),o=null==t?o:In(t),(l=u.getPooled(l,a,n,r)).type=s+"leave",l.target=e,l.relatedTarget=o,(n=u.getPooled(c,t,n,r)).type=s+"enter",n.target=o,n.relatedTarget=e,s=t,(r=a)&&s)e:{for(c=s,a=0,e=u=r;e;e=jn(e))a++;for(e=0,t=c;t;t=jn(t))e++;for(;0<a-e;)u=jn(u),a--;for(;0<e-a;)c=jn(c),e--;for(;a--;){if(u===c||u===c.alternate)break e;u=jn(u),c=jn(c)}u=null}else u=null;for(c=u,u=[];r&&r!==c&&(null===(a=r.alternate)||a!==c);)u.push(r),r=jn(r);for(r=[];s&&s!==c&&(null===(a=s.alternate)||a!==c);)r.push(s),s=jn(s);for(s=0;s<u.length;s++)An(u[s],"bubbled",l);for(s=r.length;0<s--;)An(r[s],"captured",n);return 0==(64&i)?[l]:[l,n]}},Fr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Br=Object.prototype.hasOwnProperty;function Ur(e,t){if(Fr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Br.call(t,n[r])||!Fr(e[n[r]],t[n[r]]))return!1;return!0}var Wr=O&&"documentMode"in document&&11>=document.documentMode,qr={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Hr=null,Vr=null,$r=null,Kr=!1;function Qr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Kr||null==Hr||Hr!==cn(n)?null:(n="selectionStart"in(n=Hr)&&hn(n)?{start:n.selectionStart,end:n.selectionEnd}:{anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},$r&&Ur($r,n)?null:($r=n,(e=$n.getPooled(qr.select,Vr,e,t)).type="select",e.target=Hr,Fn(e),e))}var Gr={eventTypes:qr,extractEvents:function(e,t,n,r,i,o){if(!(o=!(i=o||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{i=Xe(i),o=E.onSelect;for(var a=0;a<o.length;a++)if(!i.has(o[a])){i=!1;break e}i=!0}o=!i}if(o)return null;switch(i=t?In(t):window,e){case"focus":(fr(i)||"true"===i.contentEditable)&&(Hr=i,Vr=t,$r=null);break;case"blur":$r=Vr=Hr=null;break;case"mousedown":Kr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Kr=!1,Qr(n,r);case"selectionchange":if(Wr)break;case"keydown":case"keyup":return Qr(n,r)}return null}},Yr=$n.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Xr=$n.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Jr=Or.extend({relatedTarget:null});function Zr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var ei={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},ti={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ni=Or.extend({key:function(e){if(e.key){var t=ei[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Zr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?ti[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:zr,charCode:function(e){return"keypress"===e.type?Zr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Zr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ri=Rr.extend({dataTransfer:null}),ii=Or.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:zr}),oi=$n.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ai=Rr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),ui={eventTypes:Dt,extractEvents:function(e,t,n,r){var i=At.get(e);if(!i)return null;switch(e){case"keypress":if(0===Zr(n))return null;case"keydown":case"keyup":e=ni;break;case"blur":case"focus":e=Jr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Rr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=ri;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=ii;break;case Ve:case $e:case Ke:e=Yr;break;case Qe:e=oi;break;case"scroll":e=Or;break;case"wheel":e=ai;break;case"copy":case"cut":case"paste":e=Xr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Dr;break;default:e=$n}return Fn(t=e.getPooled(i,t,n,r)),t}};if(g)throw Error(a(101));g=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),_(),h=Nn,y=zn,m=In,T({SimpleEventPlugin:ui,EnterLeaveEventPlugin:Lr,ChangeEventPlugin:Tr,SelectEventPlugin:Gr,BeforeInputEventPlugin:cr});var li=[],ci=-1;function si(e){0>ci||(e.current=li[ci],li[ci]=null,ci--)}function fi(e,t){ci++,li[ci]=e.current,e.current=t}var pi={},di={current:pi},hi={current:!1},yi=pi;function mi(e,t){var n=e.type.contextTypes;if(!n)return pi;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function vi(e){return null!=e.childContextTypes}function gi(){si(hi),si(di)}function bi(e,t,n){if(di.current!==pi)throw Error(a(168));fi(di,t),fi(hi,n)}function _i(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(a(108,me(t)||"Unknown",o));return i({},n,{},r)}function wi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||pi,yi=di.current,fi(di,e),fi(hi,hi.current),!0}function Si(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=_i(e,t,yi),r.__reactInternalMemoizedMergedChildContext=e,si(hi),si(di),fi(di,e)):si(hi),fi(hi,n)}var xi=o.unstable_runWithPriority,ki=o.unstable_scheduleCallback,Ei=o.unstable_cancelCallback,Ti=o.unstable_requestPaint,Oi=o.unstable_now,Ci=o.unstable_getCurrentPriorityLevel,Pi=o.unstable_ImmediatePriority,zi=o.unstable_UserBlockingPriority,Ii=o.unstable_NormalPriority,Ni=o.unstable_LowPriority,ji=o.unstable_IdlePriority,Mi={},Ri=o.unstable_shouldYield,Di=void 0!==Ti?Ti:function(){},Ai=null,Li=null,Fi=!1,Bi=Oi(),Ui=1e4>Bi?Oi:function(){return Oi()-Bi};function Wi(){switch(Ci()){case Pi:return 99;case zi:return 98;case Ii:return 97;case Ni:return 96;case ji:return 95;default:throw Error(a(332))}}function qi(e){switch(e){case 99:return Pi;case 98:return zi;case 97:return Ii;case 96:return Ni;case 95:return ji;default:throw Error(a(332))}}function Hi(e,t){return e=qi(e),xi(e,t)}function Vi(e,t,n){return e=qi(e),ki(e,t,n)}function $i(e){return null===Ai?(Ai=[e],Li=ki(Pi,Qi)):Ai.push(e),Mi}function Ki(){if(null!==Li){var e=Li;Li=null,Ei(e)}Qi()}function Qi(){if(!Fi&&null!==Ai){Fi=!0;var e=0;try{var t=Ai;Hi(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Ai=null}catch(t){throw null!==Ai&&(Ai=Ai.slice(e+1)),ki(Pi,Ki),t}finally{Fi=!1}}}function Gi(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Yi(e,t){if(e&&e.defaultProps)for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Xi={current:null},Ji=null,Zi=null,eo=null;function to(){eo=Zi=Ji=null}function no(e){var t=Xi.current;si(Xi),e.type._context._currentValue=t}function ro(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function io(e,t){Ji=e,eo=Zi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Na=!0),e.firstContext=null)}function oo(e,t){if(eo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(eo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Zi){if(null===Ji)throw Error(a(308));Zi=t,Ji.dependencies={expirationTime:0,firstContext:t,responders:null}}else Zi=Zi.next=t;return e._currentValue}var ao=!1;function uo(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function lo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function co(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function so(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function fo(e,t){var n=e.alternate;null!==n&&lo(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function po(e,t,n,r){var o=e.updateQueue;ao=!1;var a=o.baseQueue,u=o.shared.pending;if(null!==u){if(null!==a){var l=a.next;a.next=u.next,u.next=l}a=u,o.shared.pending=null,null!==(l=e.alternate)&&null!==(l=l.updateQueue)&&(l.baseQueue=u)}if(null!==a){l=a.next;var c=o.baseState,s=0,f=null,p=null,d=null;if(null!==l)for(var h=l;;){if((u=h.expirationTime)<r){var y={expirationTime:h.expirationTime,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null};null===d?(p=d=y,f=c):d=d.next=y,u>s&&(s=u)}else{null!==d&&(d=d.next={expirationTime:1073741823,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null}),cl(u,h.suspenseConfig);e:{var m=e,v=h;switch(u=t,y=n,v.tag){case 1:if("function"==typeof(m=v.payload)){c=m.call(y,c,u);break e}c=m;break e;case 3:m.effectTag=-4097&m.effectTag|64;case 0:if(null==(u="function"==typeof(m=v.payload)?m.call(y,c,u):m))break e;c=i({},c,u);break e;case 2:ao=!0}}null!==h.callback&&(e.effectTag|=32,null===(u=o.effects)?o.effects=[h]:u.push(h))}if(null===(h=h.next)||h===l){if(null===(u=o.shared.pending))break;h=a.next=u.next,u.next=l,o.baseQueue=a=u,o.shared.pending=null}}null===d?f=c:d.next=p,o.baseState=f,o.baseQueue=d,sl(s),e.expirationTime=s,e.memoizedState=c}}function ho(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=i,i=n,"function"!=typeof r)throw Error(a(191,r));r.call(i)}}}var yo=Y.ReactCurrentBatchConfig,mo=(new r.Component).refs;function vo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var go={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Je(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Yu(),i=yo.suspense;(i=co(r=Xu(r,e,i),i)).payload=t,null!=n&&(i.callback=n),so(e,i),Ju(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Yu(),i=yo.suspense;(i=co(r=Xu(r,e,i),i)).tag=1,i.payload=t,null!=n&&(i.callback=n),so(e,i),Ju(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Yu(),r=yo.suspense;(r=co(n=Xu(n,e,r),r)).tag=2,null!=t&&(r.callback=t),so(e,r),Ju(e,n)}};function bo(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!(t.prototype&&t.prototype.isPureReactComponent&&Ur(n,r)&&Ur(i,o))}function _o(e,t,n){var r=!1,i=pi,o=t.contextType;return"object"==typeof o&&null!==o?o=oo(o):(i=vi(t)?yi:di.current,o=(r=null!=(r=t.contextTypes))?mi(e,i):pi),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=go,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function wo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&go.enqueueReplaceState(t,t.state,null)}function So(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=mo,uo(e);var o=t.contextType;"object"==typeof o&&null!==o?i.context=oo(o):(o=vi(t)?yi:di.current,i.context=mi(e,o)),po(e,n,i,r),i.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(vo(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&go.enqueueReplaceState(i,i.state,null),po(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.effectTag|=4)}var xo=Array.isArray;function ko(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=r.refs;t===mo&&(t=r.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Eo(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function To(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=zl(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=jl(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=ko(e,t,n),r.return=e,r):((r=Il(n.type,n.key,n.props,null,e.mode,r)).ref=ko(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ml(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Nl(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=jl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Il(t.type,t.key,t.props,null,e.mode,n)).ref=ko(e,null,t),n.return=e,n;case te:return(t=Ml(t,e.mode,n)).return=e,t}if(xo(t)||ye(t))return(t=Nl(t,e.mode,n,null)).return=e,t;Eo(e,t)}return null}function d(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===i?n.type===ne?f(e,t,n.props.children,r,i):c(e,t,n,r):null;case te:return n.key===i?s(e,t,n,r):null}if(xo(n)||ye(n))return null!==i?null:f(e,t,n,r,null);Eo(e,n)}return null}function h(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,i,r.key):c(t,e,r,i);case te:return s(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(xo(r)||ye(r))return f(t,e=e.get(n)||null,r,i,null);Eo(t,r)}return null}function y(i,a,u,l){for(var c=null,s=null,f=a,y=a=0,m=null;null!==f&&y<u.length;y++){f.index>y?(m=f,f=null):m=f.sibling;var v=d(i,f,u[y],l);if(null===v){null===f&&(f=m);break}e&&f&&null===v.alternate&&t(i,f),a=o(v,a,y),null===s?c=v:s.sibling=v,s=v,f=m}if(y===u.length)return n(i,f),c;if(null===f){for(;y<u.length;y++)null!==(f=p(i,u[y],l))&&(a=o(f,a,y),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(i,f);y<u.length;y++)null!==(m=h(f,i,y,u[y],l))&&(e&&null!==m.alternate&&f.delete(null===m.key?y:m.key),a=o(m,a,y),null===s?c=m:s.sibling=m,s=m);return e&&f.forEach((function(e){return t(i,e)})),c}function m(i,u,l,c){var s=ye(l);if("function"!=typeof s)throw Error(a(150));if(null==(l=s.call(l)))throw Error(a(151));for(var f=s=null,y=u,m=u=0,v=null,g=l.next();null!==y&&!g.done;m++,g=l.next()){y.index>m?(v=y,y=null):v=y.sibling;var b=d(i,y,g.value,c);if(null===b){null===y&&(y=v);break}e&&y&&null===b.alternate&&t(i,y),u=o(b,u,m),null===f?s=b:f.sibling=b,f=b,y=v}if(g.done)return n(i,y),s;if(null===y){for(;!g.done;m++,g=l.next())null!==(g=p(i,g.value,c))&&(u=o(g,u,m),null===f?s=g:f.sibling=g,f=g);return s}for(y=r(i,y);!g.done;m++,g=l.next())null!==(g=h(y,i,m,g.value,c))&&(e&&null!==g.alternate&&y.delete(null===g.key?m:g.key),u=o(g,u,m),null===f?s=g:f.sibling=g,f=g);return e&&y.forEach((function(e){return t(i,e)})),s}return function(e,r,o,l){var c="object"==typeof o&&null!==o&&o.type===ne&&null===o.key;c&&(o=o.props.children);var s="object"==typeof o&&null!==o;if(s)switch(o.$$typeof){case ee:e:{for(s=o.key,c=r;null!==c;){if(c.key===s){if(7===c.tag){if(o.type===ne){n(e,c.sibling),(r=i(c,o.props.children)).return=e,e=r;break e}}else if(c.elementType===o.type){n(e,c.sibling),(r=i(c,o.props)).ref=ko(e,c,o),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}o.type===ne?((r=Nl(o.props.children,e.mode,l,o.key)).return=e,e=r):((l=Il(o.type,o.key,o.props,null,e.mode,l)).ref=ko(e,r,o),l.return=e,e=l)}return u(e);case te:e:{for(c=o.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Ml(o,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=jl(o,e.mode,l)).return=e,e=r),u(e);if(xo(o))return y(e,r,o,l);if(ye(o))return m(e,r,o,l);if(s&&Eo(e,o),void 0===o&&!c)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Oo=To(!0),Co=To(!1),Po={},zo={current:Po},Io={current:Po},No={current:Po};function jo(e){if(e===Po)throw Error(a(174));return e}function Mo(e,t){switch(fi(No,t),fi(Io,e),fi(zo,Po),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Re(null,"");break;default:t=Re(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}si(zo),fi(zo,t)}function Ro(){si(zo),si(Io),si(No)}function Do(e){jo(No.current);var t=jo(zo.current),n=Re(t,e.type);t!==n&&(fi(Io,e),fi(zo,n))}function Ao(e){Io.current===e&&(si(zo),si(Io))}var Lo={current:0};function Fo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||n.data===yn||n.data===mn))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Bo(e,t){return{responder:e,props:t}}var Uo=Y.ReactCurrentDispatcher,Wo=Y.ReactCurrentBatchConfig,qo=0,Ho=null,Vo=null,$o=null,Ko=!1;function Qo(){throw Error(a(321))}function Go(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Fr(e[n],t[n]))return!1;return!0}function Yo(e,t,n,r,i,o){if(qo=o,Ho=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Uo.current=null===e||null===e.memoizedState?ba:_a,e=n(r,i),t.expirationTime===qo){o=0;do{if(t.expirationTime=0,!(25>o))throw Error(a(301));o+=1,$o=Vo=null,t.updateQueue=null,Uo.current=wa,e=n(r,i)}while(t.expirationTime===qo)}if(Uo.current=ga,t=null!==Vo&&null!==Vo.next,qo=0,$o=Vo=Ho=null,Ko=!1,t)throw Error(a(300));return e}function Xo(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===$o?Ho.memoizedState=$o=e:$o=$o.next=e,$o}function Jo(){if(null===Vo){var e=Ho.alternate;e=null!==e?e.memoizedState:null}else e=Vo.next;var t=null===$o?Ho.memoizedState:$o.next;if(null!==t)$o=t,Vo=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Vo=e).memoizedState,baseState:Vo.baseState,baseQueue:Vo.baseQueue,queue:Vo.queue,next:null},null===$o?Ho.memoizedState=$o=e:$o=$o.next=e}return $o}function Zo(e,t){return"function"==typeof t?t(e):t}function ea(e){var t=Jo(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Vo,i=r.baseQueue,o=n.pending;if(null!==o){if(null!==i){var u=i.next;i.next=o.next,o.next=u}r.baseQueue=i=o,n.pending=null}if(null!==i){i=i.next,r=r.baseState;var l=u=o=null,c=i;do{var s=c.expirationTime;if(s<qo){var f={expirationTime:c.expirationTime,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(u=l=f,o=r):l=l.next=f,s>Ho.expirationTime&&(Ho.expirationTime=s,sl(s))}else null!==l&&(l=l.next={expirationTime:1073741823,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),cl(s,c.suspenseConfig),r=c.eagerReducer===e?c.eagerState:e(r,c.action);c=c.next}while(null!==c&&c!==i);null===l?o=r:l.next=u,Fr(r,t.memoizedState)||(Na=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function ta(e){var t=Jo(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,o=t.memoizedState;if(null!==i){n.pending=null;var u=i=i.next;do{o=e(o,u.action),u=u.next}while(u!==i);Fr(o,t.memoizedState)||(Na=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function na(e){var t=Xo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Zo,lastRenderedState:e}).dispatch=va.bind(null,Ho,e),[t.memoizedState,e]}function ra(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ho.updateQueue)?(t={lastEffect:null},Ho.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ia(){return Jo().memoizedState}function oa(e,t,n,r){var i=Xo();Ho.effectTag|=e,i.memoizedState=ra(1|t,n,void 0,void 0===r?null:r)}function aa(e,t,n,r){var i=Jo();r=void 0===r?null:r;var o=void 0;if(null!==Vo){var a=Vo.memoizedState;if(o=a.destroy,null!==r&&Go(r,a.deps))return void ra(t,n,o,r)}Ho.effectTag|=e,i.memoizedState=ra(1|t,n,o,r)}function ua(e,t){return oa(516,4,e,t)}function la(e,t){return aa(516,4,e,t)}function ca(e,t){return aa(4,2,e,t)}function sa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function fa(e,t,n){return n=null!=n?n.concat([e]):null,aa(4,2,sa.bind(null,t,e),n)}function pa(){}function da(e,t){return Xo().memoizedState=[e,void 0===t?null:t],e}function ha(e,t){var n=Jo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Go(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function ya(e,t){var n=Jo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Go(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function ma(e,t,n){var r=Wi();Hi(98>r?98:r,(function(){e(!0)})),Hi(97<r?97:r,(function(){var r=Wo.suspense;Wo.suspense=void 0===t?null:t;try{e(!1),n()}finally{Wo.suspense=r}}))}function va(e,t,n){var r=Yu(),i=yo.suspense;i={expirationTime:r=Xu(r,e,i),suspenseConfig:i,action:n,eagerReducer:null,eagerState:null,next:null};var o=t.pending;if(null===o?i.next=i:(i.next=o.next,o.next=i),t.pending=i,o=e.alternate,e===Ho||null!==o&&o===Ho)Ko=!0,i.expirationTime=qo,Ho.expirationTime=qo;else{if(0===e.expirationTime&&(null===o||0===o.expirationTime)&&null!==(o=t.lastRenderedReducer))try{var a=t.lastRenderedState,u=o(a,n);if(i.eagerReducer=o,i.eagerState=u,Fr(u,a))return}catch(e){}Ju(e,r)}}var ga={readContext:oo,useCallback:Qo,useContext:Qo,useEffect:Qo,useImperativeHandle:Qo,useLayoutEffect:Qo,useMemo:Qo,useReducer:Qo,useRef:Qo,useState:Qo,useDebugValue:Qo,useResponder:Qo,useDeferredValue:Qo,useTransition:Qo},ba={readContext:oo,useCallback:da,useContext:oo,useEffect:ua,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,oa(4,2,sa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return oa(4,2,e,t)},useMemo:function(e,t){var n=Xo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Xo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=va.bind(null,Ho,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Xo().memoizedState=e},useState:na,useDebugValue:pa,useResponder:Bo,useDeferredValue:function(e,t){var n=na(e),r=n[0],i=n[1];return ua((function(){var n=Wo.suspense;Wo.suspense=void 0===t?null:t;try{i(e)}finally{Wo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=na(!1),n=t[0];return t=t[1],[da(ma.bind(null,t,e),[t,e]),n]}},_a={readContext:oo,useCallback:ha,useContext:oo,useEffect:la,useImperativeHandle:fa,useLayoutEffect:ca,useMemo:ya,useReducer:ea,useRef:ia,useState:function(){return ea(Zo)},useDebugValue:pa,useResponder:Bo,useDeferredValue:function(e,t){var n=ea(Zo),r=n[0],i=n[1];return la((function(){var n=Wo.suspense;Wo.suspense=void 0===t?null:t;try{i(e)}finally{Wo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ea(Zo),n=t[0];return t=t[1],[ha(ma.bind(null,t,e),[t,e]),n]}},wa={readContext:oo,useCallback:ha,useContext:oo,useEffect:la,useImperativeHandle:fa,useLayoutEffect:ca,useMemo:ya,useReducer:ta,useRef:ia,useState:function(){return ta(Zo)},useDebugValue:pa,useResponder:Bo,useDeferredValue:function(e,t){var n=ta(Zo),r=n[0],i=n[1];return la((function(){var n=Wo.suspense;Wo.suspense=void 0===t?null:t;try{i(e)}finally{Wo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ta(Zo),n=t[0];return t=t[1],[ha(ma.bind(null,t,e),[t,e]),n]}},Sa=null,xa=null,ka=!1;function Ea(e,t){var n=Cl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ta(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Oa(e){if(ka){var t=xa;if(t){var n=t;if(!Ta(e,t)){if(!(t=xn(n.nextSibling))||!Ta(e,t))return e.effectTag=-1025&e.effectTag|2,ka=!1,void(Sa=e);Ea(Sa,n)}Sa=e,xa=xn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,ka=!1,Sa=e}}function Ca(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Sa=e}function Pa(e){if(e!==Sa)return!1;if(!ka)return Ca(e),ka=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!_n(t,e.memoizedProps))for(t=xa;t;)Ea(e,t),t=xn(t.nextSibling);if(Ca(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){xa=xn(e.nextSibling);break e}t--}else"$"!==n&&n!==mn&&n!==yn||t++}e=e.nextSibling}xa=null}}else xa=Sa?xn(e.stateNode.nextSibling):null;return!0}function za(){xa=Sa=null,ka=!1}var Ia=Y.ReactCurrentOwner,Na=!1;function ja(e,t,n,r){t.child=null===e?Co(t,null,n,r):Oo(t,e.child,n,r)}function Ma(e,t,n,r,i){n=n.render;var o=t.ref;return io(t,i),r=Yo(e,t,n,r,o,i),null===e||Na?(t.effectTag|=1,ja(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Ya(e,t,i))}function Ra(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!=typeof a||Pl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Il(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Da(e,t,a,r,i,o))}return a=e.child,i<o&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:Ur)(i,r)&&e.ref===t.ref)?Ya(e,t,o):(t.effectTag|=1,(e=zl(a,r)).ref=t.ref,e.return=t,t.child=e)}function Da(e,t,n,r,i,o){return null!==e&&Ur(e.memoizedProps,r)&&e.ref===t.ref&&(Na=!1,i<o)?(t.expirationTime=e.expirationTime,Ya(e,t,o)):La(e,t,n,r,o)}function Aa(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function La(e,t,n,r,i){var o=vi(n)?yi:di.current;return o=mi(t,o),io(t,i),n=Yo(e,t,n,r,o,i),null===e||Na?(t.effectTag|=1,ja(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Ya(e,t,i))}function Fa(e,t,n,r,i){if(vi(n)){var o=!0;wi(t)}else o=!1;if(io(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),_o(t,n,r),So(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,c=n.contextType;c="object"==typeof c&&null!==c?oo(c):mi(t,c=vi(n)?yi:di.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&wo(t,a,r,c),ao=!1;var p=t.memoizedState;a.state=p,po(t,r,a,i),l=t.memoizedState,u!==r||p!==l||hi.current||ao?("function"==typeof s&&(vo(t,n,s,r),l=t.memoizedState),(u=ao||bo(t,n,u,r,p,l,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,lo(e,t),u=t.memoizedProps,a.props=t.type===t.elementType?u:Yi(t.type,u),l=a.context,c="object"==typeof(c=n.contextType)&&null!==c?oo(c):mi(t,c=vi(n)?yi:di.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&wo(t,a,r,c),ao=!1,l=t.memoizedState,a.state=l,po(t,r,a,i),p=t.memoizedState,u!==r||l!==p||hi.current||ao?("function"==typeof s&&(vo(t,n,s,r),p=t.memoizedState),(s=ao||bo(t,n,u,r,l,p,c))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,c)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=c,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return Ba(e,t,n,r,o,i)}function Ba(e,t,n,r,i,o){Aa(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return i&&Si(t,n,!1),Ya(e,t,o);r=t.stateNode,Ia.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Oo(t,e.child,null,o),t.child=Oo(t,null,u,o)):ja(e,t,u,o),t.memoizedState=r.state,i&&Si(t,n,!0),t.child}function Ua(e){var t=e.stateNode;t.pendingContext?bi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bi(0,t.context,!1),Mo(e,t.containerInfo)}var Wa,qa,Ha,Va={dehydrated:null,retryTime:0};function $a(e,t,n){var r,i=t.mode,o=t.pendingProps,a=Lo.current,u=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(u=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),fi(Lo,1&a),null===e){if(void 0!==o.fallback&&Oa(t),u){if(u=o.fallback,(o=Nl(null,i,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Nl(u,i,n,null)).return=t,o.sibling=n,t.memoizedState=Va,t.child=o,n}return i=o.children,t.memoizedState=null,t.child=Co(t,null,i,n)}if(null!==e.memoizedState){if(i=(e=e.child).sibling,u){if(o=o.fallback,(n=zl(e,e.pendingProps)).return=t,0==(2&t.mode)&&(u=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=u;null!==u;)u.return=n,u=u.sibling;return(i=zl(i,o)).return=t,n.sibling=i,n.childExpirationTime=0,t.memoizedState=Va,t.child=n,i}return n=Oo(t,e.child,o.children,n),t.memoizedState=null,t.child=n}if(e=e.child,u){if(u=o.fallback,(o=Nl(null,i,0,null)).return=t,o.child=e,null!==e&&(e.return=o),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Nl(u,i,n,null)).return=t,o.sibling=n,n.effectTag|=2,o.childExpirationTime=0,t.memoizedState=Va,t.child=o,n}return t.memoizedState=null,t.child=Oo(t,e,o.children,n)}function Ka(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ro(e.return,t)}function Qa(e,t,n,r,i,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:i,lastEffect:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=i,a.lastEffect=o)}function Ga(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(ja(e,t,r.children,n),0!=(2&(r=Lo.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ka(e,n);else if(19===e.tag)Ka(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(fi(Lo,r),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===Fo(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Qa(t,!1,i,n,o,t.lastEffect);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===Fo(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}Qa(t,!0,n,null,o,t.lastEffect);break;case"together":Qa(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ya(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&sl(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=zl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=zl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Xa(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ja(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return vi(t.type)&&gi(),null;case 3:return Ro(),si(hi),si(di),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Pa(t)||(t.effectTag|=4),null;case 5:Ao(t),n=jo(No.current);var o=t.type;if(null!==e&&null!=t.stateNode)qa(e,t,o,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=jo(zo.current),Pa(t)){r=t.stateNode,o=t.type;var u=t.memoizedProps;switch(r[Tn]=t,r[On]=u,o){case"iframe":case"object":case"embed":$t("load",r);break;case"video":case"audio":for(e=0;e<Ge.length;e++)$t(Ge[e],r);break;case"source":$t("error",r);break;case"img":case"image":case"link":$t("error",r),$t("load",r);break;case"form":$t("reset",r),$t("submit",r);break;case"details":$t("toggle",r);break;case"input":xe(r,u),$t("invalid",r),un(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!u.multiple},$t("invalid",r),un(n,"onChange");break;case"textarea":Ie(r,u),$t("invalid",r),un(n,"onChange")}for(var l in rn(o,u),e=null,u)if(u.hasOwnProperty(l)){var c=u[l];"children"===l?"string"==typeof c?r.textContent!==c&&(e=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(e=["children",""+c]):k.hasOwnProperty(l)&&null!=c&&un(n,l)}switch(o){case"input":_e(r),Te(r,u,!0);break;case"textarea":_e(r),je(r);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(r.onclick=ln)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(l=9===n.nodeType?n:n.ownerDocument,e===an&&(e=Me(o)),e===an?"script"===o?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(o,{is:r.is}):(e=l.createElement(o),"select"===o&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,o),e[Tn]=t,e[On]=r,Wa(e,t),t.stateNode=e,l=on(o,r),o){case"iframe":case"object":case"embed":$t("load",e),c=r;break;case"video":case"audio":for(c=0;c<Ge.length;c++)$t(Ge[c],e);c=r;break;case"source":$t("error",e),c=r;break;case"img":case"image":case"link":$t("error",e),$t("load",e),c=r;break;case"form":$t("reset",e),$t("submit",e),c=r;break;case"details":$t("toggle",e),c=r;break;case"input":xe(e,r),c=Se(e,r),$t("invalid",e),un(n,"onChange");break;case"option":c=Ce(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},c=i({},r,{value:void 0}),$t("invalid",e),un(n,"onChange");break;case"textarea":Ie(e,r),c=ze(e,r),$t("invalid",e),un(n,"onChange");break;default:c=r}rn(o,c);var s=c;for(u in s)if(s.hasOwnProperty(u)){var f=s[u];"style"===u?tn(e,f):"dangerouslySetInnerHTML"===u?null!=(f=f?f.__html:void 0)&&Le(e,f):"children"===u?"string"==typeof f?("textarea"!==o||""!==f)&&Fe(e,f):"number"==typeof f&&Fe(e,""+f):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(k.hasOwnProperty(u)?null!=f&&un(n,u):null!=f&&X(e,u,f,l))}switch(o){case"input":_e(e),Te(e,r,!1);break;case"textarea":_e(e),je(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ge(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Pe(e,!!r.multiple,n,!1):null!=r.defaultValue&&Pe(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof c.onClick&&(e.onclick=ln)}bn(o,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Ha(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=jo(No.current),jo(zo.current),Pa(t)?(n=t.stateNode,r=t.memoizedProps,n[Tn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Tn]=t,t.stateNode=n)}return null;case 13:return si(Lo),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Pa(t):(r=null!==(o=e.memoizedState),n||null===o||null!==(o=e.child.sibling)&&(null!==(u=t.firstEffect)?(t.firstEffect=o,o.nextEffect=u):(t.firstEffect=t.lastEffect=o,o.nextEffect=null),o.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Lo.current)?Iu===ku&&(Iu=Eu):(Iu!==ku&&Iu!==Eu||(Iu=Tu),0!==Du&&null!==Cu&&(Al(Cu,zu),Ll(Cu,Du)))),(n||r)&&(t.effectTag|=4),null);case 4:return Ro(),null;case 10:return no(t),null;case 19:if(si(Lo),null===(r=t.memoizedState))return null;if(o=0!=(64&t.effectTag),null===(u=r.rendering)){if(o)Xa(r,!1);else if(Iu!==ku||null!==e&&0!=(64&e.effectTag))for(u=t.child;null!==u;){if(null!==(e=Fo(u))){for(t.effectTag|=64,Xa(r,!1),null!==(o=e.updateQueue)&&(t.updateQueue=o,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)u=n,(o=r).effectTag&=2,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null,null===(e=o.alternate)?(o.childExpirationTime=0,o.expirationTime=u,o.child=null,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null):(o.childExpirationTime=e.childExpirationTime,o.expirationTime=e.expirationTime,o.child=e.child,o.memoizedProps=e.memoizedProps,o.memoizedState=e.memoizedState,o.updateQueue=e.updateQueue,u=e.dependencies,o.dependencies=null===u?null:{expirationTime:u.expirationTime,firstContext:u.firstContext,responders:u.responders}),r=r.sibling;return fi(Lo,1&Lo.current|2),t.child}u=u.sibling}}else{if(!o)if(null!==(e=Fo(u))){if(t.effectTag|=64,o=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Xa(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Ui()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,o=!0,Xa(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Ui()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Ui(),n.sibling=null,t=Lo.current,fi(Lo,o?1&t|2:1&t),n):null}throw Error(a(156,t.tag))}function Za(e){switch(e.tag){case 1:vi(e.type)&&gi();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Ro(),si(hi),si(di),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return Ao(e),null;case 13:return si(Lo),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return si(Lo),null;case 4:return Ro(),null;case 10:return no(e),null;default:return null}}function eu(e,t){return{value:e,source:t,stack:ve(t)}}Wa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},qa=function(e,t,n,r,o){var a=e.memoizedProps;if(a!==r){var u,l,c=t.stateNode;switch(jo(zo.current),e=null,n){case"input":a=Se(c,a),r=Se(c,r),e=[];break;case"option":a=Ce(c,a),r=Ce(c,r),e=[];break;case"select":a=i({},a,{value:void 0}),r=i({},r,{value:void 0}),e=[];break;case"textarea":a=ze(c,a),r=ze(c,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(c.onclick=ln)}for(u in rn(n,r),n=null,a)if(!r.hasOwnProperty(u)&&a.hasOwnProperty(u)&&null!=a[u])if("style"===u)for(l in c=a[u])c.hasOwnProperty(l)&&(n||(n={}),n[l]="");else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(k.hasOwnProperty(u)?e||(e=[]):(e=e||[]).push(u,null));for(u in r){var s=r[u];if(c=null!=a?a[u]:void 0,r.hasOwnProperty(u)&&s!==c&&(null!=s||null!=c))if("style"===u)if(c){for(l in c)!c.hasOwnProperty(l)||s&&s.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in s)s.hasOwnProperty(l)&&c[l]!==s[l]&&(n||(n={}),n[l]=s[l])}else n||(e||(e=[]),e.push(u,n)),n=s;else"dangerouslySetInnerHTML"===u?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(u,s)):"children"===u?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(u,""+s):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(k.hasOwnProperty(u)?(null!=s&&un(o,u),e||c===s||(e=[])):(e=e||[]).push(u,s))}n&&(e=e||[]).push("style",n),o=e,(t.updateQueue=o)&&(t.effectTag|=4)}},Ha=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var tu="function"==typeof WeakSet?WeakSet:Set;function nu(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ve(n)),null!==n&&me(n.type),t=t.value,null!==e&&1===e.tag&&me(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function ru(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Sl(e,t)}else t.current=null}function iu(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 3:case 5:case 6:case 4:case 17:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Yi(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return}throw Error(a(163))}function ou(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function au(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function uu(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void au(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Yi(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&ho(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}ho(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&bn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Rt(n)))))}throw Error(a(163))}function lu(e,t,n){switch("function"==typeof Tl&&Tl(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Hi(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var i=t;try{n()}catch(e){Sl(i,e)}}e=e.next}while(e!==r)}))}break;case 1:ru(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Sl(e,t)}}(t,n);break;case 5:ru(t);break;case 4:hu(e,t,n)}}function cu(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&cu(t)}function su(e){return 5===e.tag||3===e.tag||4===e.tag}function fu(e){e:{for(var t=e.return;null!==t;){if(su(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(Fe(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||su(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?pu(e,n,t):du(e,n,t)}function pu(e,t,n){var r=e.tag,i=5===r||6===r;if(i)e=i?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=ln));else if(4!==r&&null!==(e=e.child))for(pu(e,t,n),e=e.sibling;null!==e;)pu(e,t,n),e=e.sibling}function du(e,t,n){var r=e.tag,i=5===r||6===r;if(i)e=i?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(du(e,t,n),e=e.sibling;null!==e;)du(e,t,n),e=e.sibling}function hu(e,t,n){for(var r,i,o=t,u=!1;;){if(!u){u=o.return;e:for(;;){if(null===u)throw Error(a(160));switch(r=u.stateNode,u.tag){case 5:i=!1;break e;case 3:case 4:r=r.containerInfo,i=!0;break e}u=u.return}u=!0}if(5===o.tag||6===o.tag){e:for(var l=e,c=o,s=n,f=c;;)if(lu(l,f,s),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===c)break e;for(;null===f.sibling;){if(null===f.return||f.return===c)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}i?(l=r,c=o.stateNode,8===l.nodeType?l.parentNode.removeChild(c):l.removeChild(c)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,i=!0,o.child.return=o,o=o.child;continue}}else if(lu(e,o,n),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(u=!1)}o.sibling.return=o.return,o=o.sibling}}function yu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void ou(3,t);case 1:case 12:case 17:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,i=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[On]=r,"input"===e&&"radio"===r.type&&null!=r.name&&ke(n,r),on(e,i),t=on(e,r),i=0;i<o.length;i+=2){var u=o[i],l=o[i+1];"style"===u?tn(n,l):"dangerouslySetInnerHTML"===u?Le(n,l):"children"===u?Fe(n,l):X(n,u,l,t)}switch(e){case"input":Ee(n,r);break;case"textarea":Ne(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Pe(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Pe(n,!!r.multiple,r.defaultValue,!0):Pe(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Rt(t.containerInfo)));case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Lu=Ui()),null!==n)e:for(e=n;;){if(5===e.tag)o=e.stateNode,r?"function"==typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none":(o=e.stateNode,i=null!=(i=e.memoizedProps.style)&&i.hasOwnProperty("display")?i.display:null,o.style.display=en("display",i));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(o=e.child.sibling).return=e,e=o;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void mu(t);case 19:return void mu(t)}throw Error(a(163))}function mu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new tu),t.forEach((function(t){var r=kl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var vu="function"==typeof WeakMap?WeakMap:Map;function gu(e,t,n){(n=co(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Bu||(Bu=!0,Uu=r),nu(e,t)},n}function bu(e,t,n){(n=co(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return nu(e,t),r(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Wu?Wu=new Set([this]):Wu.add(this),nu(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var _u,wu=Math.ceil,Su=Y.ReactCurrentDispatcher,xu=Y.ReactCurrentOwner,ku=0,Eu=3,Tu=4,Ou=0,Cu=null,Pu=null,zu=0,Iu=ku,Nu=null,ju=1073741823,Mu=1073741823,Ru=null,Du=0,Au=!1,Lu=0,Fu=null,Bu=!1,Uu=null,Wu=null,qu=!1,Hu=null,Vu=90,$u=null,Ku=0,Qu=null,Gu=0;function Yu(){return 0!=(48&Ou)?1073741821-(Ui()/10|0):0!==Gu?Gu:Gu=1073741821-(Ui()/10|0)}function Xu(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Wi();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&Ou))return zu;if(null!==n)e=Gi(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Gi(e,150,100);break;case 97:case 96:e=Gi(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==Cu&&e===zu&&--e,e}function Ju(e,t){if(50<Ku)throw Ku=0,Qu=null,Error(a(185));if(null!==(e=Zu(e,t))){var n=Wi();1073741823===t?0!=(8&Ou)&&0==(48&Ou)?rl(e):(tl(e),0===Ou&&Ki()):tl(e),0==(4&Ou)||98!==n&&99!==n||(null===$u?$u=new Map([[e,t]]):(void 0===(n=$u.get(e))||n>t)&&$u.set(e,t))}}function Zu(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,i=null;if(null===r&&3===e.tag)i=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){i=r.stateNode;break}r=r.return}return null!==i&&(Cu===i&&(sl(t),Iu===Tu&&Al(i,zu)),Ll(i,t)),i}function el(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Dl(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function tl(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=$i(rl.bind(null,e));else{var t=el(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=Yu();if(r=1073741823===t?99:1===t||2===t?95:0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var i=e.callbackPriority;if(e.callbackExpirationTime===t&&i>=r)return;n!==Mi&&Ei(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?$i(rl.bind(null,e)):Vi(r,nl.bind(null,e),{timeout:10*(1073741821-t)-Ui()}),e.callbackNode=t}}}function nl(e,t){if(Gu=0,t)return Fl(e,t=Yu()),tl(e),null;var n=el(e);if(0!==n){if(t=e.callbackNode,0!=(48&Ou))throw Error(a(327));if(bl(),e===Cu&&n===zu||al(e,n),null!==Pu){var r=Ou;Ou|=16;for(var i=ll();;)try{pl();break}catch(t){ul(e,t)}if(to(),Ou=r,Su.current=i,1===Iu)throw t=Nu,al(e,n),Al(e,n),tl(e),t;if(null===Pu)switch(i=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Iu,Cu=null,r){case ku:case 1:throw Error(a(345));case 2:Fl(e,2<n?2:n);break;case Eu:if(Al(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=yl(i)),1073741823===ju&&10<(i=Lu+500-Ui())){if(Au){var o=e.lastPingedTime;if(0===o||o>=n){e.lastPingedTime=n,al(e,n);break}}if(0!==(o=el(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=wn(ml.bind(null,e),i);break}ml(e);break;case Tu:if(Al(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=yl(i)),Au&&(0===(i=e.lastPingedTime)||i>=n)){e.lastPingedTime=n,al(e,n);break}if(0!==(i=el(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Mu?r=10*(1073741821-Mu)-Ui():1073741823===ju?r=0:(r=10*(1073741821-ju)-5e3,0>(r=(i=Ui())-r)&&(r=0),(n=10*(1073741821-n)-i)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*wu(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=wn(ml.bind(null,e),r);break}ml(e);break;case 5:if(1073741823!==ju&&null!==Ru){o=ju;var u=Ru;if(0>=(r=0|u.busyMinDurationMs)?r=0:(i=0|u.busyDelayMs,r=(o=Ui()-(10*(1073741821-o)-(0|u.timeoutMs||5e3)))<=i?0:i+r-o),10<r){Al(e,n),e.timeoutHandle=wn(ml.bind(null,e),r);break}}ml(e);break;default:throw Error(a(329))}if(tl(e),e.callbackNode===t)return nl.bind(null,e)}}return null}function rl(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&Ou))throw Error(a(327));if(bl(),e===Cu&&t===zu||al(e,t),null!==Pu){var n=Ou;Ou|=16;for(var r=ll();;)try{fl();break}catch(t){ul(e,t)}if(to(),Ou=n,Su.current=r,1===Iu)throw n=Nu,al(e,t),Al(e,t),tl(e),n;if(null!==Pu)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Cu=null,ml(e),tl(e)}return null}function il(e,t){var n=Ou;Ou|=1;try{return e(t)}finally{0===(Ou=n)&&Ki()}}function ol(e,t){var n=Ou;Ou&=-2,Ou|=8;try{return e(t)}finally{0===(Ou=n)&&Ki()}}function al(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Sn(n)),null!==Pu)for(n=Pu.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&gi();break;case 3:Ro(),si(hi),si(di);break;case 5:Ao(r);break;case 4:Ro();break;case 13:case 19:si(Lo);break;case 10:no(r)}n=n.return}Cu=e,Pu=zl(e.current,null),zu=t,Iu=ku,Nu=null,Mu=ju=1073741823,Ru=null,Du=0,Au=!1}function ul(e,t){for(;;){try{if(to(),Uo.current=ga,Ko)for(var n=Ho.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(qo=0,$o=Vo=Ho=null,Ko=!1,null===Pu||null===Pu.return)return Iu=1,Nu=t,Pu=null;e:{var i=e,o=Pu.return,a=Pu,u=t;if(t=zu,a.effectTag|=2048,a.firstEffect=a.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var l=u;if(0==(2&a.mode)){var c=a.alternate;c?(a.updateQueue=c.updateQueue,a.memoizedState=c.memoizedState,a.expirationTime=c.expirationTime):(a.updateQueue=null,a.memoizedState=null)}var s=0!=(1&Lo.current),f=o;do{var p;if(p=13===f.tag){var d=f.memoizedState;if(null!==d)p=null!==d.dehydrated;else{var h=f.memoizedProps;p=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!s)}}if(p){var y=f.updateQueue;if(null===y){var m=new Set;m.add(l),f.updateQueue=m}else y.add(l);if(0==(2&f.mode)){if(f.effectTag|=64,a.effectTag&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var v=co(1073741823,null);v.tag=2,so(a,v)}a.expirationTime=1073741823;break e}u=void 0,a=t;var g=i.pingCache;if(null===g?(g=i.pingCache=new vu,u=new Set,g.set(l,u)):void 0===(u=g.get(l))&&(u=new Set,g.set(l,u)),!u.has(a)){u.add(a);var b=xl.bind(null,i,l,a);l.then(b,b)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);u=Error((me(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ve(a))}5!==Iu&&(Iu=2),u=eu(u,a),f=o;do{switch(f.tag){case 3:l=u,f.effectTag|=4096,f.expirationTime=t,fo(f,gu(f,l,t));break e;case 1:l=u;var _=f.type,w=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof _.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===Wu||!Wu.has(w)))){f.effectTag|=4096,f.expirationTime=t,fo(f,bu(f,l,t));break e}}f=f.return}while(null!==f)}Pu=hl(Pu)}catch(e){t=e;continue}break}}function ll(){var e=Su.current;return Su.current=ga,null===e?ga:e}function cl(e,t){e<ju&&2<e&&(ju=e),null!==t&&e<Mu&&2<e&&(Mu=e,Ru=t)}function sl(e){e>Du&&(Du=e)}function fl(){for(;null!==Pu;)Pu=dl(Pu)}function pl(){for(;null!==Pu&&!Ri();)Pu=dl(Pu)}function dl(e){var t=_u(e.alternate,e,zu);return e.memoizedProps=e.pendingProps,null===t&&(t=hl(e)),xu.current=null,t}function hl(e){Pu=e;do{var t=Pu.alternate;if(e=Pu.return,0==(2048&Pu.effectTag)){if(t=Ja(t,Pu,zu),1===zu||1!==Pu.childExpirationTime){for(var n=0,r=Pu.child;null!==r;){var i=r.expirationTime,o=r.childExpirationTime;i>n&&(n=i),o>n&&(n=o),r=r.sibling}Pu.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Pu.firstEffect),null!==Pu.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Pu.firstEffect),e.lastEffect=Pu.lastEffect),1<Pu.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Pu:e.firstEffect=Pu,e.lastEffect=Pu))}else{if(null!==(t=Za(Pu)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Pu.sibling))return t;Pu=e}while(null!==Pu);return Iu===ku&&(Iu=5),null}function yl(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function ml(e){var t=Wi();return Hi(99,vl.bind(null,e,t)),null}function vl(e,t){do{bl()}while(null!==Hu);if(0!=(48&Ou))throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var i=yl(n);if(e.firstPendingTime=i,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Cu&&(Pu=Cu=null,zu=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){var o=Ou;Ou|=32,xu.current=null,vn=Vt;var u=dn();if(hn(u)){if("selectionStart"in u)var l={start:u.selectionStart,end:u.selectionEnd};else e:{var c=(l=(l=u.ownerDocument)&&l.defaultView||window).getSelection&&l.getSelection();if(c&&0!==c.rangeCount){l=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{l.nodeType,f.nodeType}catch(e){l=null;break e}var p=0,d=-1,h=-1,y=0,m=0,v=u,g=null;t:for(;;){for(var b;v!==l||0!==s&&3!==v.nodeType||(d=p+s),v!==f||0!==c&&3!==v.nodeType||(h=p+c),3===v.nodeType&&(p+=v.nodeValue.length),null!==(b=v.firstChild);)g=v,v=b;for(;;){if(v===u)break t;if(g===l&&++y===s&&(d=p),g===f&&++m===c&&(h=p),null!==(b=v.nextSibling))break;g=(v=g).parentNode}v=b}l=-1===d||-1===h?null:{start:d,end:h}}else l=null}l=l||{start:0,end:0}}else l=null;gn={activeElementDetached:null,focusedElem:u,selectionRange:l},Vt=!1,Fu=i;do{try{gl()}catch(e){if(null===Fu)throw Error(a(330));Sl(Fu,e),Fu=Fu.nextEffect}}while(null!==Fu);Fu=i;do{try{for(u=e,l=t;null!==Fu;){var _=Fu.effectTag;if(16&_&&Fe(Fu.stateNode,""),128&_){var w=Fu.alternate;if(null!==w){var S=w.ref;null!==S&&("function"==typeof S?S(null):S.current=null)}}switch(1038&_){case 2:fu(Fu),Fu.effectTag&=-3;break;case 6:fu(Fu),Fu.effectTag&=-3,yu(Fu.alternate,Fu);break;case 1024:Fu.effectTag&=-1025;break;case 1028:Fu.effectTag&=-1025,yu(Fu.alternate,Fu);break;case 4:yu(Fu.alternate,Fu);break;case 8:hu(u,s=Fu,l),cu(s)}Fu=Fu.nextEffect}}catch(e){if(null===Fu)throw Error(a(330));Sl(Fu,e),Fu=Fu.nextEffect}}while(null!==Fu);if(S=gn,w=dn(),_=S.focusedElem,l=S.selectionRange,w!==_&&_&&_.ownerDocument&&pn(_.ownerDocument.documentElement,_)){null!==l&&hn(_)&&(w=l.start,void 0===(S=l.end)&&(S=w),"selectionStart"in _?(_.selectionStart=w,_.selectionEnd=Math.min(S,_.value.length)):(S=(w=_.ownerDocument||document)&&w.defaultView||window).getSelection&&(S=S.getSelection(),s=_.textContent.length,u=Math.min(l.start,s),l=void 0===l.end?u:Math.min(l.end,s),!S.extend&&u>l&&(s=l,l=u,u=s),s=fn(_,u),f=fn(_,l),s&&f&&(1!==S.rangeCount||S.anchorNode!==s.node||S.anchorOffset!==s.offset||S.focusNode!==f.node||S.focusOffset!==f.offset)&&((w=w.createRange()).setStart(s.node,s.offset),S.removeAllRanges(),u>l?(S.addRange(w),S.extend(f.node,f.offset)):(w.setEnd(f.node,f.offset),S.addRange(w))))),w=[];for(S=_;S=S.parentNode;)1===S.nodeType&&w.push({element:S,left:S.scrollLeft,top:S.scrollTop});for("function"==typeof _.focus&&_.focus(),_=0;_<w.length;_++)(S=w[_]).element.scrollLeft=S.left,S.element.scrollTop=S.top}Vt=!!vn,gn=vn=null,e.current=n,Fu=i;do{try{for(_=e;null!==Fu;){var x=Fu.effectTag;if(36&x&&uu(_,Fu.alternate,Fu),128&x){w=void 0;var k=Fu.ref;if(null!==k){var E=Fu.stateNode;Fu.tag,w=E,"function"==typeof k?k(w):k.current=w}}Fu=Fu.nextEffect}}catch(e){if(null===Fu)throw Error(a(330));Sl(Fu,e),Fu=Fu.nextEffect}}while(null!==Fu);Fu=null,Di(),Ou=o}else e.current=n;if(qu)qu=!1,Hu=e,Vu=t;else for(Fu=i;null!==Fu;)t=Fu.nextEffect,Fu.nextEffect=null,Fu=t;if(0===(t=e.firstPendingTime)&&(Wu=null),1073741823===t?e===Qu?Ku++:(Ku=0,Qu=e):Ku=0,"function"==typeof El&&El(n.stateNode,r),tl(e),Bu)throw Bu=!1,e=Uu,Uu=null,e;return 0!=(8&Ou)||Ki(),null}function gl(){for(;null!==Fu;){var e=Fu.effectTag;0!=(256&e)&&iu(Fu.alternate,Fu),0==(512&e)||qu||(qu=!0,Vi(97,(function(){return bl(),null}))),Fu=Fu.nextEffect}}function bl(){if(90!==Vu){var e=97<Vu?97:Vu;return Vu=90,Hi(e,_l)}}function _l(){if(null===Hu)return!1;var e=Hu;if(Hu=null,0!=(48&Ou))throw Error(a(331));var t=Ou;for(Ou|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:ou(5,n),au(5,n)}}catch(t){if(null===e)throw Error(a(330));Sl(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Ou=t,Ki(),!0}function wl(e,t,n){so(e,t=gu(e,t=eu(n,t),1073741823)),null!==(e=Zu(e,1073741823))&&tl(e)}function Sl(e,t){if(3===e.tag)wl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){wl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Wu||!Wu.has(r))){so(n,e=bu(n,e=eu(t,e),1073741823)),null!==(n=Zu(n,1073741823))&&tl(n);break}}n=n.return}}function xl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Cu===e&&zu===n?Iu===Tu||Iu===Eu&&1073741823===ju&&Ui()-Lu<500?al(e,zu):Au=!0:Dl(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,tl(e)))}function kl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(t=Xu(t=Yu(),e,null)),null!==(e=Zu(e,t))&&tl(e)}_u=function(e,t,n){var r=t.expirationTime;if(null!==e){var i=t.pendingProps;if(e.memoizedProps!==i||hi.current)Na=!0;else{if(r<n){switch(Na=!1,t.tag){case 3:Ua(t),za();break;case 5:if(Do(t),4&t.mode&&1!==n&&i.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:vi(t.type)&&wi(t);break;case 4:Mo(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,i=t.type._context,fi(Xi,i._currentValue),i._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?$a(e,t,n):(fi(Lo,1&Lo.current),null!==(t=Ya(e,t,n))?t.sibling:null);fi(Lo,1&Lo.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Ga(e,t,n);t.effectTag|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null),fi(Lo,Lo.current),!r)return null}return Ya(e,t,n)}Na=!1}}else Na=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,i=mi(t,di.current),io(t,n),i=Yo(null,t,r,e,i,n),t.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,vi(r)){var o=!0;wi(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,uo(t);var u=r.getDerivedStateFromProps;"function"==typeof u&&vo(t,r,u,e),i.updater=go,t.stateNode=i,i._reactInternalFiber=t,So(t,r,e,n),t=Ba(null,t,r,!0,o,n)}else t.tag=0,ja(null,t,i,n),t=t.child;return t;case 16:e:{if(i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(i),1!==i._status)throw i._result;switch(i=i._result,t.type=i,o=t.tag=function(e){if("function"==typeof e)return Pl(e)?1:0;if(null!=e){if((e=e.$$typeof)===le)return 11;if(e===fe)return 14}return 2}(i),e=Yi(i,e),o){case 0:t=La(null,t,i,e,n);break e;case 1:t=Fa(null,t,i,e,n);break e;case 11:t=Ma(null,t,i,e,n);break e;case 14:t=Ra(null,t,i,Yi(i.type,e),r,n);break e}throw Error(a(306,i,""))}return t;case 0:return r=t.type,i=t.pendingProps,La(e,t,r,i=t.elementType===r?i:Yi(r,i),n);case 1:return r=t.type,i=t.pendingProps,Fa(e,t,r,i=t.elementType===r?i:Yi(r,i),n);case 3:if(Ua(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,i=null!==(i=t.memoizedState)?i.element:null,lo(e,t),po(t,r,null,n),(r=t.memoizedState.element)===i)za(),t=Ya(e,t,n);else{if((i=t.stateNode.hydrate)&&(xa=xn(t.stateNode.containerInfo.firstChild),Sa=t,i=ka=!0),i)for(n=Co(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else ja(e,t,r,n),za();t=t.child}return t;case 5:return Do(t),null===e&&Oa(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,u=i.children,_n(r,i)?u=null:null!==o&&_n(r,o)&&(t.effectTag|=16),Aa(e,t),4&t.mode&&1!==n&&i.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(ja(e,t,u,n),t=t.child),t;case 6:return null===e&&Oa(t),null;case 13:return $a(e,t,n);case 4:return Mo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Oo(t,null,r,n):ja(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Ma(e,t,r,i=t.elementType===r?i:Yi(r,i),n);case 7:return ja(e,t,t.pendingProps,n),t.child;case 8:case 12:return ja(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,i=t.pendingProps,u=t.memoizedProps,o=i.value;var l=t.type._context;if(fi(Xi,l._currentValue),l._currentValue=o,null!==u)if(l=u.value,0==(o=Fr(l,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,o):1073741823))){if(u.children===i.children&&!hi.current){t=Ya(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){u=l.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&o)){1===l.tag&&((s=co(n,null)).tag=2,so(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),ro(l.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}ja(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,io(t,n),r=r(i=oo(i,o.unstable_observedBits)),t.effectTag|=1,ja(e,t,r,n),t.child;case 14:return o=Yi(i=t.type,t.pendingProps),Ra(e,t,i,o=Yi(i.type,o),r,n);case 15:return Da(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Yi(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,vi(r)?(e=!0,wi(t)):e=!1,io(t,n),_o(t,r,i),So(t,r,i,n),Ba(null,t,r,!0,e,n);case 19:return Ga(e,t,n)}throw Error(a(156,t.tag))};var El=null,Tl=null;function Ol(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Cl(e,t,n,r){return new Ol(e,t,n,r)}function Pl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function zl(e,t){var n=e.alternate;return null===n?((n=Cl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Il(e,t,n,r,i,o){var u=2;if(r=e,"function"==typeof e)Pl(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case ne:return Nl(n.children,i,o,t);case ue:u=8,i|=7;break;case re:u=8,i|=1;break;case ie:return(e=Cl(12,n,t,8|i)).elementType=ie,e.type=ie,e.expirationTime=o,e;case ce:return(e=Cl(13,n,t,i)).type=ce,e.elementType=ce,e.expirationTime=o,e;case se:return(e=Cl(19,n,t,i)).elementType=se,e.expirationTime=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case oe:u=10;break e;case ae:u=9;break e;case le:u=11;break e;case fe:u=14;break e;case pe:u=16,r=null;break e;case de:u=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Cl(u,n,t,i)).elementType=e,t.type=r,t.expirationTime=o,t}function Nl(e,t,n,r){return(e=Cl(7,e,r,t)).expirationTime=n,e}function jl(e,t,n){return(e=Cl(6,e,null,t)).expirationTime=n,e}function Ml(e,t,n){return(t=Cl(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Rl(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Dl(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Al(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Ll(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Fl(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Bl(e,t,n,r){var i=t.current,o=Yu(),u=yo.suspense;o=Xu(o,i,u);e:if(n){t:{if(Je(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(vi(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var c=n.type;if(vi(c)){n=_i(n,c,l);break e}}n=l}else n=pi;return null===t.context?t.context=n:t.pendingContext=n,(t=co(o,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),so(i,t),Ju(i,o),o}function Ul(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Wl(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function ql(e,t){Wl(e,t),(e=e.alternate)&&Wl(e,t)}function Hl(e,t,n){var r=new Rl(e,t,n=null!=n&&!0===n.hydrate),i=Cl(3,null,null,2===t?7:1===t?3:0);r.current=i,i.stateNode=r,uo(i),e[Cn]=r.current,n&&0!==t&&function(e,t){var n=Xe(t);Et.forEach((function(e){dt(e,t,n)})),Tt.forEach((function(e){dt(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Vl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function $l(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof i){var u=i;i=function(){var e=Ul(a);u.call(e)}}Bl(t,a,e,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Hl(e,0,t?{hydrate:!0}:void 0)}(n,r),a=o._internalRoot,"function"==typeof i){var l=i;i=function(){var e=Ul(a);l.call(e)}}ol((function(){Bl(t,a,e,i)}))}return Ul(a)}function Kl(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Ql(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Vl(t))throw Error(a(200));return Kl(e,t,null,n)}Hl.prototype.render=function(e){Bl(e,this._internalRoot,null,null)},Hl.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Bl(null,e,null,(function(){t[Cn]=null}))},ht=function(e){if(13===e.tag){var t=Gi(Yu(),150,100);Ju(e,t),ql(e,t)}},yt=function(e){13===e.tag&&(Ju(e,3),ql(e,3))},mt=function(e){if(13===e.tag){var t=Yu();Ju(e,t=Xu(t,e,null)),ql(e,t)}},C=function(e,t,n){switch(t){case"input":if(Ee(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=Nn(r);if(!i)throw Error(a(90));we(r),Ee(r,i)}}}break;case"textarea":Ne(e,n);break;case"select":null!=(t=n.value)&&Pe(e,!!n.multiple,t,!1)}},M=il,R=function(e,t,n,r,i){var o=Ou;Ou|=4;try{return Hi(98,e.bind(null,t,n,r,i))}finally{0===(Ou=o)&&Ki()}},D=function(){0==(49&Ou)&&(function(){if(null!==$u){var e=$u;$u=null,e.forEach((function(e,t){Fl(t,e),tl(t)})),Ki()}}(),bl())},A=function(e,t){var n=Ou;Ou|=2;try{return e(t)}finally{0===(Ou=n)&&Ki()}};var Gl={Events:[zn,In,Nn,T,x,Fn,function(e){rt(e,Ln)},N,j,Yt,at,bl,{current:!1}]};!function(e){var t=e.findFiberByHostInstance;!function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);El=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Tl=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(i({},e,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Y.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=tt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}))}({findFiberByHostInstance:Pn,bundleType:0,version:"16.14.0",rendererPackageName:"react-dom"}),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Gl,t.createPortal=Ql,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return null===(e=tt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&Ou))throw Error(a(187));var n=Ou;Ou|=1;try{return Hi(99,e.bind(null,t))}finally{Ou=n,Ki()}},t.hydrate=function(e,t,n){if(!Vl(t))throw Error(a(200));return $l(null,e,t,!0,n)},t.render=function(e,t,n){if(!Vl(t))throw Error(a(200));return $l(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Vl(e))throw Error(a(40));return!!e._reactRootContainer&&(ol((function(){$l(null,null,e,!1,(function(){e._reactRootContainer=null,e[Cn]=null}))})),!0)},t.unstable_batchedUpdates=il,t.unstable_createPortal=function(e,t){return Ql(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Vl(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return $l(e,t,n,!1,r)},t.version="16.14.0"},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,i=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,s=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,p=n?Symbol.for("react.forward_ref"):60112,d=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,y=n?Symbol.for("react.memo"):60115,m=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,_=n?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case s:case f:case o:case u:case a:case d:return e;default:switch(e=e&&e.$$typeof){case c:case p:case m:case y:case l:return e;default:return t}}case i:return t}}}function S(e){return w(e)===f}t.AsyncMode=s,t.ConcurrentMode=f,t.ContextConsumer=c,t.ContextProvider=l,t.Element=r,t.ForwardRef=p,t.Fragment=o,t.Lazy=m,t.Memo=y,t.Portal=i,t.Profiler=u,t.StrictMode=a,t.Suspense=d,t.isAsyncMode=function(e){return S(e)||w(e)===s},t.isConcurrentMode=S,t.isContextConsumer=function(e){return w(e)===c},t.isContextProvider=function(e){return w(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return w(e)===p},t.isFragment=function(e){return w(e)===o},t.isLazy=function(e){return w(e)===m},t.isMemo=function(e){return w(e)===y},t.isPortal=function(e){return w(e)===i},t.isProfiler=function(e){return w(e)===u},t.isStrictMode=function(e){return w(e)===a},t.isSuspense=function(e){return w(e)===d},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===f||e===u||e===a||e===d||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===y||e.$$typeof===l||e.$$typeof===c||e.$$typeof===p||e.$$typeof===g||e.$$typeof===b||e.$$typeof===_||e.$$typeof===v)},t.typeOf=w},864:(e,t,n)=>{"use strict";e.exports=n(921)},408:(e,t,n)=>{"use strict";var r=n(418),i="function"==typeof Symbol&&Symbol.for,o=i?Symbol.for("react.element"):60103,a=i?Symbol.for("react.portal"):60106,u=i?Symbol.for("react.fragment"):60107,l=i?Symbol.for("react.strict_mode"):60108,c=i?Symbol.for("react.profiler"):60114,s=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,p=i?Symbol.for("react.forward_ref"):60112,d=i?Symbol.for("react.suspense"):60113,h=i?Symbol.for("react.memo"):60115,y=i?Symbol.for("react.lazy"):60116,m="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function _(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}function w(){}function S(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}_.prototype.isReactComponent={},_.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(v(85));this.updater.enqueueSetState(this,e,t,"setState")},_.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=_.prototype;var x=S.prototype=new w;x.constructor=S,r(x,_.prototype),x.isPureReactComponent=!0;var k={current:null},E=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r,i={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)E.call(t,r)&&!T.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];i.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:o,type:e,key:a,ref:u,props:i,_owner:k.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var P=/\/+/g,z=[];function I(e,t,n,r){if(z.length){var i=z.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function N(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>z.length&&z.push(e)}function j(e,t,n,r){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u=!1;if(null===e)u=!0;else switch(i){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case a:u=!0}}if(u)return n(r,e,""===t?"."+R(e,0):t),1;if(u=0,t=""===t?".":t+":",Array.isArray(e))for(var l=0;l<e.length;l++){var c=t+R(i=e[l],l);u+=j(i,c,n,r)}else if("function"==typeof(c=null===e||"object"!=typeof e?null:"function"==typeof(c=m&&e[m]||e["@@iterator"])?c:null))for(e=c.call(e),l=0;!(i=e.next()).done;)u+=j(i=i.value,c=t+R(i,l++),n,r);else if("object"===i)throw n=""+e,Error(v(31,"[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n,""));return u}function M(e,t,n){return null==e?0:j(e,"",t,n)}function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function A(e,t,n){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?L(e,r,n,(function(e){return e})):null!=e&&(C(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(P,"$&/")+"/")+n)),r.push(e))}function L(e,t,n,r,i){var o="";null!=n&&(o=(""+n).replace(P,"$&/")+"/"),M(e,A,t=I(t,o,r,i)),N(t)}var F={current:null};function B(){var e=F.current;if(null===e)throw Error(v(321));return e}var U={ReactCurrentDispatcher:F,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:k,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return L(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;M(e,D,t=I(null,null,t,n)),N(t)},count:function(e){return M(e,(function(){return null}),null)},toArray:function(e){var t=[];return L(e,t,null,(function(e){return e})),t},only:function(e){if(!C(e))throw Error(v(143));return e}},t.Component=_,t.Fragment=u,t.Profiler=c,t.PureComponent=S,t.StrictMode=l,t.Suspense=d,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=U,t.cloneElement=function(e,t,n){if(null==e)throw Error(v(267,e));var i=r({},e.props),a=e.key,u=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,l=k.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)E.call(t,s)&&!T.hasOwnProperty(s)&&(i[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)i.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];i.children=c}return{$$typeof:o,type:e.type,key:a,ref:u,props:i,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=O,t.createFactory=function(e){var t=O.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:p,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:y,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return B().useCallback(e,t)},t.useContext=function(e,t){return B().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return B().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return B().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return B().useLayoutEffect(e,t)},t.useMemo=function(e,t){return B().useMemo(e,t)},t.useReducer=function(e,t,n){return B().useReducer(e,t,n)},t.useRef=function(e){return B().useRef(e)},t.useState=function(e){return B().useState(e)},t.version="16.14.0"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";var n,r,i,o,a;if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,l=null,c=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(c,0),e}},s=Date.now();t.unstable_now=function(){return Date.now()-s},n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(c,0))},r=function(e,t){l=setTimeout(e,t)},i=function(){clearTimeout(l)},o=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var f=window.performance,p=window.Date,d=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var y=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof y&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof f&&"function"==typeof f.now)t.unstable_now=function(){return f.now()};else{var m=p.now();t.unstable_now=function(){return p.now()-m}}var v=!1,g=null,b=-1,_=5,w=0;o=function(){return t.unstable_now()>=w},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):_=0<e?Math.floor(1e3/e):5};var S=new MessageChannel,x=S.port2;S.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();w=e+_;try{g(!0,e)?x.postMessage(null):(v=!1,g=null)}catch(e){throw x.postMessage(null),e}}else v=!1},n=function(e){g=e,v||(v=!0,x.postMessage(null))},r=function(e,n){b=d((function(){e(t.unstable_now())}),n)},i=function(){h(b),b=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,i=e[r];if(!(void 0!==i&&0<O(i,t)))break e;e[r]=t,e[n]=i,n=r}}function E(e){return void 0===(e=e[0])?null:e}function T(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var o=2*(r+1)-1,a=e[o],u=o+1,l=e[u];if(void 0!==a&&0>O(a,n))void 0!==l&&0>O(l,a)?(e[r]=l,e[u]=n,r=u):(e[r]=a,e[o]=n,r=o);else{if(!(void 0!==l&&0>O(l,n)))break e;e[r]=l,e[u]=n,r=u}}}return t}return null}function O(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var C=[],P=[],z=1,I=null,N=3,j=!1,M=!1,R=!1;function D(e){for(var t=E(P);null!==t;){if(null===t.callback)T(P);else{if(!(t.startTime<=e))break;T(P),t.sortIndex=t.expirationTime,k(C,t)}t=E(P)}}function A(e){if(R=!1,D(e),!M)if(null!==E(C))M=!0,n(L);else{var t=E(P);null!==t&&r(A,t.startTime-e)}}function L(e,n){M=!1,R&&(R=!1,i()),j=!0;var a=N;try{for(D(n),I=E(C);null!==I&&(!(I.expirationTime>n)||e&&!o());){var u=I.callback;if(null!==u){I.callback=null,N=I.priorityLevel;var l=u(I.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?I.callback=l:I===E(C)&&T(C),D(n)}else T(C);I=E(C)}if(null!==I)var c=!0;else{var s=E(P);null!==s&&r(A,s.startTime-n),c=!1}return c}finally{I=null,N=a,j=!1}}function F(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var B=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){M||j||(M=!0,n(L))},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_getFirstCallbackNode=function(){return E(C)},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var n=N;N=t;try{return e()}finally{N=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=B,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=N;N=e;try{return t()}finally{N=n}},t.unstable_scheduleCallback=function(e,o,a){var u=t.unstable_now();if("object"==typeof a&&null!==a){var l=a.delay;l="number"==typeof l&&0<l?u+l:u,a="number"==typeof a.timeout?a.timeout:F(e)}else a=F(e),l=u;return e={id:z++,callback:o,priorityLevel:e,startTime:l,expirationTime:a=l+a,sortIndex:-1},l>u?(e.sortIndex=l,k(P,e),null===E(C)&&e===E(P)&&(R?i():R=!0,r(A,l-u))):(e.sortIndex=a,k(C,e),M||j||(M=!0,n(L))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();D(e);var n=E(C);return n!==I&&null!==I&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<I.expirationTime||o()},t.unstable_wrapCallback=function(e){var t=N;return function(){var n=N;N=t;try{return e.apply(this,arguments)}finally{N=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},887:e=>{"use strict";e.exports=function(e){for(var t=5381,n=e.length;n;)t=33*t^e.charCodeAt(--n);return t>>>0}},121:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r}),e=n.hmd(e);const r=function(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}("undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:e)}},t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={id:r,loaded:!1,exports:{}};return e[r](i,i.exports,n),i.loaded=!0,i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n(33)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,